
lab1_using_ab_ch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c260  0800c260  0000d260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c710  0800c710  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c710  0800c710  0000d710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c718  0800c718  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c718  0800c718  0000d718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c71c  0800c71c  0000d71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c720  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  200002c4  0800c9e4  0000e2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002038  0800c9e4  0000f038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de61  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb7  00000000  00000000  0001c155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0001ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f4  00000000  00000000  0001fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ad6  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001046f  00000000  00000000  00038e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008855a  00000000  00000000  00049279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d17d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c4  00000000  00000000  000d1818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d5ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c244 	.word	0x0800c244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800c244 	.word	0x0800c244

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <QuadratureEncoder_Init>:
    int last_position;
    uint32_t last_update_time;
    float speed;
} QuadratureEncoder;

void QuadratureEncoder_Init(QuadratureEncoder *encoder, int steps_per_revolution) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    encoder->steps_per_revolution = steps_per_revolution;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	601a      	str	r2, [r3, #0]
    encoder->position = 0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
    encoder->prev_A = 0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	811a      	strh	r2, [r3, #8]
    encoder->prev_B = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	815a      	strh	r2, [r3, #10]
    encoder->last_position = 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
    encoder->last_update_time = HAL_GetTick();
 800101c:	f000 fbc8 	bl	80017b0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	611a      	str	r2, [r3, #16]
    encoder->speed = 0.0f;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <QuadratureEncoder_Update>:

void QuadratureEncoder_Update(QuadratureEncoder *encoder, uint16_t A_raw, uint16_t B_raw) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	803b      	strh	r3, [r7, #0]
    uint16_t A = A_raw;
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	83bb      	strh	r3, [r7, #28]
    uint16_t B = B_raw;
 800104c:	883b      	ldrh	r3, [r7, #0]
 800104e:	837b      	strh	r3, [r7, #26]

    uint16_t state = (encoder->prev_A << 1) | encoder->prev_B;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	891b      	ldrh	r3, [r3, #8]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	895b      	ldrh	r3, [r3, #10]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21b      	sxth	r3, r3
 8001062:	833b      	strh	r3, [r7, #24]
    uint16_t new_state = (A << 1) | B;
 8001064:	8bbb      	ldrh	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b21a      	sxth	r2, r3
 800106a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	82fb      	strh	r3, [r7, #22]

    // Determine the delta based on state transitions
    int16_t delta = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	83fb      	strh	r3, [r7, #30]
    if (state == 0b00) {
 8001078:	8b3b      	ldrh	r3, [r7, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10c      	bne.n	8001098 <QuadratureEncoder_Update+0x60>
        if (new_state == 0b01) delta = 1;
 800107e:	8afb      	ldrh	r3, [r7, #22]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <QuadratureEncoder_Update+0x52>
 8001084:	2301      	movs	r3, #1
 8001086:	83fb      	strh	r3, [r7, #30]
 8001088:	e035      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
        else if (new_state == 0b10) delta = -1;
 800108a:	8afb      	ldrh	r3, [r7, #22]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d132      	bne.n	80010f6 <QuadratureEncoder_Update+0xbe>
 8001090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001094:	83fb      	strh	r3, [r7, #30]
 8001096:	e02e      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
    } else if (state == 0b01) {
 8001098:	8b3b      	ldrh	r3, [r7, #24]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10c      	bne.n	80010b8 <QuadratureEncoder_Update+0x80>
        if (new_state == 0b11) delta = 1;
 800109e:	8afb      	ldrh	r3, [r7, #22]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d102      	bne.n	80010aa <QuadratureEncoder_Update+0x72>
 80010a4:	2301      	movs	r3, #1
 80010a6:	83fb      	strh	r3, [r7, #30]
 80010a8:	e025      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
        else if (new_state == 0b00) delta = -1;
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d122      	bne.n	80010f6 <QuadratureEncoder_Update+0xbe>
 80010b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b4:	83fb      	strh	r3, [r7, #30]
 80010b6:	e01e      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
    } else if (state == 0b10) {
 80010b8:	8b3b      	ldrh	r3, [r7, #24]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d10c      	bne.n	80010d8 <QuadratureEncoder_Update+0xa0>
        if (new_state == 0b00) delta = 1;
 80010be:	8afb      	ldrh	r3, [r7, #22]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <QuadratureEncoder_Update+0x92>
 80010c4:	2301      	movs	r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
 80010c8:	e015      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
        else if (new_state == 0b11) delta = -1;
 80010ca:	8afb      	ldrh	r3, [r7, #22]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d112      	bne.n	80010f6 <QuadratureEncoder_Update+0xbe>
 80010d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d4:	83fb      	strh	r3, [r7, #30]
 80010d6:	e00e      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
    } else if (state == 0b11) {
 80010d8:	8b3b      	ldrh	r3, [r7, #24]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d10b      	bne.n	80010f6 <QuadratureEncoder_Update+0xbe>
        if (new_state == 0b10) delta = 1;
 80010de:	8afb      	ldrh	r3, [r7, #22]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d102      	bne.n	80010ea <QuadratureEncoder_Update+0xb2>
 80010e4:	2301      	movs	r3, #1
 80010e6:	83fb      	strh	r3, [r7, #30]
 80010e8:	e005      	b.n	80010f6 <QuadratureEncoder_Update+0xbe>
        else if (new_state == 0b01) delta = -1;
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <QuadratureEncoder_Update+0xbe>
 80010f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f4:	83fb      	strh	r3, [r7, #30]
    }

    encoder->position += delta;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	605a      	str	r2, [r3, #4]

    encoder->prev_A = A;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8bba      	ldrh	r2, [r7, #28]
 8001108:	811a      	strh	r2, [r3, #8]
    encoder->prev_B = B;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	8b7a      	ldrh	r2, [r7, #26]
 800110e:	815a      	strh	r2, [r3, #10]

    // Calculate speed
    uint32_t current_time = HAL_GetTick();
 8001110:	f000 fb4e 	bl	80017b0 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]
    uint32_t dt = current_time - encoder->last_update_time; // Time difference in milliseconds
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	60fb      	str	r3, [r7, #12]

    if (dt > 0) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d018      	beq.n	8001158 <QuadratureEncoder_Update+0x120>
        int position_change = encoder->position - encoder->last_position;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	60bb      	str	r3, [r7, #8]
        encoder->speed = (1000.0f * position_change) / dt; // Speed in steps per second
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001170 <QuadratureEncoder_Update+0x138>
 8001140:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    // Update last position and time
    encoder->last_position = encoder->position;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]
    encoder->last_update_time = current_time;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	611a      	str	r2, [r3, #16]
}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	447a0000 	.word	0x447a0000

08001174 <QuadratureEncoder_GetAngle>:

float QuadratureEncoder_GetAngle(QuadratureEncoder *encoder) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    return ((float)encoder->position / encoder->steps_per_revolution) * 360.0f;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80011b0 <QuadratureEncoder_GetAngle+0x3c>
 800119c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	43b40000 	.word	0x43b40000

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fa93 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f85d 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 f8c5 	bl	8001350 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80011c6:	f005 ff87 	bl	80070d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  QuadratureEncoder_Init(&encoder, 80);
 80011ca:	2150      	movs	r1, #80	@ 0x50
 80011cc:	4824      	ldr	r0, [pc, #144]	@ (8001260 <main+0xac>)
 80011ce:	f7ff ff11 	bl	8000ff4 <QuadratureEncoder_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  A_raw = HAL_GPIO_ReadPin(ACH_GPIO_Port, ACH_Pin);
 80011d2:	2101      	movs	r1, #1
 80011d4:	4823      	ldr	r0, [pc, #140]	@ (8001264 <main+0xb0>)
 80011d6:	f000 fdb1 	bl	8001d3c <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <main+0xb4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	  B_raw = HAL_GPIO_ReadPin(BCH_GPIO_Port, BCH_Pin);
 80011e2:	2102      	movs	r1, #2
 80011e4:	481f      	ldr	r0, [pc, #124]	@ (8001264 <main+0xb0>)
 80011e6:	f000 fda9 	bl	8001d3c <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <main+0xb8>)
 80011f0:	801a      	strh	r2, [r3, #0]

	  QuadratureEncoder_Update(&encoder, A_raw, B_raw);
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <main+0xb4>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <main+0xb8>)
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4818      	ldr	r0, [pc, #96]	@ (8001260 <main+0xac>)
 80011fe:	f7ff ff1b 	bl	8001038 <QuadratureEncoder_Update>

      angle = QuadratureEncoder_GetAngle(&encoder);
 8001202:	4817      	ldr	r0, [pc, #92]	@ (8001260 <main+0xac>)
 8001204:	f7ff ffb6 	bl	8001174 <QuadratureEncoder_GetAngle>
 8001208:	eef0 7a40 	vmov.f32	s15, s0
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <main+0xbc>)
 800120e:	edc3 7a00 	vstr	s15, [r3]
//
//      sprintf((char*)UserTxBufferFS, "%d\n", encoder.position);  // Update data buffer to send
//      CDC_Transmit_FS(UserTxBufferFS, sizeof UserTxBufferFS / sizeof UserTxBufferFS[0]); // Send the data to Serial Com Port


      snprintf(UserTxBufferFS, sizeof(UserTxBufferFS), "Speed: %.2f steps/s | Angle: %.2f°\r\n", encoder.speed, angle);
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <main+0xac>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f99e 	bl	8000558 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <main+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f997 	bl	8000558 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001232:	e9cd 4500 	strd	r4, r5, [sp]
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <main+0xc0>)
 8001238:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <main+0xc4>)
 800123e:	f007 fb93 	bl	8008968 <sniprintf>

      /* Send data to USB CDC */
      CDC_Transmit_FS((uint8_t*)UserTxBufferFS, strlen(UserTxBufferFS));
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <main+0xc4>)
 8001244:	f7ff f81c 	bl	8000280 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29b      	uxth	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	480a      	ldr	r0, [pc, #40]	@ (8001278 <main+0xc4>)
 8001250:	f006 f800 	bl	8007254 <CDC_Transmit_FS>

      HAL_Delay(100); // Delay to prevent excessive printing
 8001254:	2064      	movs	r0, #100	@ 0x64
 8001256:	f000 fab7 	bl	80017c8 <HAL_Delay>
	  A_raw = HAL_GPIO_ReadPin(ACH_GPIO_Port, ACH_Pin);
 800125a:	bf00      	nop
 800125c:	e7b9      	b.n	80011d2 <main+0x1e>
 800125e:	bf00      	nop
 8001260:	200002e8 	.word	0x200002e8
 8001264:	40020000 	.word	0x40020000
 8001268:	200002e0 	.word	0x200002e0
 800126c:	200002e2 	.word	0x200002e2
 8001270:	200002e4 	.word	0x200002e4
 8001274:	0800c260 	.word	0x0800c260
 8001278:	20000de8 	.word	0x20000de8

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	@ 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	@ 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fc03 	bl	8008a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <SystemClock_Config+0xcc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012c8:	4a20      	ldr	r2, [pc, #128]	@ (800134c <SystemClock_Config+0xd0>)
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <SystemClock_Config+0xd0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012dc:	2301      	movs	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80012f0:	230f      	movs	r3, #15
 80012f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012f4:	2390      	movs	r3, #144	@ 0x90
 80012f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012fc:	2305      	movs	r3, #5
 80012fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	4618      	mov	r0, r3
 8001306:	f001 ff9d 	bl	8003244 <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001310:	f000 f87e 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f9ff 	bl	8003734 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800133c:	f000 f868 	bl	8001410 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	@ 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <MX_GPIO_Init+0xb4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <MX_GPIO_Init+0xb4>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <MX_GPIO_Init+0xb4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <MX_GPIO_Init+0xb4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <MX_GPIO_Init+0xb4>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_GPIO_Init+0xb4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <MX_GPIO_Init+0xb4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <MX_GPIO_Init+0xb4>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <MX_GPIO_Init+0xb4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_GPIO_Init+0xb8>)
 80013c2:	f000 fcd3 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	480a      	ldr	r0, [pc, #40]	@ (8001408 <MX_GPIO_Init+0xb8>)
 80013e0:	f000 fb28 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACH_Pin BCH_Pin */
  GPIO_InitStruct.Pin = ACH_Pin|BCH_Pin;
 80013e4:	2303      	movs	r3, #3
 80013e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_GPIO_Init+0xbc>)
 80013f8:	f000 fb1c 	bl	8001a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	@ 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 f961 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <OTG_FS_IRQHandler+0x10>)
 80014d2:	f000 fda8 	bl	8002026 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200017e8 	.word	0x200017e8

080014e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_kill>:

int _kill(int pid, int sig)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014fa:	f007 fb1f 	bl	8008b3c <__errno>
 80014fe:	4603      	mov	r3, r0
 8001500:	2216      	movs	r2, #22
 8001502:	601a      	str	r2, [r3, #0]
  return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_exit>:

void _exit (int status)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ffe7 	bl	80014f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001522:	bf00      	nop
 8001524:	e7fd      	b.n	8001522 <_exit+0x12>

08001526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e00a      	b.n	800154e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001538:	f3af 8000 	nop.w
 800153c:	4601      	mov	r1, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	60ba      	str	r2, [r7, #8]
 8001544:	b2ca      	uxtb	r2, r1
 8001546:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	dbf0      	blt.n	8001538 <_read+0x12>
  }

  return len;
 8001556:	687b      	ldr	r3, [r7, #4]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e009      	b.n	8001586 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	60ba      	str	r2, [r7, #8]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbf1      	blt.n	8001572 <_write+0x12>
  }
  return len;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_close>:

int _close(int file)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c0:	605a      	str	r2, [r3, #4]
  return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_isatty>:

int _isatty(int file)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	@ (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f007 fa84 	bl	8008b3c <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20018000 	.word	0x20018000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000300 	.word	0x20000300
 8001668:	20002038 	.word	0x20002038

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001694:	f7ff ffea 	bl	800166c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016be:	f007 fa43 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fd77 	bl	80011b4 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80016d4:	0800c720 	.word	0x0800c720
  ldr r2, =_sbss
 80016d8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80016dc:	20002038 	.word	0x20002038

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f94f 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fe80 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f967 	bl	8001a1a <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f92f 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000304 	.word	0x20000304

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000304 	.word	0x20000304

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	@ (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	@ (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	@ (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	@ 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff3e 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff8e 	bl	8001904 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5d 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff31 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa2 	bl	800196c <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e159      	b.n	8001d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8148 	bne.w	8001cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d005      	beq.n	8001a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a2 	beq.w	8001cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b57      	ldr	r3, [pc, #348]	@ (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	4a56      	ldr	r2, [pc, #344]	@ (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bca:	4b54      	ldr	r3, [pc, #336]	@ (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd6:	4a52      	ldr	r2, [pc, #328]	@ (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x202>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a48      	ldr	r2, [pc, #288]	@ (8001d28 <HAL_GPIO_Init+0x2f4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x1fe>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a47      	ldr	r2, [pc, #284]	@ (8001d2c <HAL_GPIO_Init+0x2f8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x1fa>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a46      	ldr	r2, [pc, #280]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x1f6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	@ (8001d34 <HAL_GPIO_Init+0x300>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x1f2>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	@ (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c56:	4b38      	ldr	r3, [pc, #224]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cce:	4a1a      	ldr	r2, [pc, #104]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f aea2 	bls.w	8001a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	@ 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af02      	add	r7, sp, #8
 8001da4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e101      	b.n	8001fb4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f005 fb8a 	bl	80074e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dde:	d102      	bne.n	8001de6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 ff71 	bl	8003cd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7c1a      	ldrb	r2, [r3, #16]
 8001df8:	f88d 2000 	strb.w	r2, [sp]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e00:	f001 fe50 	bl	8003aa4 <USB_CoreInit>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0ce      	b.n	8001fb4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 ff69 	bl	8003cf4 <USB_SetCurrentMode>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0bf      	b.n	8001fb4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e04a      	b.n	8001ed0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3315      	adds	r3, #21
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	b298      	uxth	r0, r3
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	332e      	adds	r3, #46	@ 0x2e
 8001e76:	4602      	mov	r2, r0
 8001e78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	3318      	adds	r3, #24
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	331c      	adds	r3, #28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3320      	adds	r3, #32
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3324      	adds	r3, #36	@ 0x24
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3af      	bcc.n	8001e3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e044      	b.n	8001f6a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3b5      	bcc.n	8001ee0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7c1a      	ldrb	r2, [r3, #16]
 8001f7c:	f88d 2000 	strb.w	r2, [sp]
 8001f80:	3304      	adds	r3, #4
 8001f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f84:	f001 ff02 	bl	8003d8c <USB_DevInit>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00c      	b.n	8001fb4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 ff4c 	bl	8004e4a <USB_DevDisconnect>

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_PCD_Start+0x1c>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e022      	b.n	800201e <HAL_PCD_Start+0x62>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fe53 	bl	8003cb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fefa 	bl	8004e08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b08d      	sub	sp, #52	@ 0x34
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f002 ffb8 	bl	8004fb2 <USB_GetMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 848c 	bne.w	8002962 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f002 ff1c 	bl	8004e8c <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8482 	beq.w	8002960 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 ff09 	bl	8004e8c <USB_ReadInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b02      	cmp	r3, #2
 8002082:	d107      	bne.n	8002094 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f002 0202 	and.w	r2, r2, #2
 8002092:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fef7 	bl	8004e8c <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d161      	bne.n	800216c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0210 	bic.w	r2, r2, #16
 80020b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	0c5b      	lsrs	r3, r3, #17
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d124      	bne.n	800212e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d035      	beq.n	800215c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020fe:	b29b      	uxth	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	6a38      	ldr	r0, [r7, #32]
 8002104:	f002 fd2e 	bl	8004b64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002114:	441a      	add	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002126:	441a      	add	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	e016      	b.n	800215c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	0c5b      	lsrs	r3, r3, #17
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	2b06      	cmp	r3, #6
 8002138:	d110      	bne.n	800215c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002140:	2208      	movs	r2, #8
 8002142:	4619      	mov	r1, r3
 8002144:	6a38      	ldr	r0, [r7, #32]
 8002146:	f002 fd0d 	bl	8004b64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002156:	441a      	add	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0210 	orr.w	r2, r2, #16
 800216a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f002 fe8b 	bl	8004e8c <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002180:	f040 80a7 	bne.w	80022d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fe90 	bl	8004eb2 <USB_ReadDevAllOutEpInterrupt>
 8002192:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002194:	e099      	b.n	80022ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 808e 	beq.w	80022be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 feb4 	bl	8004f1a <USB_ReadDevOutEPInterrupt>
 80021b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ca:	461a      	mov	r2, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fea4 	bl	8002f20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ee:	461a      	mov	r2, r3
 80021f0:	2308      	movs	r3, #8
 80021f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 ff7a 	bl	80030f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	2310      	movs	r3, #16
 8002216:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d030      	beq.n	8002284 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222a:	2b80      	cmp	r3, #128	@ 0x80
 800222c:	d109      	bne.n	8002242 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800223c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002240:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	78db      	ldrb	r3, [r3, #3]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2200      	movs	r2, #0
 8002264:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f005 fa3f 	bl	80076f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800227e:	461a      	mov	r2, r3
 8002280:	2302      	movs	r3, #2
 8002282:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2320      	movs	r3, #32
 800229e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022b6:	461a      	mov	r2, r3
 80022b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f af62 	bne.w	8002196 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fdd8 	bl	8004e8c <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022e6:	f040 80db 	bne.w	80024a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fdf9 	bl	8004ee6 <USB_ReadDevAllInEpInterrupt>
 80022f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80022fa:	e0cd      	b.n	8002498 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80c2 	beq.w	800248c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fe1f 	bl	8004f56 <USB_ReadDevInEPInterrupt>
 8002318:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d057      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	2201      	movs	r2, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	69f9      	ldr	r1, [r7, #28]
 8002340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002344:	4013      	ands	r3, r2
 8002346:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002354:	461a      	mov	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	799b      	ldrb	r3, [r3, #6]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d132      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3320      	adds	r3, #32
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4403      	add	r3, r0
 8002382:	331c      	adds	r3, #28
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4419      	add	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4403      	add	r3, r0
 8002396:	3320      	adds	r3, #32
 8002398:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d113      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x3a2>
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3324      	adds	r3, #36	@ 0x24
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023c0:	461a      	mov	r2, r3
 80023c2:	2101      	movs	r1, #1
 80023c4:	f002 fe26 	bl	8005014 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f005 f909 	bl	80075e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ea:	461a      	mov	r2, r3
 80023ec:	2308      	movs	r3, #8
 80023ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002406:	461a      	mov	r2, r3
 8002408:	2310      	movs	r3, #16
 800240a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002422:	461a      	mov	r2, r3
 8002424:	2340      	movs	r3, #64	@ 0x40
 8002426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d023      	beq.n	800247a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002434:	6a38      	ldr	r0, [r7, #32]
 8002436:	f001 fe0d 	bl	8004054 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	3310      	adds	r3, #16
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d108      	bne.n	8002468 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f005 f956 	bl	8007714 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002474:	461a      	mov	r2, r3
 8002476:	2302      	movs	r3, #2
 8002478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fcbd 	bl	8002e06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	f47f af2e 	bne.w	80022fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fcf1 	bl	8004e8c <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024b4:	d122      	bne.n	80024fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024dc:	2100      	movs	r1, #0
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fea4 	bl	800322c <HAL_PCDEx_LPM_Callback>
 80024e4:	e002      	b.n	80024ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f005 f8f4 	bl	80076d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80024fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fcc3 	bl	8004e8c <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002510:	d112      	bne.n	8002538 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f005 f8b0 	bl	8007688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002536:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fca5 	bl	8004e8c <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254c:	f040 80b7 	bne.w	80026be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2110      	movs	r1, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fd72 	bl	8004054 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002574:	e046      	b.n	8002604 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002582:	461a      	mov	r2, r3
 8002584:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002588:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800259a:	0151      	lsls	r1, r2, #5
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	440a      	add	r2, r1
 80025a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80025a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b6:	461a      	mov	r2, r3
 80025b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80025bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80025d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80025f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002600:	3301      	adds	r3, #1
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	791b      	ldrb	r3, [r3, #4]
 8002608:	461a      	mov	r2, r3
 800260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260c:	4293      	cmp	r3, r2
 800260e:	d3b2      	bcc.n	8002576 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800261e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002622:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7bdb      	ldrb	r3, [r3, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d016      	beq.n	800265a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800263c:	f043 030b 	orr.w	r3, r3, #11
 8002640:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800264a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002652:	f043 030b 	orr.w	r3, r3, #11
 8002656:	6453      	str	r3, [r2, #68]	@ 0x44
 8002658:	e015      	b.n	8002686 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002668:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800266c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002670:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002680:	f043 030b 	orr.w	r3, r3, #11
 8002684:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002694:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002698:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026a8:	461a      	mov	r2, r3
 80026aa:	f002 fcb3 	bl	8005014 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fbe2 	bl	8004e8c <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d2:	d123      	bne.n	800271c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fc78 	bl	8004fce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f001 fd2f 	bl	8004146 <USB_GetDevSpeed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	f001 f9ca 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 80026f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026fe:	461a      	mov	r2, r3
 8002700:	4620      	mov	r0, r4
 8002702:	f001 fa33 	bl	8003b6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f004 ff95 	bl	8007636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800271a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fbb3 	bl	8004e8c <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b08      	cmp	r3, #8
 800272e:	d10a      	bne.n	8002746 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f004 ff72 	bl	800761a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 0208 	and.w	r2, r2, #8
 8002744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f002 fb9e 	bl	8004e8c <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002756:	2b80      	cmp	r3, #128	@ 0x80
 8002758:	d123      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002766:	2301      	movs	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
 800276a:	e014      	b.n	8002796 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fb0a 	bl	8002da4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	3301      	adds	r3, #1
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	791b      	ldrb	r3, [r3, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	4293      	cmp	r3, r2
 80027a0:	d3e4      	bcc.n	800276c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fb70 	bl	8004e8c <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027b6:	d13c      	bne.n	8002832 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b8:	2301      	movs	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80027bc:	e02b      	b.n	8002816 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3318      	adds	r3, #24
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d115      	bne.n	8002810 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80027e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da12      	bge.n	8002810 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3317      	adds	r3, #23
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 faca 	bl	8002da4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	3301      	adds	r3, #1
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	461a      	mov	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	4293      	cmp	r3, r2
 8002820:	d3cd      	bcc.n	80027be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fb28 	bl	8004e8c <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002846:	d156      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
 800284c:	e045      	b.n	80028da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d12e      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002876:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	da2b      	bge.n	80028d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002888:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028d0:	6053      	str	r3, [r2, #4]
            break;
 80028d2:	e008      	b.n	80028e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	3301      	adds	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	461a      	mov	r2, r3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d3b3      	bcc.n	800284e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fac6 	bl	8004e8c <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290a:	d10a      	bne.n	8002922 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f004 ff13 	bl	8007738 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fab0 	bl	8004e8c <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d115      	bne.n	8002962 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f004 ff03 	bl	8007754 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e000      	b.n	8002962 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002960:	bf00      	nop
    }
  }
}
 8002962:	3734      	adds	r7, #52	@ 0x34
 8002964:	46bd      	mov	sp, r7
 8002966:	bd90      	pop	{r4, r7, pc}

08002968 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_PCD_SetAddress+0x1a>
 800297e:	2302      	movs	r3, #2
 8002980:	e012      	b.n	80029a8 <HAL_PCD_SetAddress+0x40>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fa0f 	bl	8004dbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	70fb      	strb	r3, [r7, #3]
 80029c2:	460b      	mov	r3, r1
 80029c4:	803b      	strh	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da0f      	bge.n	80029f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	3310      	adds	r3, #16
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	3304      	adds	r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	705a      	strb	r2, [r3, #1]
 80029f4:	e00f      	b.n	8002a16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 020f 	and.w	r2, r3, #15
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002a22:	883b      	ldrh	r3, [r7, #0]
 8002a24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	78ba      	ldrb	r2, [r7, #2]
 8002a30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a44:	78bb      	ldrb	r3, [r7, #2]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d102      	bne.n	8002a50 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_PCD_EP_Open+0xae>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e00e      	b.n	8002a7c <HAL_PCD_EP_Open+0xcc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fb8f 	bl	8004190 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da0f      	bge.n	8002ab8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00f      	b.n	8002ad8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 020f 	and.w	r2, r3, #15
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_EP_Close+0x6e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e00e      	b.n	8002b10 <HAL_PCD_EP_Close+0x8c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 fbcd 	bl	80042a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	799b      	ldrb	r3, [r3, #6]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6979      	ldr	r1, [r7, #20]
 8002b80:	f001 fc6a 	bl	8004458 <USB_EPStartXfer>

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002bb0:	681b      	ldr	r3, [r3, #0]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3310      	adds	r3, #16
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	799b      	ldrb	r3, [r3, #6]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6979      	ldr	r1, [r7, #20]
 8002c24:	f001 fc18 	bl	8004458 <USB_EPStartXfer>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	7912      	ldrb	r2, [r2, #4]
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04f      	b.n	8002cf0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da0f      	bge.n	8002c78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	3310      	adds	r3, #16
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
 8002c76:	e00d      	b.n	8002c94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_EP_SetStall+0x82>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e01d      	b.n	8002cf0 <HAL_PCD_EP_SetStall+0xbe>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 ffa6 	bl	8004c14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7999      	ldrb	r1, [r3, #6]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f002 f997 	bl	8005014 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	7912      	ldrb	r2, [r2, #4]
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e042      	b.n	8002d9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da0f      	bge.n	8002d3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3310      	adds	r3, #16
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	705a      	strb	r2, [r3, #1]
 8002d3c:	e00f      	b.n	8002d5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_EP_ClrStall+0x86>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e00e      	b.n	8002d9c <HAL_PCD_EP_ClrStall+0xa4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 ffaf 	bl	8004cf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da0c      	bge.n	8002dd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3310      	adds	r3, #16
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e00c      	b.n	8002dec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fdce 	bl	8004994 <USB_EPStopXfer>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08a      	sub	sp, #40	@ 0x28
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3310      	adds	r3, #16
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d901      	bls.n	8002e3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06b      	b.n	8002f16 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d902      	bls.n	8002e5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e62:	e02a      	b.n	8002eba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d902      	bls.n	8002e80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3303      	adds	r3, #3
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f001 fe23 	bl	8004ae8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	441a      	add	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d809      	bhi.n	8002ee4 <PCD_WriteEmptyTxFifo+0xde>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d203      	bcs.n	8002ee4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1bf      	bne.n	8002e64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d811      	bhi.n	8002f14 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	6939      	ldr	r1, [r7, #16]
 8002f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f10:	4013      	ands	r3, r2
 8002f12:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	333c      	adds	r3, #60	@ 0x3c
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	799b      	ldrb	r3, [r3, #6]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d17b      	bne.n	800304e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	4a61      	ldr	r2, [pc, #388]	@ (80030e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	f240 80b9 	bls.w	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80b3 	beq.w	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f82:	461a      	mov	r2, r3
 8002f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f88:	6093      	str	r3, [r2, #8]
 8002f8a:	e0a7      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	6093      	str	r3, [r2, #8]
 8002fa8:	e098      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 8093 	bne.w	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80030e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d90f      	bls.n	8002fde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	e07e      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	440b      	add	r3, r1
 8003000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003028:	461a      	mov	r2, r3
 800302a:	2101      	movs	r1, #1
 800302c:	f001 fff2 	bl	8005014 <USB_EP0_OutStart>
 8003030:	e006      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	441a      	add	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f004 fab2 	bl	80075b0 <HAL_PCD_DataOutStageCallback>
 800304c:	e046      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d124      	bne.n	80030a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306c:	461a      	mov	r2, r3
 800306e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003072:	6093      	str	r3, [r2, #8]
 8003074:	e032      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308c:	461a      	mov	r2, r3
 800308e:	2320      	movs	r3, #32
 8003090:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f004 fa89 	bl	80075b0 <HAL_PCD_DataOutStageCallback>
 800309e:	e01d      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d114      	bne.n	80030d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030c8:	461a      	mov	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f001 ffa2 	bl	8005014 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4619      	mov	r1, r3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f004 fa6a 	bl	80075b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	4f54300a 	.word	0x4f54300a
 80030ec:	4f54310a 	.word	0x4f54310a

080030f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	333c      	adds	r3, #60	@ 0x3c
 8003108:	3304      	adds	r3, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <PCD_EP_OutSetupPacket_int+0x88>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d90e      	bls.n	8003144 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003142:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f004 fa21 	bl	800758c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <PCD_EP_OutSetupPacket_int+0x88>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d90c      	bls.n	800316c <PCD_EP_OutSetupPacket_int+0x7c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	799b      	ldrb	r3, [r3, #6]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d108      	bne.n	800316c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003164:	461a      	mov	r2, r3
 8003166:	2101      	movs	r1, #1
 8003168:	f001 ff54 	bl	8005014 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	4f54300a 	.word	0x4f54300a

0800317c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
 8003188:	4613      	mov	r3, r2
 800318a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d107      	bne.n	80031aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800319a:	883b      	ldrh	r3, [r7, #0]
 800319c:	0419      	lsls	r1, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80031a8:	e028      	b.n	80031fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e00d      	b.n	80031da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	3340      	adds	r3, #64	@ 0x40
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	3301      	adds	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	3b01      	subs	r3, #1
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3ec      	bcc.n	80031be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031e4:	883b      	ldrh	r3, [r7, #0]
 80031e6:	0418      	lsls	r0, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	4302      	orrs	r2, r0
 80031f4:	3340      	adds	r3, #64	@ 0x40
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e267      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d075      	beq.n	800334e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003262:	4b88      	ldr	r3, [pc, #544]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00c      	beq.n	8003288 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326e:	4b85      	ldr	r3, [pc, #532]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003276:	2b08      	cmp	r3, #8
 8003278:	d112      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327a:	4b82      	ldr	r3, [pc, #520]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003286:	d10b      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	4b7e      	ldr	r3, [pc, #504]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05b      	beq.n	800334c <HAL_RCC_OscConfig+0x108>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d157      	bne.n	800334c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e242      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a8:	d106      	bne.n	80032b8 <HAL_RCC_OscConfig+0x74>
 80032aa:	4b76      	ldr	r3, [pc, #472]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a75      	ldr	r2, [pc, #468]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xb0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x98>
 80032c2:	4b70      	ldr	r3, [pc, #448]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xb0>
 80032dc:	4b69      	ldr	r3, [pc, #420]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a68      	ldr	r2, [pc, #416]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b66      	ldr	r3, [pc, #408]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a65      	ldr	r2, [pc, #404]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe fa58 	bl	80017b0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fe fa54 	bl	80017b0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e207      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b5b      	ldr	r3, [pc, #364]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xc0>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe fa44 	bl	80017b0 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe fa40 	bl	80017b0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	@ 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1f3      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b51      	ldr	r3, [pc, #324]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0xe8>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800335a:	4b4a      	ldr	r3, [pc, #296]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003366:	4b47      	ldr	r3, [pc, #284]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b44      	ldr	r3, [pc, #272]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b41      	ldr	r3, [pc, #260]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x152>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1c7      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4937      	ldr	r1, [pc, #220]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <HAL_RCC_OscConfig+0x244>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe f9f9 	bl	80017b0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe f9f5 	bl	80017b0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1a8      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b28      	ldr	r3, [pc, #160]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4925      	ldr	r1, [pc, #148]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_RCC_OscConfig+0x244>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe f9d8 	bl	80017b0 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe f9d4 	bl	80017b0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e187      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d036      	beq.n	800349c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <HAL_RCC_OscConfig+0x248>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe f9b8 	bl	80017b0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7fe f9b4 	bl	80017b0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e167      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x200>
 8003462:	e01b      	b.n	800349c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_RCC_OscConfig+0x248>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346a:	f7fe f9a1 	bl	80017b0 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	e00e      	b.n	8003490 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe f99d 	bl	80017b0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d907      	bls.n	8003490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e150      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
 8003484:	40023800 	.word	0x40023800
 8003488:	42470000 	.word	0x42470000
 800348c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	4b88      	ldr	r3, [pc, #544]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ea      	bne.n	8003472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8097 	beq.w	80035d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ae:	4b81      	ldr	r3, [pc, #516]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b7d      	ldr	r3, [pc, #500]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	4a7c      	ldr	r2, [pc, #496]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ca:	4b7a      	ldr	r3, [pc, #488]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	4b77      	ldr	r3, [pc, #476]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e6:	4b74      	ldr	r3, [pc, #464]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a73      	ldr	r2, [pc, #460]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7fe f95d 	bl	80017b0 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe f959 	bl	80017b0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e10c      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	4b6a      	ldr	r3, [pc, #424]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x2ea>
 8003520:	4b64      	ldr	r3, [pc, #400]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	4a63      	ldr	r2, [pc, #396]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	@ 0x70
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x324>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b05      	cmp	r3, #5
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x30c>
 8003536:	4b5f      	ldr	r3, [pc, #380]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	4a5e      	ldr	r2, [pc, #376]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6713      	str	r3, [r2, #112]	@ 0x70
 8003542:	4b5c      	ldr	r3, [pc, #368]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	4a5b      	ldr	r2, [pc, #364]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6713      	str	r3, [r2, #112]	@ 0x70
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0x324>
 8003550:	4b58      	ldr	r3, [pc, #352]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003554:	4a57      	ldr	r2, [pc, #348]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	@ 0x70
 800355c:	4b55      	ldr	r3, [pc, #340]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	4a54      	ldr	r2, [pc, #336]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe f91e 	bl	80017b0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	e00a      	b.n	800358e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003578:	f7fe f91a 	bl	80017b0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0cb      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	4b49      	ldr	r3, [pc, #292]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ee      	beq.n	8003578 <HAL_RCC_OscConfig+0x334>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359c:	f7fe f908 	bl	80017b0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe f904 	bl	80017b0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0b5      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	4b3e      	ldr	r3, [pc, #248]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1ee      	bne.n	80035a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	4a38      	ldr	r2, [pc, #224]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a1 	beq.w	8003724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e2:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d05c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d141      	bne.n	800367a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <HAL_RCC_OscConfig+0x478>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fe f8d8 	bl	80017b0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe f8d4 	bl	80017b0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e087      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	3b01      	subs	r3, #1
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	491b      	ldr	r1, [pc, #108]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_RCC_OscConfig+0x478>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe f8ad 	bl	80017b0 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe f8a9 	bl	80017b0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e05c      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x416>
 8003678:	e054      	b.n	8003724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367a:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_RCC_OscConfig+0x478>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe f896 	bl	80017b0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe f892 	bl	80017b0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e045      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x444>
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e038      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40007000 	.word	0x40007000
 80036bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <HAL_RCC_OscConfig+0x4ec>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d028      	beq.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d121      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d11a      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d111      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	3b01      	subs	r3, #1
 800370a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0cc      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b68      	ldr	r3, [pc, #416]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d90c      	bls.n	8003770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b65      	ldr	r3, [pc, #404]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b63      	ldr	r3, [pc, #396]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b8      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003788:	4b59      	ldr	r3, [pc, #356]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a58      	ldr	r2, [pc, #352]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a0:	4b53      	ldr	r3, [pc, #332]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a52      	ldr	r2, [pc, #328]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	494d      	ldr	r1, [pc, #308]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d044      	beq.n	8003854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d119      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e07f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e067      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b37      	ldr	r3, [pc, #220]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4934      	ldr	r1, [pc, #208]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003824:	f7fd ffc4 	bl	80017b0 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fd ffc0 	bl	80017b0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e04f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d20c      	bcs.n	800387c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b22      	ldr	r3, [pc, #136]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b20      	ldr	r3, [pc, #128]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e032      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4916      	ldr	r1, [pc, #88]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	490e      	ldr	r1, [pc, #56]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ba:	f000 f821 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	490a      	ldr	r1, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038d6:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd ff24 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00
 80038f0:	40023800 	.word	0x40023800
 80038f4:	0800c2d0 	.word	0x0800c2d0
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b090      	sub	sp, #64	@ 0x40
 8003906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003918:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d00d      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x40>
 8003924:	2b08      	cmp	r3, #8
 8003926:	f200 80a1 	bhi.w	8003a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x34>
 800392e:	2b04      	cmp	r3, #4
 8003930:	d003      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x3a>
 8003932:	e09b      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b53      	ldr	r3, [pc, #332]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003938:	e09b      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393a:	4b53      	ldr	r3, [pc, #332]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800393c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800393e:	e098      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003940:	4b4f      	ldr	r3, [pc, #316]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800394a:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	2200      	movs	r2, #0
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	627a      	str	r2, [r7, #36]	@ 0x24
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003968:	2100      	movs	r1, #0
 800396a:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800396c:	fb03 f201 	mul.w	r2, r3, r1
 8003970:	2300      	movs	r3, #0
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	4413      	add	r3, r2
 8003978:	4a43      	ldr	r2, [pc, #268]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800397a:	fba0 1202 	umull	r1, r2, r0, r2
 800397e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003980:	460a      	mov	r2, r1
 8003982:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003986:	4413      	add	r3, r2
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	2200      	movs	r2, #0
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	61fa      	str	r2, [r7, #28]
 8003992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800399a:	f7fd f97d 	bl	8000c98 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4613      	mov	r3, r2
 80039a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a6:	e053      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a8:	4b35      	ldr	r3, [pc, #212]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	2200      	movs	r2, #0
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	617a      	str	r2, [r7, #20]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039ba:	f04f 0b00 	mov.w	fp, #0
 80039be:	4652      	mov	r2, sl
 80039c0:	465b      	mov	r3, fp
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	0159      	lsls	r1, r3, #5
 80039cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d0:	0150      	lsls	r0, r2, #5
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	ebb2 080a 	subs.w	r8, r2, sl
 80039da:	eb63 090b 	sbc.w	r9, r3, fp
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039f2:	ebb2 0408 	subs.w	r4, r2, r8
 80039f6:	eb63 0509 	sbc.w	r5, r3, r9
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	00eb      	lsls	r3, r5, #3
 8003a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a08:	00e2      	lsls	r2, r4, #3
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	eb14 030a 	adds.w	r3, r4, sl
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	eb45 030b 	adc.w	r3, r5, fp
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a26:	4629      	mov	r1, r5
 8003a28:	028b      	lsls	r3, r1, #10
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a30:	4621      	mov	r1, r4
 8003a32:	028a      	lsls	r2, r1, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	60fa      	str	r2, [r7, #12]
 8003a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a44:	f7fd f928 	bl	8000c98 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3740      	adds	r7, #64	@ 0x40
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	00f42400 	.word	0x00f42400
 8003a88:	017d7840 	.word	0x017d7840

08003a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000000 	.word	0x20000000

08003aa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	f107 001c 	add.w	r0, r7, #28
 8003ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ab6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d123      	bne.n	8003b06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f001 fae8 	bl	80050d0 <USB_CoreReset>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e01b      	b.n	8003b3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 fadc 	bl	80050d0 <USB_CoreReset>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b30:	e005      	b.n	8003b3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b3e:	7fbb      	ldrb	r3, [r7, #30]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10b      	bne.n	8003b5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f043 0206 	orr.w	r2, r3, #6
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b68:	b004      	add	sp, #16
 8003b6a:	4770      	bx	lr

08003b6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d165      	bne.n	8003c4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a41      	ldr	r2, [pc, #260]	@ (8003c88 <USB_SetTurnaroundTime+0x11c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d906      	bls.n	8003b96 <USB_SetTurnaroundTime+0x2a>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4a40      	ldr	r2, [pc, #256]	@ (8003c8c <USB_SetTurnaroundTime+0x120>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d202      	bcs.n	8003b96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b90:	230f      	movs	r3, #15
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e062      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4a3c      	ldr	r2, [pc, #240]	@ (8003c8c <USB_SetTurnaroundTime+0x120>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d306      	bcc.n	8003bac <USB_SetTurnaroundTime+0x40>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a3b      	ldr	r2, [pc, #236]	@ (8003c90 <USB_SetTurnaroundTime+0x124>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d202      	bcs.n	8003bac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ba6:	230e      	movs	r3, #14
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e057      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4a38      	ldr	r2, [pc, #224]	@ (8003c90 <USB_SetTurnaroundTime+0x124>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d306      	bcc.n	8003bc2 <USB_SetTurnaroundTime+0x56>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a37      	ldr	r2, [pc, #220]	@ (8003c94 <USB_SetTurnaroundTime+0x128>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d202      	bcs.n	8003bc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bbc:	230d      	movs	r3, #13
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e04c      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	@ (8003c94 <USB_SetTurnaroundTime+0x128>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d306      	bcc.n	8003bd8 <USB_SetTurnaroundTime+0x6c>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4a32      	ldr	r2, [pc, #200]	@ (8003c98 <USB_SetTurnaroundTime+0x12c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d802      	bhi.n	8003bd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e041      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a2f      	ldr	r2, [pc, #188]	@ (8003c98 <USB_SetTurnaroundTime+0x12c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d906      	bls.n	8003bee <USB_SetTurnaroundTime+0x82>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c9c <USB_SetTurnaroundTime+0x130>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d802      	bhi.n	8003bee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003be8:	230b      	movs	r3, #11
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e036      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c9c <USB_SetTurnaroundTime+0x130>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d906      	bls.n	8003c04 <USB_SetTurnaroundTime+0x98>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a29      	ldr	r2, [pc, #164]	@ (8003ca0 <USB_SetTurnaroundTime+0x134>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d802      	bhi.n	8003c04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003bfe:	230a      	movs	r3, #10
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e02b      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <USB_SetTurnaroundTime+0x134>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d906      	bls.n	8003c1a <USB_SetTurnaroundTime+0xae>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <USB_SetTurnaroundTime+0x138>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d202      	bcs.n	8003c1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c14:	2309      	movs	r3, #9
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e020      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4a21      	ldr	r2, [pc, #132]	@ (8003ca4 <USB_SetTurnaroundTime+0x138>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d306      	bcc.n	8003c30 <USB_SetTurnaroundTime+0xc4>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4a20      	ldr	r2, [pc, #128]	@ (8003ca8 <USB_SetTurnaroundTime+0x13c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d802      	bhi.n	8003c30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e015      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <USB_SetTurnaroundTime+0x13c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d906      	bls.n	8003c46 <USB_SetTurnaroundTime+0xda>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cac <USB_SetTurnaroundTime+0x140>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d202      	bcs.n	8003c46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c40:	2307      	movs	r3, #7
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e00a      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c46:	2306      	movs	r3, #6
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e007      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c52:	2309      	movs	r3, #9
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e001      	b.n	8003c5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c58:	2309      	movs	r3, #9
 8003c5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	00d8acbf 	.word	0x00d8acbf
 8003c8c:	00e4e1c0 	.word	0x00e4e1c0
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	01067380 	.word	0x01067380
 8003c98:	011a499f 	.word	0x011a499f
 8003c9c:	01312cff 	.word	0x01312cff
 8003ca0:	014ca43f 	.word	0x014ca43f
 8003ca4:	016e3600 	.word	0x016e3600
 8003ca8:	01a6ab1f 	.word	0x01a6ab1f
 8003cac:	01e84800 	.word	0x01e84800

08003cb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d115      	bne.n	8003d42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d22:	200a      	movs	r0, #10
 8003d24:	f7fd fd50 	bl	80017c8 <HAL_Delay>
      ms += 10U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	330a      	adds	r3, #10
 8003d2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f001 f93f 	bl	8004fb2 <USB_GetMode>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d01e      	beq.n	8003d78 <USB_SetCurrentMode+0x84>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d3e:	d9f0      	bls.n	8003d22 <USB_SetCurrentMode+0x2e>
 8003d40:	e01a      	b.n	8003d78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d54:	200a      	movs	r0, #10
 8003d56:	f7fd fd37 	bl	80017c8 <HAL_Delay>
      ms += 10U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	330a      	adds	r3, #10
 8003d5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 f926 	bl	8004fb2 <USB_GetMode>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <USB_SetCurrentMode+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d70:	d9f0      	bls.n	8003d54 <USB_SetCurrentMode+0x60>
 8003d72:	e001      	b.n	8003d78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e005      	b.n	8003d84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d7c:	d101      	bne.n	8003d82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e009      	b.n	8003dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3340      	adds	r3, #64	@ 0x40
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b0e      	cmp	r3, #14
 8003dc4:	d9f2      	bls.n	8003dac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11c      	bne.n	8003e08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e06:	e00b      	b.n	8003e20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f968 	bl	8004114 <USB_SetDevSpeed>
 8003e44:	e008      	b.n	8003e58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e46:	2101      	movs	r1, #1
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f963 	bl	8004114 <USB_SetDevSpeed>
 8003e4e:	e003      	b.n	8003e58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e50:	2103      	movs	r1, #3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f95e 	bl	8004114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e58:	2110      	movs	r1, #16
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8fa 	bl	8004054 <USB_FlushTxFifo>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f924 	bl	80040b8 <USB_FlushRxFifo>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e80:	461a      	mov	r2, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e043      	b.n	8003f2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eba:	d118      	bne.n	8003eee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e013      	b.n	8003f00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e008      	b.n	8003f00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003efa:	461a      	mov	r2, r3
 8003efc:	2300      	movs	r3, #0
 8003efe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f30:	461a      	mov	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d3b5      	bcc.n	8003ea4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	e043      	b.n	8003fc6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f54:	d118      	bne.n	8003f88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e013      	b.n	8003f9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e008      	b.n	8003f9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003fca:	461a      	mov	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d3b5      	bcc.n	8003f3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f043 0210 	orr.w	r2, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <USB_DevInit+0x2c4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004014:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f043 0208 	orr.w	r2, r3, #8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004028:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800404c:	b004      	add	sp, #16
 800404e:	4770      	bx	lr
 8004050:	803c3800 	.word	0x803c3800

08004054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800406e:	d901      	bls.n	8004074 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e01b      	b.n	80040ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	daf2      	bge.n	8004062 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	019b      	lsls	r3, r3, #6
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004098:	d901      	bls.n	800409e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e006      	b.n	80040ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d0f0      	beq.n	800408c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040d0:	d901      	bls.n	80040d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e018      	b.n	8004108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	daf2      	bge.n	80040c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2210      	movs	r2, #16
 80040e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3301      	adds	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040f4:	d901      	bls.n	80040fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e006      	b.n	8004108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b10      	cmp	r3, #16
 8004104:	d0f0      	beq.n	80040e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0306 	and.w	r3, r3, #6
 800415e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004166:	2300      	movs	r3, #0
 8004168:	75fb      	strb	r3, [r7, #23]
 800416a:	e00a      	b.n	8004182 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d002      	beq.n	8004178 <USB_GetDevSpeed+0x32>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b06      	cmp	r3, #6
 8004176:	d102      	bne.n	800417e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004178:	2302      	movs	r3, #2
 800417a:	75fb      	strb	r3, [r7, #23]
 800417c:	e001      	b.n	8004182 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800417e:	230f      	movs	r3, #15
 8004180:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d13a      	bne.n	8004222 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	2101      	movs	r1, #1
 80041be:	fa01 f303 	lsl.w	r3, r1, r3
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d155      	bne.n	8004290 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	791b      	ldrb	r3, [r3, #4]
 80041fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004200:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	059b      	lsls	r3, r3, #22
 8004206:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004208:	4313      	orrs	r3, r2
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e036      	b.n	8004290 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004240:	4313      	orrs	r3, r2
 8004242:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11a      	bne.n	8004290 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	791b      	ldrb	r3, [r3, #4]
 8004274:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004276:	430b      	orrs	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800428e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d161      	bne.n	8004380 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042d2:	d11f      	bne.n	8004314 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80042f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800430e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004312:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800431a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004334:	4013      	ands	r3, r2
 8004336:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004358:	4013      	ands	r3, r2
 800435a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0159      	lsls	r1, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	440b      	add	r3, r1
 8004372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004376:	4619      	mov	r1, r3
 8004378:	4b35      	ldr	r3, [pc, #212]	@ (8004450 <USB_DeactivateEndpoint+0x1b0>)
 800437a:	4013      	ands	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
 800437e:	e060      	b.n	8004442 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004396:	d11f      	bne.n	80043d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	43db      	mvns	r3, r3
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043f8:	4013      	ands	r3, r2
 80043fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	43db      	mvns	r3, r3
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800441c:	4013      	ands	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	440b      	add	r3, r1
 8004436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443a:	4619      	mov	r1, r3
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <USB_DeactivateEndpoint+0x1b4>)
 800443e:	4013      	ands	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	ec337800 	.word	0xec337800
 8004454:	eff37800 	.word	0xeff37800

08004458 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	2b01      	cmp	r3, #1
 8004476:	f040 817f 	bne.w	8004778 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d132      	bne.n	80044e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	440a      	add	r2, r1
 8004498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800449c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044e0:	0cdb      	lsrs	r3, r3, #19
 80044e2:	04db      	lsls	r3, r3, #19
 80044e4:	6113      	str	r3, [r2, #16]
 80044e6:	e097      	b.n	8004618 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004502:	0cdb      	lsrs	r3, r3, #19
 8004504:	04db      	lsls	r3, r3, #19
 8004506:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004522:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004526:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800452a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11a      	bne.n	8004568 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004560:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004564:	6113      	str	r3, [r2, #16]
 8004566:	e044      	b.n	80045f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4413      	add	r3, r2
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	8afb      	ldrh	r3, [r7, #22]
 800458e:	04d9      	lsls	r1, r3, #19
 8004590:	4ba4      	ldr	r3, [pc, #656]	@ (8004824 <USB_EPStartXfer+0x3cc>)
 8004592:	400b      	ands	r3, r1
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	0148      	lsls	r0, r1, #5
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	4401      	add	r1, r0
 800459c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045a0:	4313      	orrs	r3, r2
 80045a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	791b      	ldrb	r3, [r3, #4]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d122      	bne.n	80045f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80045ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	8afb      	ldrh	r3, [r7, #22]
 80045dc:	075b      	lsls	r3, r3, #29
 80045de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	0148      	lsls	r0, r1, #5
 80045e6:	69f9      	ldr	r1, [r7, #28]
 80045e8:	4401      	add	r1, r0
 80045ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004608:	69b9      	ldr	r1, [r7, #24]
 800460a:	0148      	lsls	r0, r1, #5
 800460c:	69f9      	ldr	r1, [r7, #28]
 800460e:	4401      	add	r1, r0
 8004610:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004614:	4313      	orrs	r3, r2
 8004616:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d14b      	bne.n	80046b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	791b      	ldrb	r3, [r3, #4]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d128      	bne.n	8004694 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d110      	bne.n	8004674 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800466c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e00f      	b.n	8004694 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e166      	b.n	8004984 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80046d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	791b      	ldrb	r3, [r3, #4]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d015      	beq.n	800470a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 814e 	beq.w	8004984 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004704:	4313      	orrs	r3, r2
 8004706:	634b      	str	r3, [r1, #52]	@ 0x34
 8004708:	e13c      	b.n	8004984 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d110      	bne.n	800473c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004734:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00f      	b.n	800475c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	68d9      	ldr	r1, [r3, #12]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	b298      	uxth	r0, r3
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	4603      	mov	r3, r0
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f9b9 	bl	8004ae8 <USB_WritePacket>
 8004776:	e105      	b.n	8004984 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004792:	0cdb      	lsrs	r3, r3, #19
 8004794:	04db      	lsls	r3, r3, #19
 8004796:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d132      	bne.n	8004828 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f0:	69b9      	ldr	r1, [r7, #24]
 80047f2:	0148      	lsls	r0, r1, #5
 80047f4:	69f9      	ldr	r1, [r7, #28]
 80047f6:	4401      	add	r1, r0
 80047f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047fc:	4313      	orrs	r3, r2
 80047fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800481a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800481e:	6113      	str	r3, [r2, #16]
 8004820:	e062      	b.n	80048e8 <USB_EPStartXfer+0x490>
 8004822:	bf00      	nop
 8004824:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d123      	bne.n	8004878 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	0148      	lsls	r0, r1, #5
 800484a:	69f9      	ldr	r1, [r7, #28]
 800484c:	4401      	add	r1, r0
 800484e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004852:	4313      	orrs	r3, r2
 8004854:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004870:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004874:	6113      	str	r3, [r2, #16]
 8004876:	e037      	b.n	80048e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4413      	add	r3, r2
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	8afa      	ldrh	r2, [r7, #22]
 8004894:	fb03 f202 	mul.w	r2, r3, r2
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	8afb      	ldrh	r3, [r7, #22]
 80048ac:	04d9      	lsls	r1, r3, #19
 80048ae:	4b38      	ldr	r3, [pc, #224]	@ (8004990 <USB_EPStartXfer+0x538>)
 80048b0:	400b      	ands	r3, r1
 80048b2:	69b9      	ldr	r1, [r7, #24]
 80048b4:	0148      	lsls	r0, r1, #5
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	4401      	add	r1, r0
 80048ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	0148      	lsls	r0, r1, #5
 80048dc:	69f9      	ldr	r1, [r7, #28]
 80048de:	4401      	add	r1, r0
 80048e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048e4:	4313      	orrs	r3, r2
 80048e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10d      	bne.n	800490a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	68d9      	ldr	r1, [r3, #12]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	460a      	mov	r2, r1
 8004908:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	791b      	ldrb	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d128      	bne.n	8004964 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d110      	bne.n	8004944 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800493c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00f      	b.n	8004964 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800495e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004962:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	440a      	add	r2, r1
 800497a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	1ff80000 	.word	0x1ff80000

08004994 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d14a      	bne.n	8004a48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ca:	f040 8086 	bne.w	8004ada <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d902      	bls.n	8004a2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
          break;
 8004a2a:	e056      	b.n	8004ada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a44:	d0e7      	beq.n	8004a16 <USB_EPStopXfer+0x82>
 8004a46:	e048      	b.n	8004ada <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a60:	d13b      	bne.n	8004ada <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004aa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d902      	bls.n	8004ac0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]
          break;
 8004abe:	e00c      	b.n	8004ada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad8:	d0e7      	beq.n	8004aaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	@ 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	460b      	mov	r3, r1
 8004af8:	71fb      	strb	r3, [r7, #7]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d123      	bne.n	8004b56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b0e:	88bb      	ldrh	r3, [r7, #4]
 8004b10:	3303      	adds	r3, #3
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e018      	b.n	8004b4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	031a      	lsls	r2, r3, #12
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b28:	461a      	mov	r2, r3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	3301      	adds	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3301      	adds	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d3e2      	bcc.n	8004b1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3724      	adds	r7, #36	@ 0x24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b08b      	sub	sp, #44	@ 0x2c
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	e014      	b.n	8004bba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	3301      	adds	r3, #1
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d3e6      	bcc.n	8004b90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004bc2:	8bfb      	ldrh	r3, [r7, #30]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01e      	beq.n	8004c06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f107 0310 	add.w	r3, r7, #16
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	701a      	strb	r2, [r3, #0]
      i++;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004bfa:	8bfb      	ldrh	r3, [r7, #30]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c00:	8bfb      	ldrh	r3, [r7, #30]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ea      	bne.n	8004bdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	372c      	adds	r7, #44	@ 0x2c
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d12c      	bne.n	8004c8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db12      	blt.n	8004c68 <USB_EPSetStall+0x54>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00f      	beq.n	8004c68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e02b      	b.n	8004ce2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db12      	blt.n	8004cc2 <USB_EPSetStall+0xae>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00f      	beq.n	8004cc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ce0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	785b      	ldrb	r3, [r3, #1]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d128      	bne.n	8004d5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	791b      	ldrb	r3, [r3, #4]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d003      	beq.n	8004d3c <USB_EPClearStall+0x4c>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	791b      	ldrb	r3, [r3, #4]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d138      	bne.n	8004dae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e027      	b.n	8004dae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	791b      	ldrb	r3, [r3, #4]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d003      	beq.n	8004d8e <USB_EPClearStall+0x9e>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	791b      	ldrb	r3, [r3, #4]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d10f      	bne.n	8004dae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dda:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004dde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004df0:	68f9      	ldr	r1, [r7, #12]
 8004df2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e36:	f023 0302 	bic.w	r3, r3, #2
 8004e3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e64:	f023 0303 	bic.w	r3, r3, #3
 8004e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	4013      	ands	r3, r2
 8004f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	b29b      	uxth	r3, r3
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f48:	68bb      	ldr	r3, [r7, #8]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	fa22 f303 	lsr.w	r3, r2, r3
 8004f86:	01db      	lsls	r3, r3, #7
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	460b      	mov	r3, r1
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	333c      	adds	r3, #60	@ 0x3c
 800502a:	3304      	adds	r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4a26      	ldr	r2, [pc, #152]	@ (80050cc <USB_EP0_OutStart+0xb8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d90a      	bls.n	800504e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005048:	d101      	bne.n	800504e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e037      	b.n	80050be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005054:	461a      	mov	r2, r3
 8005056:	2300      	movs	r3, #0
 8005058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005068:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800506c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800507c:	f043 0318 	orr.w	r3, r3, #24
 8005080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005090:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005094:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10f      	bne.n	80050bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80050ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	4f54300a 	.word	0x4f54300a

080050d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050e8:	d901      	bls.n	80050ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e01b      	b.n	8005126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	daf2      	bge.n	80050dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f043 0201 	orr.w	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005112:	d901      	bls.n	8005118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d0f0      	beq.n	8005106 <USB_CoreReset+0x36>

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005140:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005144:	f002 fc9e 	bl	8007a84 <USBD_static_malloc>
 8005148:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	32b0      	adds	r2, #176	@ 0xb0
 800515a:	2100      	movs	r1, #0
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005160:	2302      	movs	r3, #2
 8005162:	e0d4      	b.n	800530e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005164:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f003 fc93 	bl	8008a96 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	32b0      	adds	r2, #176	@ 0xb0
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	32b0      	adds	r2, #176	@ 0xb0
 800518a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7c1b      	ldrb	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d138      	bne.n	800520e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800519c:	4b5e      	ldr	r3, [pc, #376]	@ (8005318 <USBD_CDC_Init+0x1e4>)
 800519e:	7819      	ldrb	r1, [r3, #0]
 80051a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051a4:	2202      	movs	r2, #2
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f002 fb49 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005318 <USBD_CDC_Init+0x1e4>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3324      	adds	r3, #36	@ 0x24
 80051c2:	2201      	movs	r2, #1
 80051c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051c6:	4b55      	ldr	r3, [pc, #340]	@ (800531c <USBD_CDC_Init+0x1e8>)
 80051c8:	7819      	ldrb	r1, [r3, #0]
 80051ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051ce:	2202      	movs	r2, #2
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f002 fb34 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051d6:	4b51      	ldr	r3, [pc, #324]	@ (800531c <USBD_CDC_Init+0x1e8>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051ee:	2201      	movs	r2, #1
 80051f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80051f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005320 <USBD_CDC_Init+0x1ec>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3326      	adds	r3, #38	@ 0x26
 8005208:	2210      	movs	r2, #16
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e035      	b.n	800527a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800520e:	4b42      	ldr	r3, [pc, #264]	@ (8005318 <USBD_CDC_Init+0x1e4>)
 8005210:	7819      	ldrb	r1, [r3, #0]
 8005212:	2340      	movs	r3, #64	@ 0x40
 8005214:	2202      	movs	r2, #2
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f002 fb11 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800521c:	4b3e      	ldr	r3, [pc, #248]	@ (8005318 <USBD_CDC_Init+0x1e4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3324      	adds	r3, #36	@ 0x24
 8005232:	2201      	movs	r2, #1
 8005234:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005236:	4b39      	ldr	r3, [pc, #228]	@ (800531c <USBD_CDC_Init+0x1e8>)
 8005238:	7819      	ldrb	r1, [r3, #0]
 800523a:	2340      	movs	r3, #64	@ 0x40
 800523c:	2202      	movs	r2, #2
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f002 fafd 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005244:	4b35      	ldr	r3, [pc, #212]	@ (800531c <USBD_CDC_Init+0x1e8>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800525c:	2201      	movs	r2, #1
 800525e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005260:	4b2f      	ldr	r3, [pc, #188]	@ (8005320 <USBD_CDC_Init+0x1ec>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	f003 020f 	and.w	r2, r3, #15
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3326      	adds	r3, #38	@ 0x26
 8005276:	2210      	movs	r2, #16
 8005278:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <USBD_CDC_Init+0x1ec>)
 800527c:	7819      	ldrb	r1, [r3, #0]
 800527e:	2308      	movs	r3, #8
 8005280:	2203      	movs	r2, #3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f002 fadb 	bl	800783e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005288:	4b25      	ldr	r3, [pc, #148]	@ (8005320 <USBD_CDC_Init+0x1ec>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 020f 	and.w	r2, r3, #15
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3324      	adds	r3, #36	@ 0x24
 800529e:	2201      	movs	r2, #1
 80052a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	33b0      	adds	r3, #176	@ 0xb0
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052d8:	2302      	movs	r3, #2
 80052da:	e018      	b.n	800530e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7c1b      	ldrb	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052e4:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <USBD_CDC_Init+0x1e8>)
 80052e6:	7819      	ldrb	r1, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f002 fb92 	bl	8007a1c <USBD_LL_PrepareReceive>
 80052f8:	e008      	b.n	800530c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052fa:	4b08      	ldr	r3, [pc, #32]	@ (800531c <USBD_CDC_Init+0x1e8>)
 80052fc:	7819      	ldrb	r1, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005304:	2340      	movs	r3, #64	@ 0x40
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f002 fb88 	bl	8007a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000093 	.word	0x20000093
 800531c:	20000094 	.word	0x20000094
 8005320:	20000095 	.word	0x20000095

08005324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005330:	4b3a      	ldr	r3, [pc, #232]	@ (800541c <USBD_CDC_DeInit+0xf8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f002 faa7 	bl	800788a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800533c:	4b37      	ldr	r3, [pc, #220]	@ (800541c <USBD_CDC_DeInit+0xf8>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f003 020f 	and.w	r2, r3, #15
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	3324      	adds	r3, #36	@ 0x24
 8005352:	2200      	movs	r2, #0
 8005354:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005356:	4b32      	ldr	r3, [pc, #200]	@ (8005420 <USBD_CDC_DeInit+0xfc>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f002 fa94 	bl	800788a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005362:	4b2f      	ldr	r3, [pc, #188]	@ (8005420 <USBD_CDC_DeInit+0xfc>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800537a:	2200      	movs	r2, #0
 800537c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800537e:	4b29      	ldr	r3, [pc, #164]	@ (8005424 <USBD_CDC_DeInit+0x100>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f002 fa80 	bl	800788a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800538a:	4b26      	ldr	r3, [pc, #152]	@ (8005424 <USBD_CDC_DeInit+0x100>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 020f 	and.w	r2, r3, #15
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3324      	adds	r3, #36	@ 0x24
 80053a0:	2200      	movs	r2, #0
 80053a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <USBD_CDC_DeInit+0x100>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f003 020f 	and.w	r2, r3, #15
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3326      	adds	r3, #38	@ 0x26
 80053ba:	2200      	movs	r2, #0
 80053bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	32b0      	adds	r2, #176	@ 0xb0
 80053c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01f      	beq.n	8005410 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	33b0      	adds	r3, #176	@ 0xb0
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	32b0      	adds	r2, #176	@ 0xb0
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fb54 	bl	8007aa0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	32b0      	adds	r2, #176	@ 0xb0
 8005402:	2100      	movs	r1, #0
 8005404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000093 	.word	0x20000093
 8005420:	20000094 	.word	0x20000094
 8005424:	20000095 	.word	0x20000095

08005428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32b0      	adds	r2, #176	@ 0xb0
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005454:	2303      	movs	r3, #3
 8005456:	e0bf      	b.n	80055d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005460:	2b00      	cmp	r3, #0
 8005462:	d050      	beq.n	8005506 <USBD_CDC_Setup+0xde>
 8005464:	2b20      	cmp	r3, #32
 8005466:	f040 80af 	bne.w	80055c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	88db      	ldrh	r3, [r3, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d03a      	beq.n	80054e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b25b      	sxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	da1b      	bge.n	80054b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	33b0      	adds	r3, #176	@ 0xb0
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005492:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	88d2      	ldrh	r2, [r2, #6]
 8005498:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	88db      	ldrh	r3, [r3, #6]
 800549e:	2b07      	cmp	r3, #7
 80054a0:	bf28      	it	cs
 80054a2:	2307      	movcs	r3, #7
 80054a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	89fa      	ldrh	r2, [r7, #14]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 fd93 	bl	8006fd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054b2:	e090      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785a      	ldrb	r2, [r3, #1]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	88db      	ldrh	r3, [r3, #6]
 80054c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80054c4:	d803      	bhi.n	80054ce <USBD_CDC_Setup+0xa6>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	88db      	ldrh	r3, [r3, #6]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	e000      	b.n	80054d0 <USBD_CDC_Setup+0xa8>
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80054de:	461a      	mov	r2, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fda5 	bl	8007030 <USBD_CtlPrepareRx>
      break;
 80054e6:	e076      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	33b0      	adds	r3, #176	@ 0xb0
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	7850      	ldrb	r0, [r2, #1]
 80054fe:	2200      	movs	r2, #0
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	4798      	blx	r3
      break;
 8005504:	e067      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b0b      	cmp	r3, #11
 800550c:	d851      	bhi.n	80055b2 <USBD_CDC_Setup+0x18a>
 800550e:	a201      	add	r2, pc, #4	@ (adr r2, 8005514 <USBD_CDC_Setup+0xec>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005545 	.word	0x08005545
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055b3 	.word	0x080055b3
 8005520:	080055b3 	.word	0x080055b3
 8005524:	080055b3 	.word	0x080055b3
 8005528:	080055b3 	.word	0x080055b3
 800552c:	080055b3 	.word	0x080055b3
 8005530:	080055b3 	.word	0x080055b3
 8005534:	080055b3 	.word	0x080055b3
 8005538:	080055b3 	.word	0x080055b3
 800553c:	0800556f 	.word	0x0800556f
 8005540:	08005599 	.word	0x08005599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b03      	cmp	r3, #3
 800554e:	d107      	bne.n	8005560 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005550:	f107 030a 	add.w	r3, r7, #10
 8005554:	2202      	movs	r2, #2
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fd3d 	bl	8006fd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800555e:	e032      	b.n	80055c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fcbb 	bl	8006ede <USBD_CtlError>
            ret = USBD_FAIL;
 8005568:	2303      	movs	r3, #3
 800556a:	75fb      	strb	r3, [r7, #23]
          break;
 800556c:	e02b      	b.n	80055c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b03      	cmp	r3, #3
 8005578:	d107      	bne.n	800558a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800557a:	f107 030d 	add.w	r3, r7, #13
 800557e:	2201      	movs	r2, #1
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fd28 	bl	8006fd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005588:	e01d      	b.n	80055c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fca6 	bl	8006ede <USBD_CtlError>
            ret = USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	75fb      	strb	r3, [r7, #23]
          break;
 8005596:	e016      	b.n	80055c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d00f      	beq.n	80055c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fc99 	bl	8006ede <USBD_CtlError>
            ret = USBD_FAIL;
 80055ac:	2303      	movs	r3, #3
 80055ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055b0:	e008      	b.n	80055c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fc92 	bl	8006ede <USBD_CtlError>
          ret = USBD_FAIL;
 80055ba:	2303      	movs	r3, #3
 80055bc:	75fb      	strb	r3, [r7, #23]
          break;
 80055be:	e002      	b.n	80055c6 <USBD_CDC_Setup+0x19e>
          break;
 80055c0:	bf00      	nop
 80055c2:	e008      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>
          break;
 80055c4:	bf00      	nop
      }
      break;
 80055c6:	e006      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fc87 	bl	8006ede <USBD_CtlError>
      ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80055f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	32b0      	adds	r2, #176	@ 0xb0
 80055fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005606:	2303      	movs	r3, #3
 8005608:	e065      	b.n	80056d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32b0      	adds	r2, #176	@ 0xb0
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	f003 020f 	and.w	r2, r3, #15
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3318      	adds	r3, #24
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3318      	adds	r3, #24
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 010f 	and.w	r1, r3, #15
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	460b      	mov	r3, r1
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4403      	add	r3, r0
 800565c:	331c      	adds	r3, #28
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	fbb2 f1f3 	udiv	r1, r2, r3
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800566a:	2b00      	cmp	r3, #0
 800566c:	d112      	bne.n	8005694 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3318      	adds	r3, #24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005686:	78f9      	ldrb	r1, [r7, #3]
 8005688:	2300      	movs	r3, #0
 800568a:	2200      	movs	r2, #0
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f002 f9a4 	bl	80079da <USBD_LL_Transmit>
 8005692:	e01f      	b.n	80056d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	33b0      	adds	r3, #176	@ 0xb0
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	33b0      	adds	r3, #176	@ 0xb0
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	32b0      	adds	r2, #176	@ 0xb0
 80056f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	32b0      	adds	r2, #176	@ 0xb0
 8005704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	e01a      	b.n	8005746 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f002 f9a2 	bl	8007a5e <USBD_LL_GetRxDataSize>
 800571a:	4602      	mov	r2, r0
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	33b0      	adds	r3, #176	@ 0xb0
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005740:	4611      	mov	r1, r2
 8005742:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	32b0      	adds	r2, #176	@ 0xb0
 8005760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800576c:	2303      	movs	r3, #3
 800576e:	e024      	b.n	80057ba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	33b0      	adds	r3, #176	@ 0xb0
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d019      	beq.n	80057b8 <USBD_CDC_EP0_RxReady+0x6a>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800578a:	2bff      	cmp	r3, #255	@ 0xff
 800578c:	d014      	beq.n	80057b8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	33b0      	adds	r3, #176	@ 0xb0
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80057a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057cc:	2182      	movs	r1, #130	@ 0x82
 80057ce:	4818      	ldr	r0, [pc, #96]	@ (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057d0:	f000 fd4f 	bl	8006272 <USBD_GetEpDesc>
 80057d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057d6:	2101      	movs	r1, #1
 80057d8:	4815      	ldr	r0, [pc, #84]	@ (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057da:	f000 fd4a 	bl	8006272 <USBD_GetEpDesc>
 80057de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057e0:	2181      	movs	r1, #129	@ 0x81
 80057e2:	4813      	ldr	r0, [pc, #76]	@ (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057e4:	f000 fd45 	bl	8006272 <USBD_GetEpDesc>
 80057e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2210      	movs	r2, #16
 80057f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2200      	movs	r2, #0
 8005800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005804:	711a      	strb	r2, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d006      	beq.n	800581e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005818:	711a      	strb	r2, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2243      	movs	r2, #67	@ 0x43
 8005822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005824:	4b02      	ldr	r3, [pc, #8]	@ (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000050 	.word	0x20000050

08005834 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800583c:	2182      	movs	r1, #130	@ 0x82
 800583e:	4818      	ldr	r0, [pc, #96]	@ (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005840:	f000 fd17 	bl	8006272 <USBD_GetEpDesc>
 8005844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005846:	2101      	movs	r1, #1
 8005848:	4815      	ldr	r0, [pc, #84]	@ (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800584a:	f000 fd12 	bl	8006272 <USBD_GetEpDesc>
 800584e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005850:	2181      	movs	r1, #129	@ 0x81
 8005852:	4813      	ldr	r0, [pc, #76]	@ (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005854:	f000 fd0d 	bl	8006272 <USBD_GetEpDesc>
 8005858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2210      	movs	r2, #16
 8005864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2200      	movs	r2, #0
 8005870:	711a      	strb	r2, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f042 0202 	orr.w	r2, r2, #2
 8005878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	711a      	strb	r2, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f042 0202 	orr.w	r2, r2, #2
 800588c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2243      	movs	r2, #67	@ 0x43
 8005892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005894:	4b02      	ldr	r3, [pc, #8]	@ (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000050 	.word	0x20000050

080058a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058ac:	2182      	movs	r1, #130	@ 0x82
 80058ae:	4818      	ldr	r0, [pc, #96]	@ (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058b0:	f000 fcdf 	bl	8006272 <USBD_GetEpDesc>
 80058b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058b6:	2101      	movs	r1, #1
 80058b8:	4815      	ldr	r0, [pc, #84]	@ (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058ba:	f000 fcda 	bl	8006272 <USBD_GetEpDesc>
 80058be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058c0:	2181      	movs	r1, #129	@ 0x81
 80058c2:	4813      	ldr	r0, [pc, #76]	@ (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058c4:	f000 fcd5 	bl	8006272 <USBD_GetEpDesc>
 80058c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2210      	movs	r2, #16
 80058d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2200      	movs	r2, #0
 80058e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058e4:	711a      	strb	r2, [r3, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d006      	beq.n	80058fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058f8:	711a      	strb	r2, [r3, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2243      	movs	r2, #67	@ 0x43
 8005902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005904:	4b02      	ldr	r3, [pc, #8]	@ (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000050 	.word	0x20000050

08005914 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	220a      	movs	r2, #10
 8005920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005922:	4b03      	ldr	r3, [pc, #12]	@ (8005930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	2000000c 	.word	0x2000000c

08005934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	e009      	b.n	800595c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	33b0      	adds	r3, #176	@ 0xb0
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	32b0      	adds	r2, #176	@ 0xb0
 800597e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005982:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800598a:	2303      	movs	r3, #3
 800598c:	e008      	b.n	80059a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	32b0      	adds	r2, #176	@ 0xb0
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e004      	b.n	80059da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32b0      	adds	r2, #176	@ 0xb0
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e025      	b.n	8005a5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11f      	bne.n	8005a58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a20:	4b10      	ldr	r3, [pc, #64]	@ (8005a64 <USBD_CDC_TransmitPacket+0x7c>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4403      	add	r3, r0
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a3e:	4b09      	ldr	r3, [pc, #36]	@ (8005a64 <USBD_CDC_TransmitPacket+0x7c>)
 8005a40:	7819      	ldrb	r1, [r3, #0]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 ffc3 	bl	80079da <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000093 	.word	0x20000093

08005a68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	32b0      	adds	r2, #176	@ 0xb0
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	32b0      	adds	r2, #176	@ 0xb0
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e018      	b.n	8005ac8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7c1b      	ldrb	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad0 <USBD_CDC_ReceivePacket+0x68>)
 8005aa0:	7819      	ldrb	r1, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 ffb5 	bl	8007a1c <USBD_LL_PrepareReceive>
 8005ab2:	e008      	b.n	8005ac6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <USBD_CDC_ReceivePacket+0x68>)
 8005ab6:	7819      	ldrb	r1, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005abe:	2340      	movs	r3, #64	@ 0x40
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 ffab 	bl	8007a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000094 	.word	0x20000094

08005ad4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e01f      	b.n	8005b2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	79fa      	ldrb	r2, [r7, #7]
 8005b1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f001 fe25 	bl	8007770 <USBD_LL_Init>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e025      	b.n	8005b98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	32ae      	adds	r2, #174	@ 0xae
 8005b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00f      	beq.n	8005b88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	32ae      	adds	r2, #174	@ 0xae
 8005b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	f107 020e 	add.w	r2, r7, #14
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 fe2d 	bl	8007808 <USBD_LL_Start>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	4798      	blx	r3
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	4611      	mov	r1, r2
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 f90c 	bl	8006e6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005c60:	461a      	mov	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d01a      	beq.n	8005cac <USBD_LL_SetupStage+0x72>
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d822      	bhi.n	8005cc0 <USBD_LL_SetupStage+0x86>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <USBD_LL_SetupStage+0x4a>
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d00a      	beq.n	8005c98 <USBD_LL_SetupStage+0x5e>
 8005c82:	e01d      	b.n	8005cc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fb63 	bl	8006358 <USBD_StdDevReq>
 8005c92:	4603      	mov	r3, r0
 8005c94:	73fb      	strb	r3, [r7, #15]
      break;
 8005c96:	e020      	b.n	8005cda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fbcb 	bl	800643c <USBD_StdItfReq>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8005caa:	e016      	b.n	8005cda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc2d 	bl	8006514 <USBD_StdEPReq>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbe:	e00c      	b.n	8005cda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fdfa 	bl	80078c8 <USBD_LL_StallEP>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd8:	bf00      	nop
  }

  return ret;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	460b      	mov	r3, r1
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d16e      	bne.n	8005dda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005d02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	f040 8098 	bne.w	8005e40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d913      	bls.n	8005d44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	1ad2      	subs	r2, r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	4293      	cmp	r3, r2
 8005d34:	bf28      	it	cs
 8005d36:	4613      	movcs	r3, r2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 f994 	bl	800706a <USBD_CtlContinueRx>
 8005d42:	e07d      	b.n	8005e40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d014      	beq.n	8005d7c <USBD_LL_DataOutStage+0x98>
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d81d      	bhi.n	8005d92 <USBD_LL_DataOutStage+0xae>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <USBD_LL_DataOutStage+0x7c>
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d003      	beq.n	8005d66 <USBD_LL_DataOutStage+0x82>
 8005d5e:	e018      	b.n	8005d92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	75bb      	strb	r3, [r7, #22]
            break;
 8005d64:	e018      	b.n	8005d98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fa64 	bl	800623e <USBD_CoreFindIF>
 8005d76:	4603      	mov	r3, r0
 8005d78:	75bb      	strb	r3, [r7, #22]
            break;
 8005d7a:	e00d      	b.n	8005d98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa66 	bl	8006258 <USBD_CoreFindEP>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005d90:	e002      	b.n	8005d98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75bb      	strb	r3, [r7, #22]
            break;
 8005d96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d119      	bne.n	8005dd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d113      	bne.n	8005dd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005daa:	7dba      	ldrb	r2, [r7, #22]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	32ae      	adds	r2, #174	@ 0xae
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005dba:	7dba      	ldrb	r2, [r7, #22]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005dc2:	7dba      	ldrb	r2, [r7, #22]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	32ae      	adds	r2, #174	@ 0xae
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f001 f95a 	bl	800708c <USBD_CtlSendStatus>
 8005dd8:	e032      	b.n	8005e40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4619      	mov	r1, r3
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa37 	bl	8006258 <USBD_CoreFindEP>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dee:	7dbb      	ldrb	r3, [r7, #22]
 8005df0:	2bff      	cmp	r3, #255	@ 0xff
 8005df2:	d025      	beq.n	8005e40 <USBD_LL_DataOutStage+0x15c>
 8005df4:	7dbb      	ldrb	r3, [r7, #22]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d122      	bne.n	8005e40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d117      	bne.n	8005e36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e06:	7dba      	ldrb	r2, [r7, #22]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	32ae      	adds	r2, #174	@ 0xae
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00f      	beq.n	8005e36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e16:	7dba      	ldrb	r2, [r7, #22]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e1e:	7dba      	ldrb	r2, [r7, #22]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	32ae      	adds	r2, #174	@ 0xae
 8005e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	7afa      	ldrb	r2, [r7, #11]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	4798      	blx	r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	e000      	b.n	8005e42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	460b      	mov	r3, r1
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d16f      	bne.n	8005f3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3314      	adds	r3, #20
 8005e62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d15a      	bne.n	8005f24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d914      	bls.n	8005ea4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f001 f8bc 	bl	800700e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e96:	2300      	movs	r3, #0
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f001 fdbd 	bl	8007a1c <USBD_LL_PrepareReceive>
 8005ea2:	e03f      	b.n	8005f24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d11c      	bne.n	8005eea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d316      	bcc.n	8005eea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d20f      	bcs.n	8005eea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2100      	movs	r1, #0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f001 f89d 	bl	800700e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005edc:	2300      	movs	r3, #0
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f001 fd9a 	bl	8007a1c <USBD_LL_PrepareReceive>
 8005ee8:	e01c      	b.n	8005f24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d10f      	bne.n	8005f16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f16:	2180      	movs	r1, #128	@ 0x80
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f001 fcd5 	bl	80078c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f001 f8c7 	bl	80070b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03a      	beq.n	8005fa4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff fe42 	bl	8005bb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f3c:	e032      	b.n	8005fa4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4619      	mov	r1, r3
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f985 	bl	8006258 <USBD_CoreFindEP>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	2bff      	cmp	r3, #255	@ 0xff
 8005f56:	d025      	beq.n	8005fa4 <USBD_LL_DataInStage+0x15a>
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d122      	bne.n	8005fa4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d11c      	bne.n	8005fa4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f6a:	7dfa      	ldrb	r2, [r7, #23]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	32ae      	adds	r2, #174	@ 0xae
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d014      	beq.n	8005fa4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f7a:	7dfa      	ldrb	r2, [r7, #23]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f82:	7dfa      	ldrb	r2, [r7, #23]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	32ae      	adds	r2, #174	@ 0xae
 8005f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	7afa      	ldrb	r2, [r7, #11]
 8005f90:	4611      	mov	r1, r2
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	4798      	blx	r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f9a:	7dbb      	ldrb	r3, [r7, #22]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005fa0:	7dbb      	ldrb	r3, [r7, #22]
 8005fa2:	e000      	b.n	8005fa6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d014      	beq.n	8006014 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6852      	ldr	r2, [r2, #4]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	4611      	mov	r1, r2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006014:	2340      	movs	r3, #64	@ 0x40
 8006016:	2200      	movs	r2, #0
 8006018:	2100      	movs	r1, #0
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 fc0f 	bl	800783e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2240      	movs	r2, #64	@ 0x40
 800602c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006030:	2340      	movs	r3, #64	@ 0x40
 8006032:	2200      	movs	r2, #0
 8006034:	2180      	movs	r1, #128	@ 0x80
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fc01 	bl	800783e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2240      	movs	r2, #64	@ 0x40
 8006046:	621a      	str	r2, [r3, #32]

  return ret;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b04      	cmp	r3, #4
 8006084:	d006      	beq.n	8006094 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800608c:	b2da      	uxtb	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2204      	movs	r2, #4
 8006098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d106      	bne.n	80060cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d110      	bne.n	8006110 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	32ae      	adds	r2, #174	@ 0xae
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006138:	2303      	movs	r3, #3
 800613a:	e01c      	b.n	8006176 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d115      	bne.n	8006174 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32ae      	adds	r2, #174	@ 0xae
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32ae      	adds	r2, #174	@ 0xae
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4611      	mov	r1, r2
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	32ae      	adds	r2, #174	@ 0xae
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e01c      	b.n	80061da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d115      	bne.n	80061d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32ae      	adds	r2, #174	@ 0xae
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32ae      	adds	r2, #174	@ 0xae
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	4611      	mov	r1, r2
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6852      	ldr	r2, [r2, #4]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800624a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006264:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	885b      	ldrh	r3, [r3, #2]
 800628e:	b29b      	uxth	r3, r3
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	4293      	cmp	r3, r2
 8006296:	d91f      	bls.n	80062d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800629e:	e013      	b.n	80062c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062a0:	f107 030a 	add.w	r3, r7, #10
 80062a4:	4619      	mov	r1, r3
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f000 f81b 	bl	80062e2 <USBD_GetNextDesc>
 80062ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b05      	cmp	r3, #5
 80062b4:	d108      	bne.n	80062c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	789b      	ldrb	r3, [r3, #2]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d008      	beq.n	80062d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	885b      	ldrh	r3, [r3, #2]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	897b      	ldrh	r3, [r7, #10]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d8e5      	bhi.n	80062a0 <USBD_GetEpDesc+0x2e>
 80062d4:	e000      	b.n	80062d8 <USBD_GetEpDesc+0x66>
          break;
 80062d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80062d8:	693b      	ldr	r3, [r7, #16]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	4413      	add	r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800630c:	68fb      	ldr	r3, [r7, #12]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800631a:	b480      	push	{r7}
 800631c:	b087      	sub	sp, #28
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	3301      	adds	r3, #1
 8006330:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006338:	8a3b      	ldrh	r3, [r7, #16]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	b21a      	sxth	r2, r3
 800633e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006342:	4313      	orrs	r3, r2
 8006344:	b21b      	sxth	r3, r3
 8006346:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006348:	89fb      	ldrh	r3, [r7, #14]
}
 800634a:	4618      	mov	r0, r3
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d005      	beq.n	800637e <USBD_StdDevReq+0x26>
 8006372:	2b40      	cmp	r3, #64	@ 0x40
 8006374:	d857      	bhi.n	8006426 <USBD_StdDevReq+0xce>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00f      	beq.n	800639a <USBD_StdDevReq+0x42>
 800637a:	2b20      	cmp	r3, #32
 800637c:	d153      	bne.n	8006426 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	32ae      	adds	r2, #174	@ 0xae
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e04a      	b.n	8006430 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b09      	cmp	r3, #9
 80063a0:	d83b      	bhi.n	800641a <USBD_StdDevReq+0xc2>
 80063a2:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <USBD_StdDevReq+0x50>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063fd 	.word	0x080063fd
 80063ac:	08006411 	.word	0x08006411
 80063b0:	0800641b 	.word	0x0800641b
 80063b4:	08006407 	.word	0x08006407
 80063b8:	0800641b 	.word	0x0800641b
 80063bc:	080063db 	.word	0x080063db
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	0800641b 	.word	0x0800641b
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	080063e5 	.word	0x080063e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa3c 	bl	8006850 <USBD_GetDescriptor>
          break;
 80063d8:	e024      	b.n	8006424 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fba1 	bl	8006b24 <USBD_SetAddress>
          break;
 80063e2:	e01f      	b.n	8006424 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fbe0 	bl	8006bac <USBD_SetConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]
          break;
 80063f0:	e018      	b.n	8006424 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fc83 	bl	8006d00 <USBD_GetConfig>
          break;
 80063fa:	e013      	b.n	8006424 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fcb4 	bl	8006d6c <USBD_GetStatus>
          break;
 8006404:	e00e      	b.n	8006424 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fce3 	bl	8006dd4 <USBD_SetFeature>
          break;
 800640e:	e009      	b.n	8006424 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fd07 	bl	8006e26 <USBD_ClrFeature>
          break;
 8006418:	e004      	b.n	8006424 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fd5e 	bl	8006ede <USBD_CtlError>
          break;
 8006422:	bf00      	nop
      }
      break;
 8006424:	e004      	b.n	8006430 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fd58 	bl	8006ede <USBD_CtlError>
      break;
 800642e:	bf00      	nop
  }

  return ret;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop

0800643c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006452:	2b40      	cmp	r3, #64	@ 0x40
 8006454:	d005      	beq.n	8006462 <USBD_StdItfReq+0x26>
 8006456:	2b40      	cmp	r3, #64	@ 0x40
 8006458:	d852      	bhi.n	8006500 <USBD_StdItfReq+0xc4>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <USBD_StdItfReq+0x26>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d14e      	bne.n	8006500 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006468:	b2db      	uxtb	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	2b02      	cmp	r3, #2
 800646e:	d840      	bhi.n	80064f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	889b      	ldrh	r3, [r3, #4]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	d836      	bhi.n	80064e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	889b      	ldrh	r3, [r3, #4]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fedb 	bl	800623e <USBD_CoreFindIF>
 8006488:	4603      	mov	r3, r0
 800648a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2bff      	cmp	r3, #255	@ 0xff
 8006490:	d01d      	beq.n	80064ce <USBD_StdItfReq+0x92>
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11a      	bne.n	80064ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006498:	7bba      	ldrb	r2, [r7, #14]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	32ae      	adds	r2, #174	@ 0xae
 800649e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00f      	beq.n	80064c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80064a8:	7bba      	ldrb	r2, [r7, #14]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064b0:	7bba      	ldrb	r2, [r7, #14]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	32ae      	adds	r2, #174	@ 0xae
 80064b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064c6:	e004      	b.n	80064d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064cc:	e001      	b.n	80064d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	88db      	ldrh	r3, [r3, #6]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d110      	bne.n	80064fc <USBD_StdItfReq+0xc0>
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10d      	bne.n	80064fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fdd3 	bl	800708c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064e6:	e009      	b.n	80064fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fcf7 	bl	8006ede <USBD_CtlError>
          break;
 80064f0:	e004      	b.n	80064fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fcf2 	bl	8006ede <USBD_CtlError>
          break;
 80064fa:	e000      	b.n	80064fe <USBD_StdItfReq+0xc2>
          break;
 80064fc:	bf00      	nop
      }
      break;
 80064fe:	e004      	b.n	800650a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fceb 	bl	8006ede <USBD_CtlError>
      break;
 8006508:	bf00      	nop
  }

  return ret;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	889b      	ldrh	r3, [r3, #4]
 8006526:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006530:	2b40      	cmp	r3, #64	@ 0x40
 8006532:	d007      	beq.n	8006544 <USBD_StdEPReq+0x30>
 8006534:	2b40      	cmp	r3, #64	@ 0x40
 8006536:	f200 817f 	bhi.w	8006838 <USBD_StdEPReq+0x324>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d02a      	beq.n	8006594 <USBD_StdEPReq+0x80>
 800653e:	2b20      	cmp	r3, #32
 8006540:	f040 817a 	bne.w	8006838 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe85 	bl	8006258 <USBD_CoreFindEP>
 800654e:	4603      	mov	r3, r0
 8006550:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006552:	7b7b      	ldrb	r3, [r7, #13]
 8006554:	2bff      	cmp	r3, #255	@ 0xff
 8006556:	f000 8174 	beq.w	8006842 <USBD_StdEPReq+0x32e>
 800655a:	7b7b      	ldrb	r3, [r7, #13]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 8170 	bne.w	8006842 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006562:	7b7a      	ldrb	r2, [r7, #13]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800656a:	7b7a      	ldrb	r2, [r7, #13]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	32ae      	adds	r2, #174	@ 0xae
 8006570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8163 	beq.w	8006842 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800657c:	7b7a      	ldrb	r2, [r7, #13]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	32ae      	adds	r2, #174	@ 0xae
 8006582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006592:	e156      	b.n	8006842 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d008      	beq.n	80065ae <USBD_StdEPReq+0x9a>
 800659c:	2b03      	cmp	r3, #3
 800659e:	f300 8145 	bgt.w	800682c <USBD_StdEPReq+0x318>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 809b 	beq.w	80066de <USBD_StdEPReq+0x1ca>
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d03c      	beq.n	8006626 <USBD_StdEPReq+0x112>
 80065ac:	e13e      	b.n	800682c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d002      	beq.n	80065c0 <USBD_StdEPReq+0xac>
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d016      	beq.n	80065ec <USBD_StdEPReq+0xd8>
 80065be:	e02c      	b.n	800661a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <USBD_StdEPReq+0xce>
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b80      	cmp	r3, #128	@ 0x80
 80065ca:	d00a      	beq.n	80065e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f979 	bl	80078c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065d6:	2180      	movs	r1, #128	@ 0x80
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f975 	bl	80078c8 <USBD_LL_StallEP>
 80065de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e0:	e020      	b.n	8006624 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc7a 	bl	8006ede <USBD_CtlError>
              break;
 80065ea:	e01b      	b.n	8006624 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	885b      	ldrh	r3, [r3, #2]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10e      	bne.n	8006612 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <USBD_StdEPReq+0xfe>
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b80      	cmp	r3, #128	@ 0x80
 80065fe:	d008      	beq.n	8006612 <USBD_StdEPReq+0xfe>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	88db      	ldrh	r3, [r3, #6]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f95b 	bl	80078c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fd3a 	bl	800708c <USBD_CtlSendStatus>

              break;
 8006618:	e004      	b.n	8006624 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fc5e 	bl	8006ede <USBD_CtlError>
              break;
 8006622:	bf00      	nop
          }
          break;
 8006624:	e107      	b.n	8006836 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d002      	beq.n	8006638 <USBD_StdEPReq+0x124>
 8006632:	2b03      	cmp	r3, #3
 8006634:	d016      	beq.n	8006664 <USBD_StdEPReq+0x150>
 8006636:	e04b      	b.n	80066d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <USBD_StdEPReq+0x146>
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b80      	cmp	r3, #128	@ 0x80
 8006642:	d00a      	beq.n	800665a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f93d 	bl	80078c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800664e:	2180      	movs	r1, #128	@ 0x80
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f939 	bl	80078c8 <USBD_LL_StallEP>
 8006656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006658:	e040      	b.n	80066dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc3e 	bl	8006ede <USBD_CtlError>
              break;
 8006662:	e03b      	b.n	80066dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d136      	bne.n	80066da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 f943 	bl	8007906 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fd03 	bl	800708c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fde4 	bl	8006258 <USBD_CoreFindEP>
 8006690:	4603      	mov	r3, r0
 8006692:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006694:	7b7b      	ldrb	r3, [r7, #13]
 8006696:	2bff      	cmp	r3, #255	@ 0xff
 8006698:	d01f      	beq.n	80066da <USBD_StdEPReq+0x1c6>
 800669a:	7b7b      	ldrb	r3, [r7, #13]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d11c      	bne.n	80066da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066a0:	7b7a      	ldrb	r2, [r7, #13]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80066a8:	7b7a      	ldrb	r2, [r7, #13]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	32ae      	adds	r2, #174	@ 0xae
 80066ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d010      	beq.n	80066da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066b8:	7b7a      	ldrb	r2, [r7, #13]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	32ae      	adds	r2, #174	@ 0xae
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066ce:	e004      	b.n	80066da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fc03 	bl	8006ede <USBD_CtlError>
              break;
 80066d8:	e000      	b.n	80066dc <USBD_StdEPReq+0x1c8>
              break;
 80066da:	bf00      	nop
          }
          break;
 80066dc:	e0ab      	b.n	8006836 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d002      	beq.n	80066f0 <USBD_StdEPReq+0x1dc>
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d032      	beq.n	8006754 <USBD_StdEPReq+0x240>
 80066ee:	e097      	b.n	8006820 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <USBD_StdEPReq+0x1f2>
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b80      	cmp	r3, #128	@ 0x80
 80066fa:	d004      	beq.n	8006706 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fbed 	bl	8006ede <USBD_CtlError>
                break;
 8006704:	e091      	b.n	800682a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da0b      	bge.n	8006726 <USBD_StdEPReq+0x212>
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	3310      	adds	r3, #16
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	3304      	adds	r3, #4
 8006724:	e00b      	b.n	800673e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	3304      	adds	r3, #4
 800673e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2202      	movs	r2, #2
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fc43 	bl	8006fd8 <USBD_CtlSendData>
              break;
 8006752:	e06a      	b.n	800682a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006758:	2b00      	cmp	r3, #0
 800675a:	da11      	bge.n	8006780 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3324      	adds	r3, #36	@ 0x24
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d117      	bne.n	80067a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fbb0 	bl	8006ede <USBD_CtlError>
                  break;
 800677e:	e054      	b.n	800682a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fb9d 	bl	8006ede <USBD_CtlError>
                  break;
 80067a4:	e041      	b.n	800682a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da0b      	bge.n	80067c6 <USBD_StdEPReq+0x2b2>
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	3310      	adds	r3, #16
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	3304      	adds	r3, #4
 80067c4:	e00b      	b.n	80067de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4413      	add	r3, r2
 80067dc:	3304      	adds	r3, #4
 80067de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <USBD_StdEPReq+0x2d8>
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	2b80      	cmp	r3, #128	@ 0x80
 80067ea:	d103      	bne.n	80067f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e00e      	b.n	8006812 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f8a3 	bl	8007944 <USBD_LL_IsStallEP>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e002      	b.n	8006812 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2202      	movs	r2, #2
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fbdd 	bl	8006fd8 <USBD_CtlSendData>
              break;
 800681e:	e004      	b.n	800682a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb5b 	bl	8006ede <USBD_CtlError>
              break;
 8006828:	bf00      	nop
          }
          break;
 800682a:	e004      	b.n	8006836 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb55 	bl	8006ede <USBD_CtlError>
          break;
 8006834:	bf00      	nop
      }
      break;
 8006836:	e005      	b.n	8006844 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb4f 	bl	8006ede <USBD_CtlError>
      break;
 8006840:	e000      	b.n	8006844 <USBD_StdEPReq+0x330>
      break;
 8006842:	bf00      	nop
  }

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	2b06      	cmp	r3, #6
 8006872:	f200 8128 	bhi.w	8006ac6 <USBD_GetDescriptor+0x276>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <USBD_GetDescriptor+0x2c>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006899 	.word	0x08006899
 8006880:	080068b1 	.word	0x080068b1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	08006ac7 	.word	0x08006ac7
 800688c:	08006ac7 	.word	0x08006ac7
 8006890:	08006a67 	.word	0x08006a67
 8006894:	08006a93 	.word	0x08006a93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7c12      	ldrb	r2, [r2, #16]
 80068a4:	f107 0108 	add.w	r1, r7, #8
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
 80068ac:	60f8      	str	r0, [r7, #12]
      break;
 80068ae:	e112      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	7c1b      	ldrb	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068d2:	e100      	b.n	8006ad6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	f107 0208 	add.w	r2, r7, #8
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
      break;
 80068ee:	e0f2      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	885b      	ldrh	r3, [r3, #2]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b05      	cmp	r3, #5
 80068f8:	f200 80ac 	bhi.w	8006a54 <USBD_GetDescriptor+0x204>
 80068fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <USBD_GetDescriptor+0xb4>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	0800691d 	.word	0x0800691d
 8006908:	08006951 	.word	0x08006951
 800690c:	08006985 	.word	0x08006985
 8006910:	080069b9 	.word	0x080069b9
 8006914:	080069ed 	.word	0x080069ed
 8006918:	08006a21 	.word	0x08006a21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7c12      	ldrb	r2, [r2, #16]
 8006934:	f107 0108 	add.w	r1, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800693e:	e091      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 facb 	bl	8006ede <USBD_CtlError>
            err++;
 8006948:	7afb      	ldrb	r3, [r7, #11]
 800694a:	3301      	adds	r3, #1
 800694c:	72fb      	strb	r3, [r7, #11]
          break;
 800694e:	e089      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	f107 0108 	add.w	r1, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006972:	e077      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fab1 	bl	8006ede <USBD_CtlError>
            err++;
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	3301      	adds	r3, #1
 8006980:	72fb      	strb	r3, [r7, #11]
          break;
 8006982:	e06f      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	7c12      	ldrb	r2, [r2, #16]
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a6:	e05d      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa97 	bl	8006ede <USBD_CtlError>
            err++;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	3301      	adds	r3, #1
 80069b4:	72fb      	strb	r3, [r7, #11]
          break;
 80069b6:	e055      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00b      	beq.n	80069dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	7c12      	ldrb	r2, [r2, #16]
 80069d0:	f107 0108 	add.w	r1, r7, #8
 80069d4:	4610      	mov	r0, r2
 80069d6:	4798      	blx	r3
 80069d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069da:	e043      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa7d 	bl	8006ede <USBD_CtlError>
            err++;
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	3301      	adds	r3, #1
 80069e8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ea:	e03b      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00b      	beq.n	8006a10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	7c12      	ldrb	r2, [r2, #16]
 8006a04:	f107 0108 	add.w	r1, r7, #8
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4798      	blx	r3
 8006a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a0e:	e029      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa63 	bl	8006ede <USBD_CtlError>
            err++;
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a1e:	e021      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	7c12      	ldrb	r2, [r2, #16]
 8006a38:	f107 0108 	add.w	r1, r7, #8
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a42:	e00f      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa49 	bl	8006ede <USBD_CtlError>
            err++;
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	72fb      	strb	r3, [r7, #11]
          break;
 8006a52:	e007      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa41 	bl	8006ede <USBD_CtlError>
          err++;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a62:	bf00      	nop
      }
      break;
 8006a64:	e037      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7c1b      	ldrb	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a76:	f107 0208 	add.w	r2, r7, #8
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4798      	blx	r3
 8006a7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a80:	e029      	b.n	8006ad6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa2a 	bl	8006ede <USBD_CtlError>
        err++;
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a90:	e021      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7c1b      	ldrb	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	f107 0208 	add.w	r2, r7, #8
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4798      	blx	r3
 8006aaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ab4:	e00f      	b.n	8006ad6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fa10 	bl	8006ede <USBD_CtlError>
        err++;
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ac4:	e007      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa08 	bl	8006ede <USBD_CtlError>
      err++;
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad4:	bf00      	nop
  }

  if (err != 0U)
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11e      	bne.n	8006b1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d016      	beq.n	8006b12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88da      	ldrh	r2, [r3, #6]
 8006aee:	893b      	ldrh	r3, [r7, #8]
 8006af0:	4293      	cmp	r3, r2
 8006af2:	bf28      	it	cs
 8006af4:	4613      	movcs	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006afa:	893b      	ldrh	r3, [r7, #8]
 8006afc:	461a      	mov	r2, r3
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa69 	bl	8006fd8 <USBD_CtlSendData>
 8006b06:	e009      	b.n	8006b1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9e7 	bl	8006ede <USBD_CtlError>
 8006b10:	e004      	b.n	8006b1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 faba 	bl	800708c <USBD_CtlSendStatus>
 8006b18:	e000      	b.n	8006b1c <USBD_GetDescriptor+0x2cc>
    return;
 8006b1a:	bf00      	nop
  }
}
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop

08006b24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	889b      	ldrh	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d131      	bne.n	8006b9a <USBD_SetAddress+0x76>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	88db      	ldrh	r3, [r3, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d12d      	bne.n	8006b9a <USBD_SetAddress+0x76>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b44:	d829      	bhi.n	8006b9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d104      	bne.n	8006b68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f9bc 	bl	8006ede <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b66:	e01d      	b.n	8006ba4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7bfa      	ldrb	r2, [r7, #15]
 8006b6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 ff11 	bl	800799c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa86 	bl	800708c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8e:	e009      	b.n	8006ba4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b98:	e004      	b.n	8006ba4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f99e 	bl	8006ede <USBD_CtlError>
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006bc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d905      	bls.n	8006bd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f985 	bl	8006ede <USBD_CtlError>
    return USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e08c      	b.n	8006cf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d002      	beq.n	8006bea <USBD_SetConfig+0x3e>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d029      	beq.n	8006c3c <USBD_SetConfig+0x90>
 8006be8:	e075      	b.n	8006cd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bea:	4b44      	ldr	r3, [pc, #272]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d020      	beq.n	8006c34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006bf2:	4b42      	ldr	r3, [pc, #264]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fe ffe3 	bl	8005bce <USBD_SetClassConfig>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d008      	beq.n	8006c24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f962 	bl	8006ede <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c22:	e065      	b.n	8006cf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa31 	bl	800708c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c32:	e05d      	b.n	8006cf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa29 	bl	800708c <USBD_CtlSendStatus>
      break;
 8006c3a:	e059      	b.n	8006cf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d112      	bne.n	8006c6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c56:	4b29      	ldr	r3, [pc, #164]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fe ffd2 	bl	8005c06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa12 	bl	800708c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c68:	e042      	b.n	8006cf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c6a:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d02a      	beq.n	8006cce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fe ffc0 	bl	8005c06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c86:	4b1d      	ldr	r3, [pc, #116]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c90:	4b1a      	ldr	r3, [pc, #104]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fe ff99 	bl	8005bce <USBD_SetClassConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00f      	beq.n	8006cc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f918 	bl	8006ede <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fe ffa5 	bl	8005c06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cc4:	e014      	b.n	8006cf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9e0 	bl	800708c <USBD_CtlSendStatus>
      break;
 8006ccc:	e010      	b.n	8006cf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9dc 	bl	800708c <USBD_CtlSendStatus>
      break;
 8006cd4:	e00c      	b.n	8006cf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f900 	bl	8006ede <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cde:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <USBD_SetConfig+0x150>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fe ff8e 	bl	8005c06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cea:	2303      	movs	r3, #3
 8006cec:	73fb      	strb	r3, [r7, #15]
      break;
 8006cee:	bf00      	nop
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000308 	.word	0x20000308

08006d00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	88db      	ldrh	r3, [r3, #6]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d004      	beq.n	8006d1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8e2 	bl	8006ede <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d1a:	e023      	b.n	8006d64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	dc02      	bgt.n	8006d2e <USBD_GetConfig+0x2e>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dc03      	bgt.n	8006d34 <USBD_GetConfig+0x34>
 8006d2c:	e015      	b.n	8006d5a <USBD_GetConfig+0x5a>
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d00b      	beq.n	8006d4a <USBD_GetConfig+0x4a>
 8006d32:	e012      	b.n	8006d5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f948 	bl	8006fd8 <USBD_CtlSendData>
        break;
 8006d48:	e00c      	b.n	8006d64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f940 	bl	8006fd8 <USBD_CtlSendData>
        break;
 8006d58:	e004      	b.n	8006d64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8be 	bl	8006ede <USBD_CtlError>
        break;
 8006d62:	bf00      	nop
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d81e      	bhi.n	8006dc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d004      	beq.n	8006d96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f8a5 	bl	8006ede <USBD_CtlError>
        break;
 8006d94:	e01a      	b.n	8006dcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	330c      	adds	r3, #12
 8006db6:	2202      	movs	r2, #2
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f90c 	bl	8006fd8 <USBD_CtlSendData>
      break;
 8006dc0:	e004      	b.n	8006dcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f88a 	bl	8006ede <USBD_CtlError>
      break;
 8006dca:	bf00      	nop
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	885b      	ldrh	r3, [r3, #2]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d107      	bne.n	8006df6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f94c 	bl	800708c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006df4:	e013      	b.n	8006e1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	885b      	ldrh	r3, [r3, #2]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d10b      	bne.n	8006e16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	889b      	ldrh	r3, [r3, #4]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f93c 	bl	800708c <USBD_CtlSendStatus>
}
 8006e14:	e003      	b.n	8006e1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f860 	bl	8006ede <USBD_CtlError>
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d80b      	bhi.n	8006e56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	885b      	ldrh	r3, [r3, #2]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d10c      	bne.n	8006e60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f91c 	bl	800708c <USBD_CtlSendStatus>
      }
      break;
 8006e54:	e004      	b.n	8006e60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f840 	bl	8006ede <USBD_CtlError>
      break;
 8006e5e:	e000      	b.n	8006e62 <USBD_ClrFeature+0x3c>
      break;
 8006e60:	bf00      	nop
  }
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff fa40 	bl	800631a <SWAPBYTE>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff fa33 	bl	800631a <SWAPBYTE>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff fa26 	bl	800631a <SWAPBYTE>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	80da      	strh	r2, [r3, #6]
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee8:	2180      	movs	r1, #128	@ 0x80
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fcec 	bl	80078c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fce8 	bl	80078c8 <USBD_LL_StallEP>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d042      	beq.n	8006f9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f1a:	6938      	ldr	r0, [r7, #16]
 8006f1c:	f000 f842 	bl	8006fa4 <USBD_GetLen>
 8006f20:	4603      	mov	r3, r0
 8006f22:	3301      	adds	r3, #1
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f2a:	d808      	bhi.n	8006f3e <USBD_GetString+0x3e>
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f000 f839 	bl	8006fa4 <USBD_GetLen>
 8006f32:	4603      	mov	r3, r0
 8006f34:	3301      	adds	r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	e001      	b.n	8006f42 <USBD_GetString+0x42>
 8006f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	3301      	adds	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	2203      	movs	r2, #3
 8006f60:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	3301      	adds	r3, #1
 8006f66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f68:	e013      	b.n	8006f92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	4413      	add	r3, r2
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	7812      	ldrb	r2, [r2, #0]
 8006f74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	613b      	str	r3, [r7, #16]
    idx++;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	4413      	add	r3, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e7      	bne.n	8006f6a <USBD_GetString+0x6a>
 8006f9a:	e000      	b.n	8006f9e <USBD_GetString+0x9e>
    return;
 8006f9c:	bf00      	nop
  }
}
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006fb4:	e005      	b.n	8006fc2 <USBD_GetLen+0x1e>
  {
    len++;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f5      	bne.n	8006fb6 <USBD_GetLen+0x12>
  }

  return len;
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fceb 	bl	80079da <USBD_LL_Transmit>

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	2100      	movs	r1, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fcda 	bl	80079da <USBD_LL_Transmit>

  return USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2203      	movs	r2, #3
 8007040:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	2100      	movs	r1, #0
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fcde 	bl	8007a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	2100      	movs	r1, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fccd 	bl	8007a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2204      	movs	r2, #4
 8007098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800709c:	2300      	movs	r3, #0
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fc99 	bl	80079da <USBD_LL_Transmit>

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2205      	movs	r2, #5
 80070be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070c2:	2300      	movs	r3, #0
 80070c4:	2200      	movs	r2, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fca7 	bl	8007a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070dc:	2200      	movs	r2, #0
 80070de:	4912      	ldr	r1, [pc, #72]	@ (8007128 <MX_USB_DEVICE_Init+0x50>)
 80070e0:	4812      	ldr	r0, [pc, #72]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 80070e2:	f7fe fcf7 	bl	8005ad4 <USBD_Init>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070ec:	f7fa f990 	bl	8001410 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070f0:	490f      	ldr	r1, [pc, #60]	@ (8007130 <MX_USB_DEVICE_Init+0x58>)
 80070f2:	480e      	ldr	r0, [pc, #56]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 80070f4:	f7fe fd1e 	bl	8005b34 <USBD_RegisterClass>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070fe:	f7fa f987 	bl	8001410 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007102:	490c      	ldr	r1, [pc, #48]	@ (8007134 <MX_USB_DEVICE_Init+0x5c>)
 8007104:	4809      	ldr	r0, [pc, #36]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 8007106:	f7fe fc15 	bl	8005934 <USBD_CDC_RegisterInterface>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007110:	f7fa f97e 	bl	8001410 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007114:	4805      	ldr	r0, [pc, #20]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 8007116:	f7fe fd43 	bl	8005ba0 <USBD_Start>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007120:	f7fa f976 	bl	8001410 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007124:	bf00      	nop
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200000ac 	.word	0x200000ac
 800712c:	2000030c 	.word	0x2000030c
 8007130:	20000018 	.word	0x20000018
 8007134:	20000098 	.word	0x20000098

08007138 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800713c:	2200      	movs	r2, #0
 800713e:	4905      	ldr	r1, [pc, #20]	@ (8007154 <CDC_Init_FS+0x1c>)
 8007140:	4805      	ldr	r0, [pc, #20]	@ (8007158 <CDC_Init_FS+0x20>)
 8007142:	f7fe fc11 	bl	8005968 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007146:	4905      	ldr	r1, [pc, #20]	@ (800715c <CDC_Init_FS+0x24>)
 8007148:	4803      	ldr	r0, [pc, #12]	@ (8007158 <CDC_Init_FS+0x20>)
 800714a:	f7fe fc2f 	bl	80059ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800714e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000de8 	.word	0x20000de8
 8007158:	2000030c 	.word	0x2000030c
 800715c:	200005e8 	.word	0x200005e8

08007160 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007164:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007166:	4618      	mov	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	71fb      	strb	r3, [r7, #7]
 800717c:	4613      	mov	r3, r2
 800717e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b23      	cmp	r3, #35	@ 0x23
 8007184:	d84a      	bhi.n	800721c <CDC_Control_FS+0xac>
 8007186:	a201      	add	r2, pc, #4	@ (adr r2, 800718c <CDC_Control_FS+0x1c>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	0800721d 	.word	0x0800721d
 8007190:	0800721d 	.word	0x0800721d
 8007194:	0800721d 	.word	0x0800721d
 8007198:	0800721d 	.word	0x0800721d
 800719c:	0800721d 	.word	0x0800721d
 80071a0:	0800721d 	.word	0x0800721d
 80071a4:	0800721d 	.word	0x0800721d
 80071a8:	0800721d 	.word	0x0800721d
 80071ac:	0800721d 	.word	0x0800721d
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	0800721d 	.word	0x0800721d
 80071b8:	0800721d 	.word	0x0800721d
 80071bc:	0800721d 	.word	0x0800721d
 80071c0:	0800721d 	.word	0x0800721d
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	0800721d 	.word	0x0800721d
 80071d0:	0800721d 	.word	0x0800721d
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	0800721d 	.word	0x0800721d
 80071dc:	0800721d 	.word	0x0800721d
 80071e0:	0800721d 	.word	0x0800721d
 80071e4:	0800721d 	.word	0x0800721d
 80071e8:	0800721d 	.word	0x0800721d
 80071ec:	0800721d 	.word	0x0800721d
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	0800721d 	.word	0x0800721d
 8007204:	0800721d 	.word	0x0800721d
 8007208:	0800721d 	.word	0x0800721d
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800721d 	.word	0x0800721d
 8007214:	0800721d 	.word	0x0800721d
 8007218:	0800721d 	.word	0x0800721d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800721c:	bf00      	nop
  }

  return (USBD_OK);
 800721e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4805      	ldr	r0, [pc, #20]	@ (8007250 <CDC_Receive_FS+0x24>)
 800723a:	f7fe fbb7 	bl	80059ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800723e:	4804      	ldr	r0, [pc, #16]	@ (8007250 <CDC_Receive_FS+0x24>)
 8007240:	f7fe fc12 	bl	8005a68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007244:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	2000030c 	.word	0x2000030c

08007254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007264:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <CDC_Transmit_FS+0x48>)
 8007266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800726a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007276:	2301      	movs	r3, #1
 8007278:	e00b      	b.n	8007292 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800727a:	887b      	ldrh	r3, [r7, #2]
 800727c:	461a      	mov	r2, r3
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4806      	ldr	r0, [pc, #24]	@ (800729c <CDC_Transmit_FS+0x48>)
 8007282:	f7fe fb71 	bl	8005968 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007286:	4805      	ldr	r0, [pc, #20]	@ (800729c <CDC_Transmit_FS+0x48>)
 8007288:	f7fe fbae 	bl	80059e8 <USBD_CDC_TransmitPacket>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	2000030c 	.word	0x2000030c

080072a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80072b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2212      	movs	r2, #18
 80072d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072d6:	4b03      	ldr	r3, [pc, #12]	@ (80072e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	200000c8 	.word	0x200000c8

080072e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2204      	movs	r2, #4
 80072f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072fa:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	200000dc 	.word	0x200000dc

0800730c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4907      	ldr	r1, [pc, #28]	@ (8007340 <USBD_FS_ProductStrDescriptor+0x34>)
 8007322:	4808      	ldr	r0, [pc, #32]	@ (8007344 <USBD_FS_ProductStrDescriptor+0x38>)
 8007324:	f7ff fdec 	bl	8006f00 <USBD_GetString>
 8007328:	e004      	b.n	8007334 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	4904      	ldr	r1, [pc, #16]	@ (8007340 <USBD_FS_ProductStrDescriptor+0x34>)
 800732e:	4805      	ldr	r0, [pc, #20]	@ (8007344 <USBD_FS_ProductStrDescriptor+0x38>)
 8007330:	f7ff fde6 	bl	8006f00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	@ (8007340 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	200015e8 	.word	0x200015e8
 8007344:	0800c288 	.word	0x0800c288

08007348 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	4904      	ldr	r1, [pc, #16]	@ (8007368 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007358:	4804      	ldr	r0, [pc, #16]	@ (800736c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800735a:	f7ff fdd1 	bl	8006f00 <USBD_GetString>
  return USBD_StrDesc;
 800735e:	4b02      	ldr	r3, [pc, #8]	@ (8007368 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200015e8 	.word	0x200015e8
 800736c:	0800c2a0 	.word	0x0800c2a0

08007370 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	221a      	movs	r2, #26
 8007380:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007382:	f000 f843 	bl	800740c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007386:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200000e0 	.word	0x200000e0

08007394 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4907      	ldr	r1, [pc, #28]	@ (80073c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073aa:	4808      	ldr	r0, [pc, #32]	@ (80073cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073ac:	f7ff fda8 	bl	8006f00 <USBD_GetString>
 80073b0:	e004      	b.n	80073bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073b6:	4805      	ldr	r0, [pc, #20]	@ (80073cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073b8:	f7ff fda2 	bl	8006f00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073bc:	4b02      	ldr	r3, [pc, #8]	@ (80073c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200015e8 	.word	0x200015e8
 80073cc:	0800c2b4 	.word	0x0800c2b4

080073d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4907      	ldr	r1, [pc, #28]	@ (8007404 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073e6:	4808      	ldr	r0, [pc, #32]	@ (8007408 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073e8:	f7ff fd8a 	bl	8006f00 <USBD_GetString>
 80073ec:	e004      	b.n	80073f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073f2:	4805      	ldr	r0, [pc, #20]	@ (8007408 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073f4:	f7ff fd84 	bl	8006f00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	200015e8 	.word	0x200015e8
 8007408:	0800c2c0 	.word	0x0800c2c0

0800740c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007412:	4b0f      	ldr	r3, [pc, #60]	@ (8007450 <Get_SerialNum+0x44>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007418:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <Get_SerialNum+0x48>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800741e:	4b0e      	ldr	r3, [pc, #56]	@ (8007458 <Get_SerialNum+0x4c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007432:	2208      	movs	r2, #8
 8007434:	4909      	ldr	r1, [pc, #36]	@ (800745c <Get_SerialNum+0x50>)
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f814 	bl	8007464 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800743c:	2204      	movs	r2, #4
 800743e:	4908      	ldr	r1, [pc, #32]	@ (8007460 <Get_SerialNum+0x54>)
 8007440:	68b8      	ldr	r0, [r7, #8]
 8007442:	f000 f80f 	bl	8007464 <IntToUnicode>
  }
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	1fff7a10 	.word	0x1fff7a10
 8007454:	1fff7a14 	.word	0x1fff7a14
 8007458:	1fff7a18 	.word	0x1fff7a18
 800745c:	200000e2 	.word	0x200000e2
 8007460:	200000f2 	.word	0x200000f2

08007464 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
 800747a:	e027      	b.n	80074cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	0f1b      	lsrs	r3, r3, #28
 8007480:	2b09      	cmp	r3, #9
 8007482:	d80b      	bhi.n	800749c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0f1b      	lsrs	r3, r3, #28
 8007488:	b2da      	uxtb	r2, r3
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	4619      	mov	r1, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	440b      	add	r3, r1
 8007494:	3230      	adds	r2, #48	@ 0x30
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	e00a      	b.n	80074b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4619      	mov	r1, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	440b      	add	r3, r1
 80074ac:	3237      	adds	r2, #55	@ 0x37
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	3301      	adds	r3, #1
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	3301      	adds	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
 80074cc:	7dfa      	ldrb	r2, [r7, #23]
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d3d3      	bcc.n	800747c <IntToUnicode+0x18>
  }
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	@ 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ec:	f107 0314 	add.w	r3, r7, #20
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007504:	d13a      	bne.n	800757c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	4b1e      	ldr	r3, [pc, #120]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	4a1d      	ldr	r2, [pc, #116]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	6313      	str	r3, [r2, #48]	@ 0x30
 8007516:	4b1b      	ldr	r3, [pc, #108]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007522:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007528:	2302      	movs	r3, #2
 800752a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007530:	2303      	movs	r3, #3
 8007532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007534:	230a      	movs	r3, #10
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	4619      	mov	r1, r3
 800753e:	4812      	ldr	r0, [pc, #72]	@ (8007588 <HAL_PCD_MspInit+0xa4>)
 8007540:	f7fa fa78 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007544:	4b0f      	ldr	r3, [pc, #60]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007548:	4a0e      	ldr	r2, [pc, #56]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 800754a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007558:	4a0a      	ldr	r2, [pc, #40]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 800755a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800755e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007560:	4b08      	ldr	r3, [pc, #32]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800756c:	2200      	movs	r2, #0
 800756e:	2100      	movs	r1, #0
 8007570:	2043      	movs	r0, #67	@ 0x43
 8007572:	f7fa fa28 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007576:	2043      	movs	r0, #67	@ 0x43
 8007578:	f7fa fa41 	bl	80019fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800757c:	bf00      	nop
 800757e:	3728      	adds	r7, #40	@ 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40023800 	.word	0x40023800
 8007588:	40020000 	.word	0x40020000

0800758c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f7fe fb49 	bl	8005c3a <USBD_LL_SetupStage>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	4619      	mov	r1, r3
 80075da:	f7fe fb83 	bl	8005ce4 <USBD_LL_DataOutStage>
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	3320      	adds	r3, #32
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	4619      	mov	r1, r3
 800760e:	f7fe fc1c 	bl	8005e4a <USBD_LL_DataInStage>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fd56 	bl	80060da <USBD_LL_SOF>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800763e:	2301      	movs	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	79db      	ldrb	r3, [r3, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
 800764e:	e008      	b.n	8007662 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	79db      	ldrb	r3, [r3, #7]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d102      	bne.n	800765e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
 800765c:	e001      	b.n	8007662 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800765e:	f7f9 fed7 	bl	8001410 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fcf0 	bl	8006052 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fc98 	bl	8005fae <USBD_LL_Reset>
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fceb 	bl	8006072 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7adb      	ldrb	r3, [r3, #11]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076bc:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <HAL_PCD_SuspendCallback+0x48>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	4a03      	ldr	r2, [pc, #12]	@ (80076d0 <HAL_PCD_SuspendCallback+0x48>)
 80076c2:	f043 0306 	orr.w	r3, r3, #6
 80076c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	e000ed00 	.word	0xe000ed00

080076d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fce1 	bl	80060aa <USBD_LL_Resume>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fd39 	bl	800617e <USBD_LL_IsoOUTIncomplete>
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007726:	78fa      	ldrb	r2, [r7, #3]
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fcf5 	bl	800611a <USBD_LL_IsoINIncomplete>
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fd4b 	bl	80061e2 <USBD_LL_DevConnected>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fd48 	bl	80061f8 <USBD_LL_DevDisconnected>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d13c      	bne.n	80077fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007780:	4a20      	ldr	r2, [pc, #128]	@ (8007804 <USBD_LL_Init+0x94>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a1e      	ldr	r2, [pc, #120]	@ (8007804 <USBD_LL_Init+0x94>)
 800778c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007790:	4b1c      	ldr	r3, [pc, #112]	@ (8007804 <USBD_LL_Init+0x94>)
 8007792:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007796:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007798:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <USBD_LL_Init+0x94>)
 800779a:	2204      	movs	r2, #4
 800779c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800779e:	4b19      	ldr	r3, [pc, #100]	@ (8007804 <USBD_LL_Init+0x94>)
 80077a0:	2202      	movs	r2, #2
 80077a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077a4:	4b17      	ldr	r3, [pc, #92]	@ (8007804 <USBD_LL_Init+0x94>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077aa:	4b16      	ldr	r3, [pc, #88]	@ (8007804 <USBD_LL_Init+0x94>)
 80077ac:	2202      	movs	r2, #2
 80077ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077b0:	4b14      	ldr	r3, [pc, #80]	@ (8007804 <USBD_LL_Init+0x94>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077b6:	4b13      	ldr	r3, [pc, #76]	@ (8007804 <USBD_LL_Init+0x94>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077bc:	4b11      	ldr	r3, [pc, #68]	@ (8007804 <USBD_LL_Init+0x94>)
 80077be:	2200      	movs	r2, #0
 80077c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <USBD_LL_Init+0x94>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007804 <USBD_LL_Init+0x94>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077ce:	480d      	ldr	r0, [pc, #52]	@ (8007804 <USBD_LL_Init+0x94>)
 80077d0:	f7fa fae5 	bl	8001d9e <HAL_PCD_Init>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077da:	f7f9 fe19 	bl	8001410 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077de:	2180      	movs	r1, #128	@ 0x80
 80077e0:	4808      	ldr	r0, [pc, #32]	@ (8007804 <USBD_LL_Init+0x94>)
 80077e2:	f7fb fd12 	bl	800320a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	2100      	movs	r1, #0
 80077ea:	4806      	ldr	r0, [pc, #24]	@ (8007804 <USBD_LL_Init+0x94>)
 80077ec:	f7fb fcc6 	bl	800317c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077f0:	2280      	movs	r2, #128	@ 0x80
 80077f2:	2101      	movs	r1, #1
 80077f4:	4803      	ldr	r0, [pc, #12]	@ (8007804 <USBD_LL_Init+0x94>)
 80077f6:	f7fb fcc1 	bl	800317c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	200017e8 	.word	0x200017e8

08007808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800781e:	4618      	mov	r0, r3
 8007820:	f7fa fbcc 	bl	8001fbc <HAL_PCD_Start>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 f942 	bl	8007ab4 <USBD_Get_USB_Status>
 8007830:	4603      	mov	r3, r0
 8007832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007834:	7bbb      	ldrb	r3, [r7, #14]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	4608      	mov	r0, r1
 8007848:	4611      	mov	r1, r2
 800784a:	461a      	mov	r2, r3
 800784c:	4603      	mov	r3, r0
 800784e:	70fb      	strb	r3, [r7, #3]
 8007850:	460b      	mov	r3, r1
 8007852:	70bb      	strb	r3, [r7, #2]
 8007854:	4613      	mov	r3, r2
 8007856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007866:	78bb      	ldrb	r3, [r7, #2]
 8007868:	883a      	ldrh	r2, [r7, #0]
 800786a:	78f9      	ldrb	r1, [r7, #3]
 800786c:	f7fb f8a0 	bl	80029b0 <HAL_PCD_EP_Open>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f91c 	bl	8007ab4 <USBD_Get_USB_Status>
 800787c:	4603      	mov	r3, r0
 800787e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007880:	7bbb      	ldrb	r3, [r7, #14]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078a4:	78fa      	ldrb	r2, [r7, #3]
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fb f8eb 	bl	8002a84 <HAL_PCD_EP_Close>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f8fd 	bl	8007ab4 <USBD_Get_USB_Status>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078be:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fb f9a3 	bl	8002c32 <HAL_PCD_EP_SetStall>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f8de 	bl	8007ab4 <USBD_Get_USB_Status>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007920:	78fa      	ldrb	r2, [r7, #3]
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f7fb f9e7 	bl	8002cf8 <HAL_PCD_EP_ClrStall>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f8bf 	bl	8007ab4 <USBD_Get_USB_Status>
 8007936:	4603      	mov	r3, r0
 8007938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800793a:	7bbb      	ldrb	r3, [r7, #14]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800795c:	2b00      	cmp	r3, #0
 800795e:	da0b      	bge.n	8007978 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	3316      	adds	r3, #22
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	e00b      	b.n	8007990 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	4613      	mov	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800798e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fa ffd4 	bl	8002968 <HAL_PCD_SetAddress>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f874 	bl	8007ab4 <USBD_Get_USB_Status>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	460b      	mov	r3, r1
 80079e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80079f8:	7af9      	ldrb	r1, [r7, #11]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	f7fb f8de 	bl	8002bbe <HAL_PCD_EP_Transmit>
 8007a02:	4603      	mov	r3, r0
 8007a04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f853 	bl	8007ab4 <USBD_Get_USB_Status>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007a3a:	7af9      	ldrb	r1, [r7, #11]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	f7fb f86a 	bl	8002b18 <HAL_PCD_EP_Receive>
 8007a44:	4603      	mov	r3, r0
 8007a46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f832 	bl	8007ab4 <USBD_Get_USB_Status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a70:	78fa      	ldrb	r2, [r7, #3]
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fb f88a 	bl	8002b8e <HAL_PCD_EP_GetRxCount>
 8007a7a:	4603      	mov	r3, r0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a8c:	4b03      	ldr	r3, [pc, #12]	@ (8007a9c <USBD_static_malloc+0x18>)
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20001ccc 	.word	0x20001ccc

08007aa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d817      	bhi.n	8007af8 <USBD_Get_USB_Status+0x44>
 8007ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad0 <USBD_Get_USB_Status+0x1c>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007ae7 	.word	0x08007ae7
 8007ad8:	08007aed 	.word	0x08007aed
 8007adc:	08007af3 	.word	0x08007af3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae4:	e00b      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aea:	e008      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
    break;
 8007af0:	e005      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007af2:	2303      	movs	r3, #3
 8007af4:	73fb      	strb	r3, [r7, #15]
    break;
 8007af6:	e002      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	73fb      	strb	r3, [r7, #15]
    break;
 8007afc:	bf00      	nop
  }
  return usb_status;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <__cvt>:
 8007b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	ec57 6b10 	vmov	r6, r7, d0
 8007b14:	2f00      	cmp	r7, #0
 8007b16:	460c      	mov	r4, r1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	bfbb      	ittet	lt
 8007b1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b22:	461f      	movlt	r7, r3
 8007b24:	2300      	movge	r3, #0
 8007b26:	232d      	movlt	r3, #45	@ 0x2d
 8007b28:	700b      	strb	r3, [r1, #0]
 8007b2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b30:	4691      	mov	r9, r2
 8007b32:	f023 0820 	bic.w	r8, r3, #32
 8007b36:	bfbc      	itt	lt
 8007b38:	4632      	movlt	r2, r6
 8007b3a:	4616      	movlt	r6, r2
 8007b3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b40:	d005      	beq.n	8007b4e <__cvt+0x42>
 8007b42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b46:	d100      	bne.n	8007b4a <__cvt+0x3e>
 8007b48:	3401      	adds	r4, #1
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	e000      	b.n	8007b50 <__cvt+0x44>
 8007b4e:	2103      	movs	r1, #3
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	ab02      	add	r3, sp, #8
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	ec47 6b10 	vmov	d0, r6, r7
 8007b5c:	4653      	mov	r3, sl
 8007b5e:	4622      	mov	r2, r4
 8007b60:	f001 f8aa 	bl	8008cb8 <_dtoa_r>
 8007b64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b68:	4605      	mov	r5, r0
 8007b6a:	d119      	bne.n	8007ba0 <__cvt+0x94>
 8007b6c:	f019 0f01 	tst.w	r9, #1
 8007b70:	d00e      	beq.n	8007b90 <__cvt+0x84>
 8007b72:	eb00 0904 	add.w	r9, r0, r4
 8007b76:	2200      	movs	r2, #0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	f7f8 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b82:	b108      	cbz	r0, 8007b88 <__cvt+0x7c>
 8007b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b88:	2230      	movs	r2, #48	@ 0x30
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	454b      	cmp	r3, r9
 8007b8e:	d31e      	bcc.n	8007bce <__cvt+0xc2>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b94:	1b5b      	subs	r3, r3, r5
 8007b96:	4628      	mov	r0, r5
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	b004      	add	sp, #16
 8007b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ba4:	eb00 0904 	add.w	r9, r0, r4
 8007ba8:	d1e5      	bne.n	8007b76 <__cvt+0x6a>
 8007baa:	7803      	ldrb	r3, [r0, #0]
 8007bac:	2b30      	cmp	r3, #48	@ 0x30
 8007bae:	d10a      	bne.n	8007bc6 <__cvt+0xba>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bbc:	b918      	cbnz	r0, 8007bc6 <__cvt+0xba>
 8007bbe:	f1c4 0401 	rsb	r4, r4, #1
 8007bc2:	f8ca 4000 	str.w	r4, [sl]
 8007bc6:	f8da 3000 	ldr.w	r3, [sl]
 8007bca:	4499      	add	r9, r3
 8007bcc:	e7d3      	b.n	8007b76 <__cvt+0x6a>
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	e7d9      	b.n	8007b8a <__cvt+0x7e>

08007bd6 <__exponent>:
 8007bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	bfba      	itte	lt
 8007bdc:	4249      	neglt	r1, r1
 8007bde:	232d      	movlt	r3, #45	@ 0x2d
 8007be0:	232b      	movge	r3, #43	@ 0x2b
 8007be2:	2909      	cmp	r1, #9
 8007be4:	7002      	strb	r2, [r0, #0]
 8007be6:	7043      	strb	r3, [r0, #1]
 8007be8:	dd29      	ble.n	8007c3e <__exponent+0x68>
 8007bea:	f10d 0307 	add.w	r3, sp, #7
 8007bee:	461d      	mov	r5, r3
 8007bf0:	270a      	movs	r7, #10
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007bf8:	fb07 1416 	mls	r4, r7, r6, r1
 8007bfc:	3430      	adds	r4, #48	@ 0x30
 8007bfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c02:	460c      	mov	r4, r1
 8007c04:	2c63      	cmp	r4, #99	@ 0x63
 8007c06:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	dcf1      	bgt.n	8007bf2 <__exponent+0x1c>
 8007c0e:	3130      	adds	r1, #48	@ 0x30
 8007c10:	1e94      	subs	r4, r2, #2
 8007c12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c16:	1c41      	adds	r1, r0, #1
 8007c18:	4623      	mov	r3, r4
 8007c1a:	42ab      	cmp	r3, r5
 8007c1c:	d30a      	bcc.n	8007c34 <__exponent+0x5e>
 8007c1e:	f10d 0309 	add.w	r3, sp, #9
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	42ac      	cmp	r4, r5
 8007c26:	bf88      	it	hi
 8007c28:	2300      	movhi	r3, #0
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	4403      	add	r3, r0
 8007c2e:	1a18      	subs	r0, r3, r0
 8007c30:	b003      	add	sp, #12
 8007c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c3c:	e7ed      	b.n	8007c1a <__exponent+0x44>
 8007c3e:	2330      	movs	r3, #48	@ 0x30
 8007c40:	3130      	adds	r1, #48	@ 0x30
 8007c42:	7083      	strb	r3, [r0, #2]
 8007c44:	70c1      	strb	r1, [r0, #3]
 8007c46:	1d03      	adds	r3, r0, #4
 8007c48:	e7f1      	b.n	8007c2e <__exponent+0x58>
	...

08007c4c <_printf_float>:
 8007c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c50:	b08d      	sub	sp, #52	@ 0x34
 8007c52:	460c      	mov	r4, r1
 8007c54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c58:	4616      	mov	r6, r2
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	f000 ff23 	bl	8008aa8 <_localeconv_r>
 8007c62:	6803      	ldr	r3, [r0, #0]
 8007c64:	9304      	str	r3, [sp, #16]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f8 fb0a 	bl	8000280 <strlen>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c70:	f8d8 3000 	ldr.w	r3, [r8]
 8007c74:	9005      	str	r0, [sp, #20]
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	f103 0208 	add.w	r2, r3, #8
 8007c80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c84:	f8d4 b000 	ldr.w	fp, [r4]
 8007c88:	f8c8 2000 	str.w	r2, [r8]
 8007c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8007f14 <_printf_float+0x2c8>)
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca8:	f7f8 ff48 	bl	8000b3c <__aeabi_dcmpun>
 8007cac:	bb70      	cbnz	r0, 8007d0c <_printf_float+0xc0>
 8007cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cb2:	4b98      	ldr	r3, [pc, #608]	@ (8007f14 <_printf_float+0x2c8>)
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb8:	f7f8 ff22 	bl	8000b00 <__aeabi_dcmple>
 8007cbc:	bb30      	cbnz	r0, 8007d0c <_printf_float+0xc0>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f8 ff11 	bl	8000aec <__aeabi_dcmplt>
 8007cca:	b110      	cbz	r0, 8007cd2 <_printf_float+0x86>
 8007ccc:	232d      	movs	r3, #45	@ 0x2d
 8007cce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd2:	4a91      	ldr	r2, [pc, #580]	@ (8007f18 <_printf_float+0x2cc>)
 8007cd4:	4b91      	ldr	r3, [pc, #580]	@ (8007f1c <_printf_float+0x2d0>)
 8007cd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007cda:	bf94      	ite	ls
 8007cdc:	4690      	movls	r8, r2
 8007cde:	4698      	movhi	r8, r3
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	f02b 0304 	bic.w	r3, fp, #4
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	f04f 0900 	mov.w	r9, #0
 8007cee:	9700      	str	r7, [sp, #0]
 8007cf0:	4633      	mov	r3, r6
 8007cf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f9d2 	bl	80080a0 <_printf_common>
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f040 808d 	bne.w	8007e1c <_printf_float+0x1d0>
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	b00d      	add	sp, #52	@ 0x34
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	464b      	mov	r3, r9
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 ff12 	bl	8000b3c <__aeabi_dcmpun>
 8007d18:	b140      	cbz	r0, 8007d2c <_printf_float+0xe0>
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfbc      	itt	lt
 8007d20:	232d      	movlt	r3, #45	@ 0x2d
 8007d22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d26:	4a7e      	ldr	r2, [pc, #504]	@ (8007f20 <_printf_float+0x2d4>)
 8007d28:	4b7e      	ldr	r3, [pc, #504]	@ (8007f24 <_printf_float+0x2d8>)
 8007d2a:	e7d4      	b.n	8007cd6 <_printf_float+0x8a>
 8007d2c:	6863      	ldr	r3, [r4, #4]
 8007d2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d32:	9206      	str	r2, [sp, #24]
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	d13b      	bne.n	8007db0 <_printf_float+0x164>
 8007d38:	2306      	movs	r3, #6
 8007d3a:	6063      	str	r3, [r4, #4]
 8007d3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d40:	2300      	movs	r3, #0
 8007d42:	6022      	str	r2, [r4, #0]
 8007d44:	9303      	str	r3, [sp, #12]
 8007d46:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d4c:	ab09      	add	r3, sp, #36	@ 0x24
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	6861      	ldr	r1, [r4, #4]
 8007d52:	ec49 8b10 	vmov	d0, r8, r9
 8007d56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f7ff fed6 	bl	8007b0c <__cvt>
 8007d60:	9b06      	ldr	r3, [sp, #24]
 8007d62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d64:	2b47      	cmp	r3, #71	@ 0x47
 8007d66:	4680      	mov	r8, r0
 8007d68:	d129      	bne.n	8007dbe <_printf_float+0x172>
 8007d6a:	1cc8      	adds	r0, r1, #3
 8007d6c:	db02      	blt.n	8007d74 <_printf_float+0x128>
 8007d6e:	6863      	ldr	r3, [r4, #4]
 8007d70:	4299      	cmp	r1, r3
 8007d72:	dd41      	ble.n	8007df8 <_printf_float+0x1ac>
 8007d74:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d78:	fa5f fa8a 	uxtb.w	sl, sl
 8007d7c:	3901      	subs	r1, #1
 8007d7e:	4652      	mov	r2, sl
 8007d80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d84:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d86:	f7ff ff26 	bl	8007bd6 <__exponent>
 8007d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d8c:	1813      	adds	r3, r2, r0
 8007d8e:	2a01      	cmp	r2, #1
 8007d90:	4681      	mov	r9, r0
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	dc02      	bgt.n	8007d9c <_printf_float+0x150>
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	07d2      	lsls	r2, r2, #31
 8007d9a:	d501      	bpl.n	8007da0 <_printf_float+0x154>
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0a2      	beq.n	8007cee <_printf_float+0xa2>
 8007da8:	232d      	movs	r3, #45	@ 0x2d
 8007daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dae:	e79e      	b.n	8007cee <_printf_float+0xa2>
 8007db0:	9a06      	ldr	r2, [sp, #24]
 8007db2:	2a47      	cmp	r2, #71	@ 0x47
 8007db4:	d1c2      	bne.n	8007d3c <_printf_float+0xf0>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1c0      	bne.n	8007d3c <_printf_float+0xf0>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e7bd      	b.n	8007d3a <_printf_float+0xee>
 8007dbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007dc2:	d9db      	bls.n	8007d7c <_printf_float+0x130>
 8007dc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007dc8:	d118      	bne.n	8007dfc <_printf_float+0x1b0>
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	dd0b      	ble.n	8007de8 <_printf_float+0x19c>
 8007dd0:	6121      	str	r1, [r4, #16]
 8007dd2:	b913      	cbnz	r3, 8007dda <_printf_float+0x18e>
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	07d0      	lsls	r0, r2, #31
 8007dd8:	d502      	bpl.n	8007de0 <_printf_float+0x194>
 8007dda:	3301      	adds	r3, #1
 8007ddc:	440b      	add	r3, r1
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007de2:	f04f 0900 	mov.w	r9, #0
 8007de6:	e7db      	b.n	8007da0 <_printf_float+0x154>
 8007de8:	b913      	cbnz	r3, 8007df0 <_printf_float+0x1a4>
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	07d2      	lsls	r2, r2, #31
 8007dee:	d501      	bpl.n	8007df4 <_printf_float+0x1a8>
 8007df0:	3302      	adds	r3, #2
 8007df2:	e7f4      	b.n	8007dde <_printf_float+0x192>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f2      	b.n	8007dde <_printf_float+0x192>
 8007df8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dfe:	4299      	cmp	r1, r3
 8007e00:	db05      	blt.n	8007e0e <_printf_float+0x1c2>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	6121      	str	r1, [r4, #16]
 8007e06:	07d8      	lsls	r0, r3, #31
 8007e08:	d5ea      	bpl.n	8007de0 <_printf_float+0x194>
 8007e0a:	1c4b      	adds	r3, r1, #1
 8007e0c:	e7e7      	b.n	8007dde <_printf_float+0x192>
 8007e0e:	2900      	cmp	r1, #0
 8007e10:	bfd4      	ite	le
 8007e12:	f1c1 0202 	rsble	r2, r1, #2
 8007e16:	2201      	movgt	r2, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	e7e0      	b.n	8007dde <_printf_float+0x192>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	055a      	lsls	r2, r3, #21
 8007e20:	d407      	bmi.n	8007e32 <_printf_float+0x1e6>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	4642      	mov	r2, r8
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d12b      	bne.n	8007e88 <_printf_float+0x23c>
 8007e30:	e767      	b.n	8007d02 <_printf_float+0xb6>
 8007e32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e36:	f240 80dd 	bls.w	8007ff4 <_printf_float+0x3a8>
 8007e3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2300      	movs	r3, #0
 8007e42:	f7f8 fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d033      	beq.n	8007eb2 <_printf_float+0x266>
 8007e4a:	4a37      	ldr	r2, [pc, #220]	@ (8007f28 <_printf_float+0x2dc>)
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f af54 	beq.w	8007d02 <_printf_float+0xb6>
 8007e5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e5e:	4543      	cmp	r3, r8
 8007e60:	db02      	blt.n	8007e68 <_printf_float+0x21c>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	07d8      	lsls	r0, r3, #31
 8007e66:	d50f      	bpl.n	8007e88 <_printf_float+0x23c>
 8007e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f af45 	beq.w	8007d02 <_printf_float+0xb6>
 8007e78:	f04f 0900 	mov.w	r9, #0
 8007e7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e80:	f104 0a1a 	add.w	sl, r4, #26
 8007e84:	45c8      	cmp	r8, r9
 8007e86:	dc09      	bgt.n	8007e9c <_printf_float+0x250>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	079b      	lsls	r3, r3, #30
 8007e8c:	f100 8103 	bmi.w	8008096 <_printf_float+0x44a>
 8007e90:	68e0      	ldr	r0, [r4, #12]
 8007e92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e94:	4298      	cmp	r0, r3
 8007e96:	bfb8      	it	lt
 8007e98:	4618      	movlt	r0, r3
 8007e9a:	e734      	b.n	8007d06 <_printf_float+0xba>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4652      	mov	r2, sl
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f af2b 	beq.w	8007d02 <_printf_float+0xb6>
 8007eac:	f109 0901 	add.w	r9, r9, #1
 8007eb0:	e7e8      	b.n	8007e84 <_printf_float+0x238>
 8007eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dc39      	bgt.n	8007f2c <_printf_float+0x2e0>
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f28 <_printf_float+0x2dc>)
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b8      	blx	r7
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f43f af1d 	beq.w	8007d02 <_printf_float+0xb6>
 8007ec8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ecc:	ea59 0303 	orrs.w	r3, r9, r3
 8007ed0:	d102      	bne.n	8007ed8 <_printf_float+0x28c>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	07d9      	lsls	r1, r3, #31
 8007ed6:	d5d7      	bpl.n	8007e88 <_printf_float+0x23c>
 8007ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	f43f af0d 	beq.w	8007d02 <_printf_float+0xb6>
 8007ee8:	f04f 0a00 	mov.w	sl, #0
 8007eec:	f104 0b1a 	add.w	fp, r4, #26
 8007ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef2:	425b      	negs	r3, r3
 8007ef4:	4553      	cmp	r3, sl
 8007ef6:	dc01      	bgt.n	8007efc <_printf_float+0x2b0>
 8007ef8:	464b      	mov	r3, r9
 8007efa:	e793      	b.n	8007e24 <_printf_float+0x1d8>
 8007efc:	2301      	movs	r3, #1
 8007efe:	465a      	mov	r2, fp
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f aefb 	beq.w	8007d02 <_printf_float+0xb6>
 8007f0c:	f10a 0a01 	add.w	sl, sl, #1
 8007f10:	e7ee      	b.n	8007ef0 <_printf_float+0x2a4>
 8007f12:	bf00      	nop
 8007f14:	7fefffff 	.word	0x7fefffff
 8007f18:	0800c2e0 	.word	0x0800c2e0
 8007f1c:	0800c2e4 	.word	0x0800c2e4
 8007f20:	0800c2e8 	.word	0x0800c2e8
 8007f24:	0800c2ec 	.word	0x0800c2ec
 8007f28:	0800c2f0 	.word	0x0800c2f0
 8007f2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f32:	4553      	cmp	r3, sl
 8007f34:	bfa8      	it	ge
 8007f36:	4653      	movge	r3, sl
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	4699      	mov	r9, r3
 8007f3c:	dc36      	bgt.n	8007fac <_printf_float+0x360>
 8007f3e:	f04f 0b00 	mov.w	fp, #0
 8007f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f46:	f104 021a 	add.w	r2, r4, #26
 8007f4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f4c:	9306      	str	r3, [sp, #24]
 8007f4e:	eba3 0309 	sub.w	r3, r3, r9
 8007f52:	455b      	cmp	r3, fp
 8007f54:	dc31      	bgt.n	8007fba <_printf_float+0x36e>
 8007f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f58:	459a      	cmp	sl, r3
 8007f5a:	dc3a      	bgt.n	8007fd2 <_printf_float+0x386>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07da      	lsls	r2, r3, #31
 8007f60:	d437      	bmi.n	8007fd2 <_printf_float+0x386>
 8007f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f64:	ebaa 0903 	sub.w	r9, sl, r3
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	ebaa 0303 	sub.w	r3, sl, r3
 8007f6e:	4599      	cmp	r9, r3
 8007f70:	bfa8      	it	ge
 8007f72:	4699      	movge	r9, r3
 8007f74:	f1b9 0f00 	cmp.w	r9, #0
 8007f78:	dc33      	bgt.n	8007fe2 <_printf_float+0x396>
 8007f7a:	f04f 0800 	mov.w	r8, #0
 8007f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f82:	f104 0b1a 	add.w	fp, r4, #26
 8007f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f88:	ebaa 0303 	sub.w	r3, sl, r3
 8007f8c:	eba3 0309 	sub.w	r3, r3, r9
 8007f90:	4543      	cmp	r3, r8
 8007f92:	f77f af79 	ble.w	8007e88 <_printf_float+0x23c>
 8007f96:	2301      	movs	r3, #1
 8007f98:	465a      	mov	r2, fp
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f aeae 	beq.w	8007d02 <_printf_float+0xb6>
 8007fa6:	f108 0801 	add.w	r8, r8, #1
 8007faa:	e7ec      	b.n	8007f86 <_printf_float+0x33a>
 8007fac:	4642      	mov	r2, r8
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d1c2      	bne.n	8007f3e <_printf_float+0x2f2>
 8007fb8:	e6a3      	b.n	8007d02 <_printf_float+0xb6>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	9206      	str	r2, [sp, #24]
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f ae9c 	beq.w	8007d02 <_printf_float+0xb6>
 8007fca:	9a06      	ldr	r2, [sp, #24]
 8007fcc:	f10b 0b01 	add.w	fp, fp, #1
 8007fd0:	e7bb      	b.n	8007f4a <_printf_float+0x2fe>
 8007fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1c0      	bne.n	8007f62 <_printf_float+0x316>
 8007fe0:	e68f      	b.n	8007d02 <_printf_float+0xb6>
 8007fe2:	9a06      	ldr	r2, [sp, #24]
 8007fe4:	464b      	mov	r3, r9
 8007fe6:	4442      	add	r2, r8
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d1c3      	bne.n	8007f7a <_printf_float+0x32e>
 8007ff2:	e686      	b.n	8007d02 <_printf_float+0xb6>
 8007ff4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ff8:	f1ba 0f01 	cmp.w	sl, #1
 8007ffc:	dc01      	bgt.n	8008002 <_printf_float+0x3b6>
 8007ffe:	07db      	lsls	r3, r3, #31
 8008000:	d536      	bpl.n	8008070 <_printf_float+0x424>
 8008002:	2301      	movs	r3, #1
 8008004:	4642      	mov	r2, r8
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	f43f ae78 	beq.w	8007d02 <_printf_float+0xb6>
 8008012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f ae70 	beq.w	8007d02 <_printf_float+0xb6>
 8008022:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008026:	2200      	movs	r2, #0
 8008028:	2300      	movs	r3, #0
 800802a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800802e:	f7f8 fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008032:	b9c0      	cbnz	r0, 8008066 <_printf_float+0x41a>
 8008034:	4653      	mov	r3, sl
 8008036:	f108 0201 	add.w	r2, r8, #1
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	d10c      	bne.n	800805e <_printf_float+0x412>
 8008044:	e65d      	b.n	8007d02 <_printf_float+0xb6>
 8008046:	2301      	movs	r3, #1
 8008048:	465a      	mov	r2, fp
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f ae56 	beq.w	8007d02 <_printf_float+0xb6>
 8008056:	f108 0801 	add.w	r8, r8, #1
 800805a:	45d0      	cmp	r8, sl
 800805c:	dbf3      	blt.n	8008046 <_printf_float+0x3fa>
 800805e:	464b      	mov	r3, r9
 8008060:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008064:	e6df      	b.n	8007e26 <_printf_float+0x1da>
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	f104 0b1a 	add.w	fp, r4, #26
 800806e:	e7f4      	b.n	800805a <_printf_float+0x40e>
 8008070:	2301      	movs	r3, #1
 8008072:	4642      	mov	r2, r8
 8008074:	e7e1      	b.n	800803a <_printf_float+0x3ee>
 8008076:	2301      	movs	r3, #1
 8008078:	464a      	mov	r2, r9
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f ae3e 	beq.w	8007d02 <_printf_float+0xb6>
 8008086:	f108 0801 	add.w	r8, r8, #1
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800808e:	1a5b      	subs	r3, r3, r1
 8008090:	4543      	cmp	r3, r8
 8008092:	dcf0      	bgt.n	8008076 <_printf_float+0x42a>
 8008094:	e6fc      	b.n	8007e90 <_printf_float+0x244>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	f104 0919 	add.w	r9, r4, #25
 800809e:	e7f4      	b.n	800808a <_printf_float+0x43e>

080080a0 <_printf_common>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	4616      	mov	r6, r2
 80080a6:	4698      	mov	r8, r3
 80080a8:	688a      	ldr	r2, [r1, #8]
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	bfb8      	it	lt
 80080b4:	4613      	movlt	r3, r2
 80080b6:	6033      	str	r3, [r6, #0]
 80080b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080bc:	4607      	mov	r7, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b10a      	cbz	r2, 80080c6 <_printf_common+0x26>
 80080c2:	3301      	adds	r3, #1
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	0699      	lsls	r1, r3, #26
 80080ca:	bf42      	ittt	mi
 80080cc:	6833      	ldrmi	r3, [r6, #0]
 80080ce:	3302      	addmi	r3, #2
 80080d0:	6033      	strmi	r3, [r6, #0]
 80080d2:	6825      	ldr	r5, [r4, #0]
 80080d4:	f015 0506 	ands.w	r5, r5, #6
 80080d8:	d106      	bne.n	80080e8 <_printf_common+0x48>
 80080da:	f104 0a19 	add.w	sl, r4, #25
 80080de:	68e3      	ldr	r3, [r4, #12]
 80080e0:	6832      	ldr	r2, [r6, #0]
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc26      	bgt.n	8008136 <_printf_common+0x96>
 80080e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080ec:	6822      	ldr	r2, [r4, #0]
 80080ee:	3b00      	subs	r3, #0
 80080f0:	bf18      	it	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	0692      	lsls	r2, r2, #26
 80080f6:	d42b      	bmi.n	8008150 <_printf_common+0xb0>
 80080f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080fc:	4641      	mov	r1, r8
 80080fe:	4638      	mov	r0, r7
 8008100:	47c8      	blx	r9
 8008102:	3001      	adds	r0, #1
 8008104:	d01e      	beq.n	8008144 <_printf_common+0xa4>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	f003 0306 	and.w	r3, r3, #6
 800810e:	2b04      	cmp	r3, #4
 8008110:	bf02      	ittt	eq
 8008112:	68e5      	ldreq	r5, [r4, #12]
 8008114:	6833      	ldreq	r3, [r6, #0]
 8008116:	1aed      	subeq	r5, r5, r3
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	bf0c      	ite	eq
 800811c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008120:	2500      	movne	r5, #0
 8008122:	4293      	cmp	r3, r2
 8008124:	bfc4      	itt	gt
 8008126:	1a9b      	subgt	r3, r3, r2
 8008128:	18ed      	addgt	r5, r5, r3
 800812a:	2600      	movs	r6, #0
 800812c:	341a      	adds	r4, #26
 800812e:	42b5      	cmp	r5, r6
 8008130:	d11a      	bne.n	8008168 <_printf_common+0xc8>
 8008132:	2000      	movs	r0, #0
 8008134:	e008      	b.n	8008148 <_printf_common+0xa8>
 8008136:	2301      	movs	r3, #1
 8008138:	4652      	mov	r2, sl
 800813a:	4641      	mov	r1, r8
 800813c:	4638      	mov	r0, r7
 800813e:	47c8      	blx	r9
 8008140:	3001      	adds	r0, #1
 8008142:	d103      	bne.n	800814c <_printf_common+0xac>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	3501      	adds	r5, #1
 800814e:	e7c6      	b.n	80080de <_printf_common+0x3e>
 8008150:	18e1      	adds	r1, r4, r3
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	2030      	movs	r0, #48	@ 0x30
 8008156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800815a:	4422      	add	r2, r4
 800815c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008164:	3302      	adds	r3, #2
 8008166:	e7c7      	b.n	80080f8 <_printf_common+0x58>
 8008168:	2301      	movs	r3, #1
 800816a:	4622      	mov	r2, r4
 800816c:	4641      	mov	r1, r8
 800816e:	4638      	mov	r0, r7
 8008170:	47c8      	blx	r9
 8008172:	3001      	adds	r0, #1
 8008174:	d0e6      	beq.n	8008144 <_printf_common+0xa4>
 8008176:	3601      	adds	r6, #1
 8008178:	e7d9      	b.n	800812e <_printf_common+0x8e>
	...

0800817c <_printf_i>:
 800817c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	7e0f      	ldrb	r7, [r1, #24]
 8008182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008184:	2f78      	cmp	r7, #120	@ 0x78
 8008186:	4691      	mov	r9, r2
 8008188:	4680      	mov	r8, r0
 800818a:	460c      	mov	r4, r1
 800818c:	469a      	mov	sl, r3
 800818e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008192:	d807      	bhi.n	80081a4 <_printf_i+0x28>
 8008194:	2f62      	cmp	r7, #98	@ 0x62
 8008196:	d80a      	bhi.n	80081ae <_printf_i+0x32>
 8008198:	2f00      	cmp	r7, #0
 800819a:	f000 80d2 	beq.w	8008342 <_printf_i+0x1c6>
 800819e:	2f58      	cmp	r7, #88	@ 0x58
 80081a0:	f000 80b9 	beq.w	8008316 <_printf_i+0x19a>
 80081a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80081ac:	e03a      	b.n	8008224 <_printf_i+0xa8>
 80081ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80081b2:	2b15      	cmp	r3, #21
 80081b4:	d8f6      	bhi.n	80081a4 <_printf_i+0x28>
 80081b6:	a101      	add	r1, pc, #4	@ (adr r1, 80081bc <_printf_i+0x40>)
 80081b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008229 	.word	0x08008229
 80081c4:	080081a5 	.word	0x080081a5
 80081c8:	080081a5 	.word	0x080081a5
 80081cc:	080081a5 	.word	0x080081a5
 80081d0:	080081a5 	.word	0x080081a5
 80081d4:	08008229 	.word	0x08008229
 80081d8:	080081a5 	.word	0x080081a5
 80081dc:	080081a5 	.word	0x080081a5
 80081e0:	080081a5 	.word	0x080081a5
 80081e4:	080081a5 	.word	0x080081a5
 80081e8:	08008329 	.word	0x08008329
 80081ec:	08008253 	.word	0x08008253
 80081f0:	080082e3 	.word	0x080082e3
 80081f4:	080081a5 	.word	0x080081a5
 80081f8:	080081a5 	.word	0x080081a5
 80081fc:	0800834b 	.word	0x0800834b
 8008200:	080081a5 	.word	0x080081a5
 8008204:	08008253 	.word	0x08008253
 8008208:	080081a5 	.word	0x080081a5
 800820c:	080081a5 	.word	0x080081a5
 8008210:	080082eb 	.word	0x080082eb
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6032      	str	r2, [r6, #0]
 800821c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008224:	2301      	movs	r3, #1
 8008226:	e09d      	b.n	8008364 <_printf_i+0x1e8>
 8008228:	6833      	ldr	r3, [r6, #0]
 800822a:	6820      	ldr	r0, [r4, #0]
 800822c:	1d19      	adds	r1, r3, #4
 800822e:	6031      	str	r1, [r6, #0]
 8008230:	0606      	lsls	r6, r0, #24
 8008232:	d501      	bpl.n	8008238 <_printf_i+0xbc>
 8008234:	681d      	ldr	r5, [r3, #0]
 8008236:	e003      	b.n	8008240 <_printf_i+0xc4>
 8008238:	0645      	lsls	r5, r0, #25
 800823a:	d5fb      	bpl.n	8008234 <_printf_i+0xb8>
 800823c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008240:	2d00      	cmp	r5, #0
 8008242:	da03      	bge.n	800824c <_printf_i+0xd0>
 8008244:	232d      	movs	r3, #45	@ 0x2d
 8008246:	426d      	negs	r5, r5
 8008248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800824c:	4859      	ldr	r0, [pc, #356]	@ (80083b4 <_printf_i+0x238>)
 800824e:	230a      	movs	r3, #10
 8008250:	e011      	b.n	8008276 <_printf_i+0xfa>
 8008252:	6821      	ldr	r1, [r4, #0]
 8008254:	6833      	ldr	r3, [r6, #0]
 8008256:	0608      	lsls	r0, r1, #24
 8008258:	f853 5b04 	ldr.w	r5, [r3], #4
 800825c:	d402      	bmi.n	8008264 <_printf_i+0xe8>
 800825e:	0649      	lsls	r1, r1, #25
 8008260:	bf48      	it	mi
 8008262:	b2ad      	uxthmi	r5, r5
 8008264:	2f6f      	cmp	r7, #111	@ 0x6f
 8008266:	4853      	ldr	r0, [pc, #332]	@ (80083b4 <_printf_i+0x238>)
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	bf14      	ite	ne
 800826c:	230a      	movne	r3, #10
 800826e:	2308      	moveq	r3, #8
 8008270:	2100      	movs	r1, #0
 8008272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008276:	6866      	ldr	r6, [r4, #4]
 8008278:	60a6      	str	r6, [r4, #8]
 800827a:	2e00      	cmp	r6, #0
 800827c:	bfa2      	ittt	ge
 800827e:	6821      	ldrge	r1, [r4, #0]
 8008280:	f021 0104 	bicge.w	r1, r1, #4
 8008284:	6021      	strge	r1, [r4, #0]
 8008286:	b90d      	cbnz	r5, 800828c <_printf_i+0x110>
 8008288:	2e00      	cmp	r6, #0
 800828a:	d04b      	beq.n	8008324 <_printf_i+0x1a8>
 800828c:	4616      	mov	r6, r2
 800828e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008292:	fb03 5711 	mls	r7, r3, r1, r5
 8008296:	5dc7      	ldrb	r7, [r0, r7]
 8008298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800829c:	462f      	mov	r7, r5
 800829e:	42bb      	cmp	r3, r7
 80082a0:	460d      	mov	r5, r1
 80082a2:	d9f4      	bls.n	800828e <_printf_i+0x112>
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d10b      	bne.n	80082c0 <_printf_i+0x144>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	07df      	lsls	r7, r3, #31
 80082ac:	d508      	bpl.n	80082c0 <_printf_i+0x144>
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	6861      	ldr	r1, [r4, #4]
 80082b2:	4299      	cmp	r1, r3
 80082b4:	bfde      	ittt	le
 80082b6:	2330      	movle	r3, #48	@ 0x30
 80082b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082c0:	1b92      	subs	r2, r2, r6
 80082c2:	6122      	str	r2, [r4, #16]
 80082c4:	f8cd a000 	str.w	sl, [sp]
 80082c8:	464b      	mov	r3, r9
 80082ca:	aa03      	add	r2, sp, #12
 80082cc:	4621      	mov	r1, r4
 80082ce:	4640      	mov	r0, r8
 80082d0:	f7ff fee6 	bl	80080a0 <_printf_common>
 80082d4:	3001      	adds	r0, #1
 80082d6:	d14a      	bne.n	800836e <_printf_i+0x1f2>
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	b004      	add	sp, #16
 80082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	f043 0320 	orr.w	r3, r3, #32
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	4833      	ldr	r0, [pc, #204]	@ (80083b8 <_printf_i+0x23c>)
 80082ec:	2778      	movs	r7, #120	@ 0x78
 80082ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	6831      	ldr	r1, [r6, #0]
 80082f6:	061f      	lsls	r7, r3, #24
 80082f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80082fc:	d402      	bmi.n	8008304 <_printf_i+0x188>
 80082fe:	065f      	lsls	r7, r3, #25
 8008300:	bf48      	it	mi
 8008302:	b2ad      	uxthmi	r5, r5
 8008304:	6031      	str	r1, [r6, #0]
 8008306:	07d9      	lsls	r1, r3, #31
 8008308:	bf44      	itt	mi
 800830a:	f043 0320 	orrmi.w	r3, r3, #32
 800830e:	6023      	strmi	r3, [r4, #0]
 8008310:	b11d      	cbz	r5, 800831a <_printf_i+0x19e>
 8008312:	2310      	movs	r3, #16
 8008314:	e7ac      	b.n	8008270 <_printf_i+0xf4>
 8008316:	4827      	ldr	r0, [pc, #156]	@ (80083b4 <_printf_i+0x238>)
 8008318:	e7e9      	b.n	80082ee <_printf_i+0x172>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	f023 0320 	bic.w	r3, r3, #32
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	e7f6      	b.n	8008312 <_printf_i+0x196>
 8008324:	4616      	mov	r6, r2
 8008326:	e7bd      	b.n	80082a4 <_printf_i+0x128>
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	6825      	ldr	r5, [r4, #0]
 800832c:	6961      	ldr	r1, [r4, #20]
 800832e:	1d18      	adds	r0, r3, #4
 8008330:	6030      	str	r0, [r6, #0]
 8008332:	062e      	lsls	r6, r5, #24
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	d501      	bpl.n	800833c <_printf_i+0x1c0>
 8008338:	6019      	str	r1, [r3, #0]
 800833a:	e002      	b.n	8008342 <_printf_i+0x1c6>
 800833c:	0668      	lsls	r0, r5, #25
 800833e:	d5fb      	bpl.n	8008338 <_printf_i+0x1bc>
 8008340:	8019      	strh	r1, [r3, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	4616      	mov	r6, r2
 8008348:	e7bc      	b.n	80082c4 <_printf_i+0x148>
 800834a:	6833      	ldr	r3, [r6, #0]
 800834c:	1d1a      	adds	r2, r3, #4
 800834e:	6032      	str	r2, [r6, #0]
 8008350:	681e      	ldr	r6, [r3, #0]
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	2100      	movs	r1, #0
 8008356:	4630      	mov	r0, r6
 8008358:	f7f7 ff42 	bl	80001e0 <memchr>
 800835c:	b108      	cbz	r0, 8008362 <_printf_i+0x1e6>
 800835e:	1b80      	subs	r0, r0, r6
 8008360:	6060      	str	r0, [r4, #4]
 8008362:	6863      	ldr	r3, [r4, #4]
 8008364:	6123      	str	r3, [r4, #16]
 8008366:	2300      	movs	r3, #0
 8008368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800836c:	e7aa      	b.n	80082c4 <_printf_i+0x148>
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	4632      	mov	r2, r6
 8008372:	4649      	mov	r1, r9
 8008374:	4640      	mov	r0, r8
 8008376:	47d0      	blx	sl
 8008378:	3001      	adds	r0, #1
 800837a:	d0ad      	beq.n	80082d8 <_printf_i+0x15c>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	079b      	lsls	r3, r3, #30
 8008380:	d413      	bmi.n	80083aa <_printf_i+0x22e>
 8008382:	68e0      	ldr	r0, [r4, #12]
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	4298      	cmp	r0, r3
 8008388:	bfb8      	it	lt
 800838a:	4618      	movlt	r0, r3
 800838c:	e7a6      	b.n	80082dc <_printf_i+0x160>
 800838e:	2301      	movs	r3, #1
 8008390:	4632      	mov	r2, r6
 8008392:	4649      	mov	r1, r9
 8008394:	4640      	mov	r0, r8
 8008396:	47d0      	blx	sl
 8008398:	3001      	adds	r0, #1
 800839a:	d09d      	beq.n	80082d8 <_printf_i+0x15c>
 800839c:	3501      	adds	r5, #1
 800839e:	68e3      	ldr	r3, [r4, #12]
 80083a0:	9903      	ldr	r1, [sp, #12]
 80083a2:	1a5b      	subs	r3, r3, r1
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	dcf2      	bgt.n	800838e <_printf_i+0x212>
 80083a8:	e7eb      	b.n	8008382 <_printf_i+0x206>
 80083aa:	2500      	movs	r5, #0
 80083ac:	f104 0619 	add.w	r6, r4, #25
 80083b0:	e7f5      	b.n	800839e <_printf_i+0x222>
 80083b2:	bf00      	nop
 80083b4:	0800c2f2 	.word	0x0800c2f2
 80083b8:	0800c303 	.word	0x0800c303

080083bc <_scanf_float>:
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c0:	b087      	sub	sp, #28
 80083c2:	4617      	mov	r7, r2
 80083c4:	9303      	str	r3, [sp, #12]
 80083c6:	688b      	ldr	r3, [r1, #8]
 80083c8:	1e5a      	subs	r2, r3, #1
 80083ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80083ce:	bf81      	itttt	hi
 80083d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80083d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80083d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80083dc:	608b      	strhi	r3, [r1, #8]
 80083de:	680b      	ldr	r3, [r1, #0]
 80083e0:	460a      	mov	r2, r1
 80083e2:	f04f 0500 	mov.w	r5, #0
 80083e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80083ea:	f842 3b1c 	str.w	r3, [r2], #28
 80083ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083f2:	4680      	mov	r8, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	bf98      	it	ls
 80083f8:	f04f 0b00 	movls.w	fp, #0
 80083fc:	9201      	str	r2, [sp, #4]
 80083fe:	4616      	mov	r6, r2
 8008400:	46aa      	mov	sl, r5
 8008402:	46a9      	mov	r9, r5
 8008404:	9502      	str	r5, [sp, #8]
 8008406:	68a2      	ldr	r2, [r4, #8]
 8008408:	b152      	cbz	r2, 8008420 <_scanf_float+0x64>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008410:	d864      	bhi.n	80084dc <_scanf_float+0x120>
 8008412:	2b40      	cmp	r3, #64	@ 0x40
 8008414:	d83c      	bhi.n	8008490 <_scanf_float+0xd4>
 8008416:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800841a:	b2c8      	uxtb	r0, r1
 800841c:	280e      	cmp	r0, #14
 800841e:	d93a      	bls.n	8008496 <_scanf_float+0xda>
 8008420:	f1b9 0f00 	cmp.w	r9, #0
 8008424:	d003      	beq.n	800842e <_scanf_float+0x72>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008432:	f1ba 0f01 	cmp.w	sl, #1
 8008436:	f200 8117 	bhi.w	8008668 <_scanf_float+0x2ac>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	429e      	cmp	r6, r3
 800843e:	f200 8108 	bhi.w	8008652 <_scanf_float+0x296>
 8008442:	2001      	movs	r0, #1
 8008444:	b007      	add	sp, #28
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800844e:	2a0d      	cmp	r2, #13
 8008450:	d8e6      	bhi.n	8008420 <_scanf_float+0x64>
 8008452:	a101      	add	r1, pc, #4	@ (adr r1, 8008458 <_scanf_float+0x9c>)
 8008454:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008458:	0800859f 	.word	0x0800859f
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	08008421 	.word	0x08008421
 8008468:	080085ff 	.word	0x080085ff
 800846c:	080085d7 	.word	0x080085d7
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085ad 	.word	0x080085ad
 800847c:	08008421 	.word	0x08008421
 8008480:	08008421 	.word	0x08008421
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	08008565 	.word	0x08008565
 8008490:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008494:	e7db      	b.n	800844e <_scanf_float+0x92>
 8008496:	290e      	cmp	r1, #14
 8008498:	d8c2      	bhi.n	8008420 <_scanf_float+0x64>
 800849a:	a001      	add	r0, pc, #4	@ (adr r0, 80084a0 <_scanf_float+0xe4>)
 800849c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084a0:	08008555 	.word	0x08008555
 80084a4:	08008421 	.word	0x08008421
 80084a8:	08008555 	.word	0x08008555
 80084ac:	080085eb 	.word	0x080085eb
 80084b0:	08008421 	.word	0x08008421
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	0800853b 	.word	0x0800853b
 80084bc:	0800853b 	.word	0x0800853b
 80084c0:	0800853b 	.word	0x0800853b
 80084c4:	0800853b 	.word	0x0800853b
 80084c8:	0800853b 	.word	0x0800853b
 80084cc:	0800853b 	.word	0x0800853b
 80084d0:	0800853b 	.word	0x0800853b
 80084d4:	0800853b 	.word	0x0800853b
 80084d8:	0800853b 	.word	0x0800853b
 80084dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80084de:	d809      	bhi.n	80084f4 <_scanf_float+0x138>
 80084e0:	2b60      	cmp	r3, #96	@ 0x60
 80084e2:	d8b2      	bhi.n	800844a <_scanf_float+0x8e>
 80084e4:	2b54      	cmp	r3, #84	@ 0x54
 80084e6:	d07b      	beq.n	80085e0 <_scanf_float+0x224>
 80084e8:	2b59      	cmp	r3, #89	@ 0x59
 80084ea:	d199      	bne.n	8008420 <_scanf_float+0x64>
 80084ec:	2d07      	cmp	r5, #7
 80084ee:	d197      	bne.n	8008420 <_scanf_float+0x64>
 80084f0:	2508      	movs	r5, #8
 80084f2:	e02c      	b.n	800854e <_scanf_float+0x192>
 80084f4:	2b74      	cmp	r3, #116	@ 0x74
 80084f6:	d073      	beq.n	80085e0 <_scanf_float+0x224>
 80084f8:	2b79      	cmp	r3, #121	@ 0x79
 80084fa:	e7f6      	b.n	80084ea <_scanf_float+0x12e>
 80084fc:	6821      	ldr	r1, [r4, #0]
 80084fe:	05c8      	lsls	r0, r1, #23
 8008500:	d51b      	bpl.n	800853a <_scanf_float+0x17e>
 8008502:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008506:	6021      	str	r1, [r4, #0]
 8008508:	f109 0901 	add.w	r9, r9, #1
 800850c:	f1bb 0f00 	cmp.w	fp, #0
 8008510:	d003      	beq.n	800851a <_scanf_float+0x15e>
 8008512:	3201      	adds	r2, #1
 8008514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008518:	60a2      	str	r2, [r4, #8]
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	3b01      	subs	r3, #1
 800851e:	60a3      	str	r3, [r4, #8]
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	3301      	adds	r3, #1
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3b01      	subs	r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	607b      	str	r3, [r7, #4]
 800852e:	f340 8087 	ble.w	8008640 <_scanf_float+0x284>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	e765      	b.n	8008406 <_scanf_float+0x4a>
 800853a:	eb1a 0105 	adds.w	r1, sl, r5
 800853e:	f47f af6f 	bne.w	8008420 <_scanf_float+0x64>
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008548:	6022      	str	r2, [r4, #0]
 800854a:	460d      	mov	r5, r1
 800854c:	468a      	mov	sl, r1
 800854e:	f806 3b01 	strb.w	r3, [r6], #1
 8008552:	e7e2      	b.n	800851a <_scanf_float+0x15e>
 8008554:	6822      	ldr	r2, [r4, #0]
 8008556:	0610      	lsls	r0, r2, #24
 8008558:	f57f af62 	bpl.w	8008420 <_scanf_float+0x64>
 800855c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008560:	6022      	str	r2, [r4, #0]
 8008562:	e7f4      	b.n	800854e <_scanf_float+0x192>
 8008564:	f1ba 0f00 	cmp.w	sl, #0
 8008568:	d10e      	bne.n	8008588 <_scanf_float+0x1cc>
 800856a:	f1b9 0f00 	cmp.w	r9, #0
 800856e:	d10e      	bne.n	800858e <_scanf_float+0x1d2>
 8008570:	6822      	ldr	r2, [r4, #0]
 8008572:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008576:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800857a:	d108      	bne.n	800858e <_scanf_float+0x1d2>
 800857c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008580:	6022      	str	r2, [r4, #0]
 8008582:	f04f 0a01 	mov.w	sl, #1
 8008586:	e7e2      	b.n	800854e <_scanf_float+0x192>
 8008588:	f1ba 0f02 	cmp.w	sl, #2
 800858c:	d055      	beq.n	800863a <_scanf_float+0x27e>
 800858e:	2d01      	cmp	r5, #1
 8008590:	d002      	beq.n	8008598 <_scanf_float+0x1dc>
 8008592:	2d04      	cmp	r5, #4
 8008594:	f47f af44 	bne.w	8008420 <_scanf_float+0x64>
 8008598:	3501      	adds	r5, #1
 800859a:	b2ed      	uxtb	r5, r5
 800859c:	e7d7      	b.n	800854e <_scanf_float+0x192>
 800859e:	f1ba 0f01 	cmp.w	sl, #1
 80085a2:	f47f af3d 	bne.w	8008420 <_scanf_float+0x64>
 80085a6:	f04f 0a02 	mov.w	sl, #2
 80085aa:	e7d0      	b.n	800854e <_scanf_float+0x192>
 80085ac:	b97d      	cbnz	r5, 80085ce <_scanf_float+0x212>
 80085ae:	f1b9 0f00 	cmp.w	r9, #0
 80085b2:	f47f af38 	bne.w	8008426 <_scanf_float+0x6a>
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80085bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80085c0:	f040 8108 	bne.w	80087d4 <_scanf_float+0x418>
 80085c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085c8:	6022      	str	r2, [r4, #0]
 80085ca:	2501      	movs	r5, #1
 80085cc:	e7bf      	b.n	800854e <_scanf_float+0x192>
 80085ce:	2d03      	cmp	r5, #3
 80085d0:	d0e2      	beq.n	8008598 <_scanf_float+0x1dc>
 80085d2:	2d05      	cmp	r5, #5
 80085d4:	e7de      	b.n	8008594 <_scanf_float+0x1d8>
 80085d6:	2d02      	cmp	r5, #2
 80085d8:	f47f af22 	bne.w	8008420 <_scanf_float+0x64>
 80085dc:	2503      	movs	r5, #3
 80085de:	e7b6      	b.n	800854e <_scanf_float+0x192>
 80085e0:	2d06      	cmp	r5, #6
 80085e2:	f47f af1d 	bne.w	8008420 <_scanf_float+0x64>
 80085e6:	2507      	movs	r5, #7
 80085e8:	e7b1      	b.n	800854e <_scanf_float+0x192>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	0591      	lsls	r1, r2, #22
 80085ee:	f57f af17 	bpl.w	8008420 <_scanf_float+0x64>
 80085f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80085f6:	6022      	str	r2, [r4, #0]
 80085f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80085fc:	e7a7      	b.n	800854e <_scanf_float+0x192>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008604:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008608:	d006      	beq.n	8008618 <_scanf_float+0x25c>
 800860a:	0550      	lsls	r0, r2, #21
 800860c:	f57f af08 	bpl.w	8008420 <_scanf_float+0x64>
 8008610:	f1b9 0f00 	cmp.w	r9, #0
 8008614:	f000 80de 	beq.w	80087d4 <_scanf_float+0x418>
 8008618:	0591      	lsls	r1, r2, #22
 800861a:	bf58      	it	pl
 800861c:	9902      	ldrpl	r1, [sp, #8]
 800861e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008622:	bf58      	it	pl
 8008624:	eba9 0101 	subpl.w	r1, r9, r1
 8008628:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800862c:	bf58      	it	pl
 800862e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008632:	6022      	str	r2, [r4, #0]
 8008634:	f04f 0900 	mov.w	r9, #0
 8008638:	e789      	b.n	800854e <_scanf_float+0x192>
 800863a:	f04f 0a03 	mov.w	sl, #3
 800863e:	e786      	b.n	800854e <_scanf_float+0x192>
 8008640:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008644:	4639      	mov	r1, r7
 8008646:	4640      	mov	r0, r8
 8008648:	4798      	blx	r3
 800864a:	2800      	cmp	r0, #0
 800864c:	f43f aedb 	beq.w	8008406 <_scanf_float+0x4a>
 8008650:	e6e6      	b.n	8008420 <_scanf_float+0x64>
 8008652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800865a:	463a      	mov	r2, r7
 800865c:	4640      	mov	r0, r8
 800865e:	4798      	blx	r3
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	3b01      	subs	r3, #1
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	e6e8      	b.n	800843a <_scanf_float+0x7e>
 8008668:	1e6b      	subs	r3, r5, #1
 800866a:	2b06      	cmp	r3, #6
 800866c:	d824      	bhi.n	80086b8 <_scanf_float+0x2fc>
 800866e:	2d02      	cmp	r5, #2
 8008670:	d836      	bhi.n	80086e0 <_scanf_float+0x324>
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	429e      	cmp	r6, r3
 8008676:	f67f aee4 	bls.w	8008442 <_scanf_float+0x86>
 800867a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800867e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008682:	463a      	mov	r2, r7
 8008684:	4640      	mov	r0, r8
 8008686:	4798      	blx	r3
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	3b01      	subs	r3, #1
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	e7f0      	b.n	8008672 <_scanf_float+0x2b6>
 8008690:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008694:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008698:	463a      	mov	r2, r7
 800869a:	4640      	mov	r0, r8
 800869c:	4798      	blx	r3
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	6123      	str	r3, [r4, #16]
 80086a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a8:	fa5f fa8a 	uxtb.w	sl, sl
 80086ac:	f1ba 0f02 	cmp.w	sl, #2
 80086b0:	d1ee      	bne.n	8008690 <_scanf_float+0x2d4>
 80086b2:	3d03      	subs	r5, #3
 80086b4:	b2ed      	uxtb	r5, r5
 80086b6:	1b76      	subs	r6, r6, r5
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	05da      	lsls	r2, r3, #23
 80086bc:	d530      	bpl.n	8008720 <_scanf_float+0x364>
 80086be:	055b      	lsls	r3, r3, #21
 80086c0:	d511      	bpl.n	80086e6 <_scanf_float+0x32a>
 80086c2:	9b01      	ldr	r3, [sp, #4]
 80086c4:	429e      	cmp	r6, r3
 80086c6:	f67f aebc 	bls.w	8008442 <_scanf_float+0x86>
 80086ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086d2:	463a      	mov	r2, r7
 80086d4:	4640      	mov	r0, r8
 80086d6:	4798      	blx	r3
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	3b01      	subs	r3, #1
 80086dc:	6123      	str	r3, [r4, #16]
 80086de:	e7f0      	b.n	80086c2 <_scanf_float+0x306>
 80086e0:	46aa      	mov	sl, r5
 80086e2:	46b3      	mov	fp, r6
 80086e4:	e7de      	b.n	80086a4 <_scanf_float+0x2e8>
 80086e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	2965      	cmp	r1, #101	@ 0x65
 80086ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80086f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	d00c      	beq.n	8008714 <_scanf_float+0x358>
 80086fa:	2945      	cmp	r1, #69	@ 0x45
 80086fc:	d00a      	beq.n	8008714 <_scanf_float+0x358>
 80086fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008702:	463a      	mov	r2, r7
 8008704:	4640      	mov	r0, r8
 8008706:	4798      	blx	r3
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800870e:	3b01      	subs	r3, #1
 8008710:	1eb5      	subs	r5, r6, #2
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008718:	463a      	mov	r2, r7
 800871a:	4640      	mov	r0, r8
 800871c:	4798      	blx	r3
 800871e:	462e      	mov	r6, r5
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	f012 0210 	ands.w	r2, r2, #16
 8008726:	d001      	beq.n	800872c <_scanf_float+0x370>
 8008728:	2000      	movs	r0, #0
 800872a:	e68b      	b.n	8008444 <_scanf_float+0x88>
 800872c:	7032      	strb	r2, [r6, #0]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008738:	d11c      	bne.n	8008774 <_scanf_float+0x3b8>
 800873a:	9b02      	ldr	r3, [sp, #8]
 800873c:	454b      	cmp	r3, r9
 800873e:	eba3 0209 	sub.w	r2, r3, r9
 8008742:	d123      	bne.n	800878c <_scanf_float+0x3d0>
 8008744:	9901      	ldr	r1, [sp, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	4640      	mov	r0, r8
 800874a:	f002 fc2d 	bl	800afa8 <_strtod_r>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	6821      	ldr	r1, [r4, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f011 0f02 	tst.w	r1, #2
 8008758:	ec57 6b10 	vmov	r6, r7, d0
 800875c:	f103 0204 	add.w	r2, r3, #4
 8008760:	d01f      	beq.n	80087a2 <_scanf_float+0x3e6>
 8008762:	9903      	ldr	r1, [sp, #12]
 8008764:	600a      	str	r2, [r1, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	e9c3 6700 	strd	r6, r7, [r3]
 800876c:	68e3      	ldr	r3, [r4, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60e3      	str	r3, [r4, #12]
 8008772:	e7d9      	b.n	8008728 <_scanf_float+0x36c>
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0e4      	beq.n	8008744 <_scanf_float+0x388>
 800877a:	9905      	ldr	r1, [sp, #20]
 800877c:	230a      	movs	r3, #10
 800877e:	3101      	adds	r1, #1
 8008780:	4640      	mov	r0, r8
 8008782:	f002 fc91 	bl	800b0a8 <_strtol_r>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	9e05      	ldr	r6, [sp, #20]
 800878a:	1ac2      	subs	r2, r0, r3
 800878c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008790:	429e      	cmp	r6, r3
 8008792:	bf28      	it	cs
 8008794:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008798:	4910      	ldr	r1, [pc, #64]	@ (80087dc <_scanf_float+0x420>)
 800879a:	4630      	mov	r0, r6
 800879c:	f000 f918 	bl	80089d0 <siprintf>
 80087a0:	e7d0      	b.n	8008744 <_scanf_float+0x388>
 80087a2:	f011 0f04 	tst.w	r1, #4
 80087a6:	9903      	ldr	r1, [sp, #12]
 80087a8:	600a      	str	r2, [r1, #0]
 80087aa:	d1dc      	bne.n	8008766 <_scanf_float+0x3aa>
 80087ac:	681d      	ldr	r5, [r3, #0]
 80087ae:	4632      	mov	r2, r6
 80087b0:	463b      	mov	r3, r7
 80087b2:	4630      	mov	r0, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	f7f8 f9c1 	bl	8000b3c <__aeabi_dcmpun>
 80087ba:	b128      	cbz	r0, 80087c8 <_scanf_float+0x40c>
 80087bc:	4808      	ldr	r0, [pc, #32]	@ (80087e0 <_scanf_float+0x424>)
 80087be:	f000 f9eb 	bl	8008b98 <nanf>
 80087c2:	ed85 0a00 	vstr	s0, [r5]
 80087c6:	e7d1      	b.n	800876c <_scanf_float+0x3b0>
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 fa14 	bl	8000bf8 <__aeabi_d2f>
 80087d0:	6028      	str	r0, [r5, #0]
 80087d2:	e7cb      	b.n	800876c <_scanf_float+0x3b0>
 80087d4:	f04f 0900 	mov.w	r9, #0
 80087d8:	e629      	b.n	800842e <_scanf_float+0x72>
 80087da:	bf00      	nop
 80087dc:	0800c314 	.word	0x0800c314
 80087e0:	0800c6ad 	.word	0x0800c6ad

080087e4 <std>:
 80087e4:	2300      	movs	r3, #0
 80087e6:	b510      	push	{r4, lr}
 80087e8:	4604      	mov	r4, r0
 80087ea:	e9c0 3300 	strd	r3, r3, [r0]
 80087ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087f2:	6083      	str	r3, [r0, #8]
 80087f4:	8181      	strh	r1, [r0, #12]
 80087f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80087f8:	81c2      	strh	r2, [r0, #14]
 80087fa:	6183      	str	r3, [r0, #24]
 80087fc:	4619      	mov	r1, r3
 80087fe:	2208      	movs	r2, #8
 8008800:	305c      	adds	r0, #92	@ 0x5c
 8008802:	f000 f948 	bl	8008a96 <memset>
 8008806:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <std+0x58>)
 8008808:	6263      	str	r3, [r4, #36]	@ 0x24
 800880a:	4b0d      	ldr	r3, [pc, #52]	@ (8008840 <std+0x5c>)
 800880c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800880e:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <std+0x60>)
 8008810:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <std+0x64>)
 8008814:	6323      	str	r3, [r4, #48]	@ 0x30
 8008816:	4b0d      	ldr	r3, [pc, #52]	@ (800884c <std+0x68>)
 8008818:	6224      	str	r4, [r4, #32]
 800881a:	429c      	cmp	r4, r3
 800881c:	d006      	beq.n	800882c <std+0x48>
 800881e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008822:	4294      	cmp	r4, r2
 8008824:	d002      	beq.n	800882c <std+0x48>
 8008826:	33d0      	adds	r3, #208	@ 0xd0
 8008828:	429c      	cmp	r4, r3
 800882a:	d105      	bne.n	8008838 <std+0x54>
 800882c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008834:	f000 b9ac 	b.w	8008b90 <__retarget_lock_init_recursive>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	bf00      	nop
 800883c:	08008a11 	.word	0x08008a11
 8008840:	08008a33 	.word	0x08008a33
 8008844:	08008a6b 	.word	0x08008a6b
 8008848:	08008a8f 	.word	0x08008a8f
 800884c:	20001eec 	.word	0x20001eec

08008850 <stdio_exit_handler>:
 8008850:	4a02      	ldr	r2, [pc, #8]	@ (800885c <stdio_exit_handler+0xc>)
 8008852:	4903      	ldr	r1, [pc, #12]	@ (8008860 <stdio_exit_handler+0x10>)
 8008854:	4803      	ldr	r0, [pc, #12]	@ (8008864 <stdio_exit_handler+0x14>)
 8008856:	f000 b869 	b.w	800892c <_fwalk_sglue>
 800885a:	bf00      	nop
 800885c:	200000fc 	.word	0x200000fc
 8008860:	0800b465 	.word	0x0800b465
 8008864:	2000010c 	.word	0x2000010c

08008868 <cleanup_stdio>:
 8008868:	6841      	ldr	r1, [r0, #4]
 800886a:	4b0c      	ldr	r3, [pc, #48]	@ (800889c <cleanup_stdio+0x34>)
 800886c:	4299      	cmp	r1, r3
 800886e:	b510      	push	{r4, lr}
 8008870:	4604      	mov	r4, r0
 8008872:	d001      	beq.n	8008878 <cleanup_stdio+0x10>
 8008874:	f002 fdf6 	bl	800b464 <_fflush_r>
 8008878:	68a1      	ldr	r1, [r4, #8]
 800887a:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <cleanup_stdio+0x38>)
 800887c:	4299      	cmp	r1, r3
 800887e:	d002      	beq.n	8008886 <cleanup_stdio+0x1e>
 8008880:	4620      	mov	r0, r4
 8008882:	f002 fdef 	bl	800b464 <_fflush_r>
 8008886:	68e1      	ldr	r1, [r4, #12]
 8008888:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <cleanup_stdio+0x3c>)
 800888a:	4299      	cmp	r1, r3
 800888c:	d004      	beq.n	8008898 <cleanup_stdio+0x30>
 800888e:	4620      	mov	r0, r4
 8008890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008894:	f002 bde6 	b.w	800b464 <_fflush_r>
 8008898:	bd10      	pop	{r4, pc}
 800889a:	bf00      	nop
 800889c:	20001eec 	.word	0x20001eec
 80088a0:	20001f54 	.word	0x20001f54
 80088a4:	20001fbc 	.word	0x20001fbc

080088a8 <global_stdio_init.part.0>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <global_stdio_init.part.0+0x30>)
 80088ac:	4c0b      	ldr	r4, [pc, #44]	@ (80088dc <global_stdio_init.part.0+0x34>)
 80088ae:	4a0c      	ldr	r2, [pc, #48]	@ (80088e0 <global_stdio_init.part.0+0x38>)
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	4620      	mov	r0, r4
 80088b4:	2200      	movs	r2, #0
 80088b6:	2104      	movs	r1, #4
 80088b8:	f7ff ff94 	bl	80087e4 <std>
 80088bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088c0:	2201      	movs	r2, #1
 80088c2:	2109      	movs	r1, #9
 80088c4:	f7ff ff8e 	bl	80087e4 <std>
 80088c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088cc:	2202      	movs	r2, #2
 80088ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d2:	2112      	movs	r1, #18
 80088d4:	f7ff bf86 	b.w	80087e4 <std>
 80088d8:	20002024 	.word	0x20002024
 80088dc:	20001eec 	.word	0x20001eec
 80088e0:	08008851 	.word	0x08008851

080088e4 <__sfp_lock_acquire>:
 80088e4:	4801      	ldr	r0, [pc, #4]	@ (80088ec <__sfp_lock_acquire+0x8>)
 80088e6:	f000 b954 	b.w	8008b92 <__retarget_lock_acquire_recursive>
 80088ea:	bf00      	nop
 80088ec:	2000202d 	.word	0x2000202d

080088f0 <__sfp_lock_release>:
 80088f0:	4801      	ldr	r0, [pc, #4]	@ (80088f8 <__sfp_lock_release+0x8>)
 80088f2:	f000 b94f 	b.w	8008b94 <__retarget_lock_release_recursive>
 80088f6:	bf00      	nop
 80088f8:	2000202d 	.word	0x2000202d

080088fc <__sinit>:
 80088fc:	b510      	push	{r4, lr}
 80088fe:	4604      	mov	r4, r0
 8008900:	f7ff fff0 	bl	80088e4 <__sfp_lock_acquire>
 8008904:	6a23      	ldr	r3, [r4, #32]
 8008906:	b11b      	cbz	r3, 8008910 <__sinit+0x14>
 8008908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800890c:	f7ff bff0 	b.w	80088f0 <__sfp_lock_release>
 8008910:	4b04      	ldr	r3, [pc, #16]	@ (8008924 <__sinit+0x28>)
 8008912:	6223      	str	r3, [r4, #32]
 8008914:	4b04      	ldr	r3, [pc, #16]	@ (8008928 <__sinit+0x2c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f5      	bne.n	8008908 <__sinit+0xc>
 800891c:	f7ff ffc4 	bl	80088a8 <global_stdio_init.part.0>
 8008920:	e7f2      	b.n	8008908 <__sinit+0xc>
 8008922:	bf00      	nop
 8008924:	08008869 	.word	0x08008869
 8008928:	20002024 	.word	0x20002024

0800892c <_fwalk_sglue>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	4607      	mov	r7, r0
 8008932:	4688      	mov	r8, r1
 8008934:	4614      	mov	r4, r2
 8008936:	2600      	movs	r6, #0
 8008938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800893c:	f1b9 0901 	subs.w	r9, r9, #1
 8008940:	d505      	bpl.n	800894e <_fwalk_sglue+0x22>
 8008942:	6824      	ldr	r4, [r4, #0]
 8008944:	2c00      	cmp	r4, #0
 8008946:	d1f7      	bne.n	8008938 <_fwalk_sglue+0xc>
 8008948:	4630      	mov	r0, r6
 800894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d907      	bls.n	8008964 <_fwalk_sglue+0x38>
 8008954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008958:	3301      	adds	r3, #1
 800895a:	d003      	beq.n	8008964 <_fwalk_sglue+0x38>
 800895c:	4629      	mov	r1, r5
 800895e:	4638      	mov	r0, r7
 8008960:	47c0      	blx	r8
 8008962:	4306      	orrs	r6, r0
 8008964:	3568      	adds	r5, #104	@ 0x68
 8008966:	e7e9      	b.n	800893c <_fwalk_sglue+0x10>

08008968 <sniprintf>:
 8008968:	b40c      	push	{r2, r3}
 800896a:	b530      	push	{r4, r5, lr}
 800896c:	4b17      	ldr	r3, [pc, #92]	@ (80089cc <sniprintf+0x64>)
 800896e:	1e0c      	subs	r4, r1, #0
 8008970:	681d      	ldr	r5, [r3, #0]
 8008972:	b09d      	sub	sp, #116	@ 0x74
 8008974:	da08      	bge.n	8008988 <sniprintf+0x20>
 8008976:	238b      	movs	r3, #139	@ 0x8b
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	f04f 30ff 	mov.w	r0, #4294967295
 800897e:	b01d      	add	sp, #116	@ 0x74
 8008980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008984:	b002      	add	sp, #8
 8008986:	4770      	bx	lr
 8008988:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800898c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008990:	bf14      	ite	ne
 8008992:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008996:	4623      	moveq	r3, r4
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	9307      	str	r3, [sp, #28]
 800899c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089a0:	9002      	str	r0, [sp, #8]
 80089a2:	9006      	str	r0, [sp, #24]
 80089a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089aa:	ab21      	add	r3, sp, #132	@ 0x84
 80089ac:	a902      	add	r1, sp, #8
 80089ae:	4628      	mov	r0, r5
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	f002 fbd7 	bl	800b164 <_svfiprintf_r>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	bfbc      	itt	lt
 80089ba:	238b      	movlt	r3, #139	@ 0x8b
 80089bc:	602b      	strlt	r3, [r5, #0]
 80089be:	2c00      	cmp	r4, #0
 80089c0:	d0dd      	beq.n	800897e <sniprintf+0x16>
 80089c2:	9b02      	ldr	r3, [sp, #8]
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
 80089c8:	e7d9      	b.n	800897e <sniprintf+0x16>
 80089ca:	bf00      	nop
 80089cc:	20000108 	.word	0x20000108

080089d0 <siprintf>:
 80089d0:	b40e      	push	{r1, r2, r3}
 80089d2:	b500      	push	{lr}
 80089d4:	b09c      	sub	sp, #112	@ 0x70
 80089d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80089d8:	9002      	str	r0, [sp, #8]
 80089da:	9006      	str	r0, [sp, #24]
 80089dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089e0:	4809      	ldr	r0, [pc, #36]	@ (8008a08 <siprintf+0x38>)
 80089e2:	9107      	str	r1, [sp, #28]
 80089e4:	9104      	str	r1, [sp, #16]
 80089e6:	4909      	ldr	r1, [pc, #36]	@ (8008a0c <siprintf+0x3c>)
 80089e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ec:	9105      	str	r1, [sp, #20]
 80089ee:	6800      	ldr	r0, [r0, #0]
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	a902      	add	r1, sp, #8
 80089f4:	f002 fbb6 	bl	800b164 <_svfiprintf_r>
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	b01c      	add	sp, #112	@ 0x70
 8008a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a04:	b003      	add	sp, #12
 8008a06:	4770      	bx	lr
 8008a08:	20000108 	.word	0x20000108
 8008a0c:	ffff0208 	.word	0xffff0208

08008a10 <__sread>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	460c      	mov	r4, r1
 8008a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a18:	f000 f86c 	bl	8008af4 <_read_r>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	bfab      	itete	ge
 8008a20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a22:	89a3      	ldrhlt	r3, [r4, #12]
 8008a24:	181b      	addge	r3, r3, r0
 8008a26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a2a:	bfac      	ite	ge
 8008a2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a2e:	81a3      	strhlt	r3, [r4, #12]
 8008a30:	bd10      	pop	{r4, pc}

08008a32 <__swrite>:
 8008a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a36:	461f      	mov	r7, r3
 8008a38:	898b      	ldrh	r3, [r1, #12]
 8008a3a:	05db      	lsls	r3, r3, #23
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	4616      	mov	r6, r2
 8008a42:	d505      	bpl.n	8008a50 <__swrite+0x1e>
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	2302      	movs	r3, #2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f000 f840 	bl	8008ad0 <_lseek_r>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	463b      	mov	r3, r7
 8008a60:	4628      	mov	r0, r5
 8008a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	f000 b857 	b.w	8008b18 <_write_r>

08008a6a <__sseek>:
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 f82d 	bl	8008ad0 <_lseek_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	bf15      	itete	ne
 8008a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a86:	81a3      	strheq	r3, [r4, #12]
 8008a88:	bf18      	it	ne
 8008a8a:	81a3      	strhne	r3, [r4, #12]
 8008a8c:	bd10      	pop	{r4, pc}

08008a8e <__sclose>:
 8008a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a92:	f000 b80d 	b.w	8008ab0 <_close_r>

08008a96 <memset>:
 8008a96:	4402      	add	r2, r0
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d100      	bne.n	8008aa0 <memset+0xa>
 8008a9e:	4770      	bx	lr
 8008aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa4:	e7f9      	b.n	8008a9a <memset+0x4>
	...

08008aa8 <_localeconv_r>:
 8008aa8:	4800      	ldr	r0, [pc, #0]	@ (8008aac <_localeconv_r+0x4>)
 8008aaa:	4770      	bx	lr
 8008aac:	20000248 	.word	0x20000248

08008ab0 <_close_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	@ (8008acc <_close_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f8 fd6c 	bl	8001598 <_close>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_close_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_close_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20002028 	.word	0x20002028

08008ad0 <_lseek_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	@ (8008af0 <_lseek_r+0x20>)
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7f8 fd81 	bl	80015e6 <_lseek>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_lseek_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_lseek_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20002028 	.word	0x20002028

08008af4 <_read_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	@ (8008b14 <_read_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f8 fd0f 	bl	8001526 <_read>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_read_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_read_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20002028 	.word	0x20002028

08008b18 <_write_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_write_r+0x20>)
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7f8 fd1a 	bl	8001560 <_write>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_write_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_write_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20002028 	.word	0x20002028

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	@ (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000108 	.word	0x20000108

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b80 <__libc_init_array+0x38>)
 8008b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b84 <__libc_init_array+0x3c>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	2600      	movs	r6, #0
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	4d0b      	ldr	r5, [pc, #44]	@ (8008b88 <__libc_init_array+0x40>)
 8008b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b8c <__libc_init_array+0x44>)
 8008b5c:	f003 fb72 	bl	800c244 <_init>
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	2600      	movs	r6, #0
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	0800c718 	.word	0x0800c718
 8008b84:	0800c718 	.word	0x0800c718
 8008b88:	0800c718 	.word	0x0800c718
 8008b8c:	0800c71c 	.word	0x0800c71c

08008b90 <__retarget_lock_init_recursive>:
 8008b90:	4770      	bx	lr

08008b92 <__retarget_lock_acquire_recursive>:
 8008b92:	4770      	bx	lr

08008b94 <__retarget_lock_release_recursive>:
 8008b94:	4770      	bx	lr
	...

08008b98 <nanf>:
 8008b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ba0 <nanf+0x8>
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	7fc00000 	.word	0x7fc00000

08008ba4 <quorem>:
 8008ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	6903      	ldr	r3, [r0, #16]
 8008baa:	690c      	ldr	r4, [r1, #16]
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	4607      	mov	r7, r0
 8008bb0:	db7e      	blt.n	8008cb0 <quorem+0x10c>
 8008bb2:	3c01      	subs	r4, #1
 8008bb4:	f101 0814 	add.w	r8, r1, #20
 8008bb8:	00a3      	lsls	r3, r4, #2
 8008bba:	f100 0514 	add.w	r5, r0, #20
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bda:	d32e      	bcc.n	8008c3a <quorem+0x96>
 8008bdc:	f04f 0a00 	mov.w	sl, #0
 8008be0:	46c4      	mov	ip, r8
 8008be2:	46ae      	mov	lr, r5
 8008be4:	46d3      	mov	fp, sl
 8008be6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bea:	b298      	uxth	r0, r3
 8008bec:	fb06 a000 	mla	r0, r6, r0, sl
 8008bf0:	0c02      	lsrs	r2, r0, #16
 8008bf2:	0c1b      	lsrs	r3, r3, #16
 8008bf4:	fb06 2303 	mla	r3, r6, r3, r2
 8008bf8:	f8de 2000 	ldr.w	r2, [lr]
 8008bfc:	b280      	uxth	r0, r0
 8008bfe:	b292      	uxth	r2, r2
 8008c00:	1a12      	subs	r2, r2, r0
 8008c02:	445a      	add	r2, fp
 8008c04:	f8de 0000 	ldr.w	r0, [lr]
 8008c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c16:	b292      	uxth	r2, r2
 8008c18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c1c:	45e1      	cmp	r9, ip
 8008c1e:	f84e 2b04 	str.w	r2, [lr], #4
 8008c22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c26:	d2de      	bcs.n	8008be6 <quorem+0x42>
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	58eb      	ldr	r3, [r5, r3]
 8008c2c:	b92b      	cbnz	r3, 8008c3a <quorem+0x96>
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	3b04      	subs	r3, #4
 8008c32:	429d      	cmp	r5, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	d32f      	bcc.n	8008c98 <quorem+0xf4>
 8008c38:	613c      	str	r4, [r7, #16]
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f001 f9c4 	bl	8009fc8 <__mcmp>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	db25      	blt.n	8008c90 <quorem+0xec>
 8008c44:	4629      	mov	r1, r5
 8008c46:	2000      	movs	r0, #0
 8008c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c4c:	f8d1 c000 	ldr.w	ip, [r1]
 8008c50:	fa1f fe82 	uxth.w	lr, r2
 8008c54:	fa1f f38c 	uxth.w	r3, ip
 8008c58:	eba3 030e 	sub.w	r3, r3, lr
 8008c5c:	4403      	add	r3, r0
 8008c5e:	0c12      	lsrs	r2, r2, #16
 8008c60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c6e:	45c1      	cmp	r9, r8
 8008c70:	f841 3b04 	str.w	r3, [r1], #4
 8008c74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c78:	d2e6      	bcs.n	8008c48 <quorem+0xa4>
 8008c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c82:	b922      	cbnz	r2, 8008c8e <quorem+0xea>
 8008c84:	3b04      	subs	r3, #4
 8008c86:	429d      	cmp	r5, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	d30b      	bcc.n	8008ca4 <quorem+0x100>
 8008c8c:	613c      	str	r4, [r7, #16]
 8008c8e:	3601      	adds	r6, #1
 8008c90:	4630      	mov	r0, r6
 8008c92:	b003      	add	sp, #12
 8008c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	3b04      	subs	r3, #4
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d1cb      	bne.n	8008c38 <quorem+0x94>
 8008ca0:	3c01      	subs	r4, #1
 8008ca2:	e7c6      	b.n	8008c32 <quorem+0x8e>
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d1ef      	bne.n	8008c8c <quorem+0xe8>
 8008cac:	3c01      	subs	r4, #1
 8008cae:	e7ea      	b.n	8008c86 <quorem+0xe2>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	e7ee      	b.n	8008c92 <quorem+0xee>
 8008cb4:	0000      	movs	r0, r0
	...

08008cb8 <_dtoa_r>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	69c7      	ldr	r7, [r0, #28]
 8008cbe:	b099      	sub	sp, #100	@ 0x64
 8008cc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cc4:	ec55 4b10 	vmov	r4, r5, d0
 8008cc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ccc:	4683      	mov	fp, r0
 8008cce:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cd2:	b97f      	cbnz	r7, 8008cf4 <_dtoa_r+0x3c>
 8008cd4:	2010      	movs	r0, #16
 8008cd6:	f000 fdfd 	bl	80098d4 <malloc>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008ce0:	b920      	cbnz	r0, 8008cec <_dtoa_r+0x34>
 8008ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8008f80 <_dtoa_r+0x2c8>)
 8008ce4:	21ef      	movs	r1, #239	@ 0xef
 8008ce6:	48a7      	ldr	r0, [pc, #668]	@ (8008f84 <_dtoa_r+0x2cc>)
 8008ce8:	f002 fc36 	bl	800b558 <__assert_func>
 8008cec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008cf0:	6007      	str	r7, [r0, #0]
 8008cf2:	60c7      	str	r7, [r0, #12]
 8008cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cf8:	6819      	ldr	r1, [r3, #0]
 8008cfa:	b159      	cbz	r1, 8008d14 <_dtoa_r+0x5c>
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	604a      	str	r2, [r1, #4]
 8008d00:	2301      	movs	r3, #1
 8008d02:	4093      	lsls	r3, r2
 8008d04:	608b      	str	r3, [r1, #8]
 8008d06:	4658      	mov	r0, fp
 8008d08:	f000 feda 	bl	8009ac0 <_Bfree>
 8008d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	1e2b      	subs	r3, r5, #0
 8008d16:	bfb9      	ittee	lt
 8008d18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d1c:	9303      	strlt	r3, [sp, #12]
 8008d1e:	2300      	movge	r3, #0
 8008d20:	6033      	strge	r3, [r6, #0]
 8008d22:	9f03      	ldr	r7, [sp, #12]
 8008d24:	4b98      	ldr	r3, [pc, #608]	@ (8008f88 <_dtoa_r+0x2d0>)
 8008d26:	bfbc      	itt	lt
 8008d28:	2201      	movlt	r2, #1
 8008d2a:	6032      	strlt	r2, [r6, #0]
 8008d2c:	43bb      	bics	r3, r7
 8008d2e:	d112      	bne.n	8008d56 <_dtoa_r+0x9e>
 8008d30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d3c:	4323      	orrs	r3, r4
 8008d3e:	f000 854d 	beq.w	80097dc <_dtoa_r+0xb24>
 8008d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f9c <_dtoa_r+0x2e4>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 854f 	beq.w	80097ec <_dtoa_r+0xb34>
 8008d4e:	f10a 0303 	add.w	r3, sl, #3
 8008d52:	f000 bd49 	b.w	80097e8 <_dtoa_r+0xb30>
 8008d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	ec51 0b17 	vmov	r0, r1, d7
 8008d60:	2300      	movs	r3, #0
 8008d62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008d66:	f7f7 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	b158      	cbz	r0, 8008d86 <_dtoa_r+0xce>
 8008d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d70:	2301      	movs	r3, #1
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d76:	b113      	cbz	r3, 8008d7e <_dtoa_r+0xc6>
 8008d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d7a:	4b84      	ldr	r3, [pc, #528]	@ (8008f8c <_dtoa_r+0x2d4>)
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008fa0 <_dtoa_r+0x2e8>
 8008d82:	f000 bd33 	b.w	80097ec <_dtoa_r+0xb34>
 8008d86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d8a:	aa16      	add	r2, sp, #88	@ 0x58
 8008d8c:	a917      	add	r1, sp, #92	@ 0x5c
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f001 fa3a 	bl	800a208 <__d2b>
 8008d94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d98:	4681      	mov	r9, r0
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	d077      	beq.n	8008e8e <_dtoa_r+0x1d6>
 8008d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008da0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008db0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008db4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008db8:	4619      	mov	r1, r3
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4b74      	ldr	r3, [pc, #464]	@ (8008f90 <_dtoa_r+0x2d8>)
 8008dbe:	f7f7 fa6b 	bl	8000298 <__aeabi_dsub>
 8008dc2:	a369      	add	r3, pc, #420	@ (adr r3, 8008f68 <_dtoa_r+0x2b0>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8008f70 <_dtoa_r+0x2b8>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa63 	bl	800029c <__adddf3>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4630      	mov	r0, r6
 8008dda:	460d      	mov	r5, r1
 8008ddc:	f7f7 fbaa 	bl	8000534 <__aeabi_i2d>
 8008de0:	a365      	add	r3, pc, #404	@ (adr r3, 8008f78 <_dtoa_r+0x2c0>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fc0f 	bl	8000608 <__aeabi_dmul>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fa53 	bl	800029c <__adddf3>
 8008df6:	4604      	mov	r4, r0
 8008df8:	460d      	mov	r5, r1
 8008dfa:	f7f7 feb5 	bl	8000b68 <__aeabi_d2iz>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4607      	mov	r7, r0
 8008e02:	2300      	movs	r3, #0
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fe70 	bl	8000aec <__aeabi_dcmplt>
 8008e0c:	b140      	cbz	r0, 8008e20 <_dtoa_r+0x168>
 8008e0e:	4638      	mov	r0, r7
 8008e10:	f7f7 fb90 	bl	8000534 <__aeabi_i2d>
 8008e14:	4622      	mov	r2, r4
 8008e16:	462b      	mov	r3, r5
 8008e18:	f7f7 fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e1c:	b900      	cbnz	r0, 8008e20 <_dtoa_r+0x168>
 8008e1e:	3f01      	subs	r7, #1
 8008e20:	2f16      	cmp	r7, #22
 8008e22:	d851      	bhi.n	8008ec8 <_dtoa_r+0x210>
 8008e24:	4b5b      	ldr	r3, [pc, #364]	@ (8008f94 <_dtoa_r+0x2dc>)
 8008e26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e32:	f7f7 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d048      	beq.n	8008ecc <_dtoa_r+0x214>
 8008e3a:	3f01      	subs	r7, #1
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e42:	1b9b      	subs	r3, r3, r6
 8008e44:	1e5a      	subs	r2, r3, #1
 8008e46:	bf44      	itt	mi
 8008e48:	f1c3 0801 	rsbmi	r8, r3, #1
 8008e4c:	2300      	movmi	r3, #0
 8008e4e:	9208      	str	r2, [sp, #32]
 8008e50:	bf54      	ite	pl
 8008e52:	f04f 0800 	movpl.w	r8, #0
 8008e56:	9308      	strmi	r3, [sp, #32]
 8008e58:	2f00      	cmp	r7, #0
 8008e5a:	db39      	blt.n	8008ed0 <_dtoa_r+0x218>
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008e60:	443b      	add	r3, r7
 8008e62:	9308      	str	r3, [sp, #32]
 8008e64:	2300      	movs	r3, #0
 8008e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6a:	2b09      	cmp	r3, #9
 8008e6c:	d864      	bhi.n	8008f38 <_dtoa_r+0x280>
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	bfc4      	itt	gt
 8008e72:	3b04      	subgt	r3, #4
 8008e74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e78:	f1a3 0302 	sub.w	r3, r3, #2
 8008e7c:	bfcc      	ite	gt
 8008e7e:	2400      	movgt	r4, #0
 8008e80:	2401      	movle	r4, #1
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d863      	bhi.n	8008f4e <_dtoa_r+0x296>
 8008e86:	e8df f003 	tbb	[pc, r3]
 8008e8a:	372a      	.short	0x372a
 8008e8c:	5535      	.short	0x5535
 8008e8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008e92:	441e      	add	r6, r3
 8008e94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e98:	2b20      	cmp	r3, #32
 8008e9a:	bfc1      	itttt	gt
 8008e9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ea0:	409f      	lslgt	r7, r3
 8008ea2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ea6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008eaa:	bfd6      	itet	le
 8008eac:	f1c3 0320 	rsble	r3, r3, #32
 8008eb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008eb4:	fa04 f003 	lslle.w	r0, r4, r3
 8008eb8:	f7f7 fb2c 	bl	8000514 <__aeabi_ui2d>
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ec2:	3e01      	subs	r6, #1
 8008ec4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008ec6:	e777      	b.n	8008db8 <_dtoa_r+0x100>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e7b8      	b.n	8008e3e <_dtoa_r+0x186>
 8008ecc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ece:	e7b7      	b.n	8008e40 <_dtoa_r+0x188>
 8008ed0:	427b      	negs	r3, r7
 8008ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	eba8 0807 	sub.w	r8, r8, r7
 8008eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008edc:	e7c4      	b.n	8008e68 <_dtoa_r+0x1b0>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dc35      	bgt.n	8008f54 <_dtoa_r+0x29c>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	9307      	str	r3, [sp, #28]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ef2:	e00b      	b.n	8008f0c <_dtoa_r+0x254>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e7f3      	b.n	8008ee0 <_dtoa_r+0x228>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008efe:	18fb      	adds	r3, r7, r3
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	bfb8      	it	lt
 8008f0a:	2301      	movlt	r3, #1
 8008f0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008f10:	2100      	movs	r1, #0
 8008f12:	2204      	movs	r2, #4
 8008f14:	f102 0514 	add.w	r5, r2, #20
 8008f18:	429d      	cmp	r5, r3
 8008f1a:	d91f      	bls.n	8008f5c <_dtoa_r+0x2a4>
 8008f1c:	6041      	str	r1, [r0, #4]
 8008f1e:	4658      	mov	r0, fp
 8008f20:	f000 fd8e 	bl	8009a40 <_Balloc>
 8008f24:	4682      	mov	sl, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d13c      	bne.n	8008fa4 <_dtoa_r+0x2ec>
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f98 <_dtoa_r+0x2e0>)
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f32:	e6d8      	b.n	8008ce6 <_dtoa_r+0x2e>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e7e0      	b.n	8008efa <_dtoa_r+0x242>
 8008f38:	2401      	movs	r4, #1
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f40:	f04f 33ff 	mov.w	r3, #4294967295
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	9307      	str	r3, [sp, #28]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2312      	movs	r3, #18
 8008f4c:	e7d0      	b.n	8008ef0 <_dtoa_r+0x238>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f52:	e7f5      	b.n	8008f40 <_dtoa_r+0x288>
 8008f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	9307      	str	r3, [sp, #28]
 8008f5a:	e7d7      	b.n	8008f0c <_dtoa_r+0x254>
 8008f5c:	3101      	adds	r1, #1
 8008f5e:	0052      	lsls	r2, r2, #1
 8008f60:	e7d8      	b.n	8008f14 <_dtoa_r+0x25c>
 8008f62:	bf00      	nop
 8008f64:	f3af 8000 	nop.w
 8008f68:	636f4361 	.word	0x636f4361
 8008f6c:	3fd287a7 	.word	0x3fd287a7
 8008f70:	8b60c8b3 	.word	0x8b60c8b3
 8008f74:	3fc68a28 	.word	0x3fc68a28
 8008f78:	509f79fb 	.word	0x509f79fb
 8008f7c:	3fd34413 	.word	0x3fd34413
 8008f80:	0800c326 	.word	0x0800c326
 8008f84:	0800c33d 	.word	0x0800c33d
 8008f88:	7ff00000 	.word	0x7ff00000
 8008f8c:	0800c2f1 	.word	0x0800c2f1
 8008f90:	3ff80000 	.word	0x3ff80000
 8008f94:	0800c438 	.word	0x0800c438
 8008f98:	0800c395 	.word	0x0800c395
 8008f9c:	0800c322 	.word	0x0800c322
 8008fa0:	0800c2f0 	.word	0x0800c2f0
 8008fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fa8:	6018      	str	r0, [r3, #0]
 8008faa:	9b07      	ldr	r3, [sp, #28]
 8008fac:	2b0e      	cmp	r3, #14
 8008fae:	f200 80a4 	bhi.w	80090fa <_dtoa_r+0x442>
 8008fb2:	2c00      	cmp	r4, #0
 8008fb4:	f000 80a1 	beq.w	80090fa <_dtoa_r+0x442>
 8008fb8:	2f00      	cmp	r7, #0
 8008fba:	dd33      	ble.n	8009024 <_dtoa_r+0x36c>
 8008fbc:	4bad      	ldr	r3, [pc, #692]	@ (8009274 <_dtoa_r+0x5bc>)
 8008fbe:	f007 020f 	and.w	r2, r7, #15
 8008fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fc6:	ed93 7b00 	vldr	d7, [r3]
 8008fca:	05f8      	lsls	r0, r7, #23
 8008fcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008fd4:	d516      	bpl.n	8009004 <_dtoa_r+0x34c>
 8008fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8009278 <_dtoa_r+0x5c0>)
 8008fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fe0:	f7f7 fc3c 	bl	800085c <__aeabi_ddiv>
 8008fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe8:	f004 040f 	and.w	r4, r4, #15
 8008fec:	2603      	movs	r6, #3
 8008fee:	4da2      	ldr	r5, [pc, #648]	@ (8009278 <_dtoa_r+0x5c0>)
 8008ff0:	b954      	cbnz	r4, 8009008 <_dtoa_r+0x350>
 8008ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ffa:	f7f7 fc2f 	bl	800085c <__aeabi_ddiv>
 8008ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009002:	e028      	b.n	8009056 <_dtoa_r+0x39e>
 8009004:	2602      	movs	r6, #2
 8009006:	e7f2      	b.n	8008fee <_dtoa_r+0x336>
 8009008:	07e1      	lsls	r1, r4, #31
 800900a:	d508      	bpl.n	800901e <_dtoa_r+0x366>
 800900c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800901c:	3601      	adds	r6, #1
 800901e:	1064      	asrs	r4, r4, #1
 8009020:	3508      	adds	r5, #8
 8009022:	e7e5      	b.n	8008ff0 <_dtoa_r+0x338>
 8009024:	f000 80d2 	beq.w	80091cc <_dtoa_r+0x514>
 8009028:	427c      	negs	r4, r7
 800902a:	4b92      	ldr	r3, [pc, #584]	@ (8009274 <_dtoa_r+0x5bc>)
 800902c:	4d92      	ldr	r5, [pc, #584]	@ (8009278 <_dtoa_r+0x5c0>)
 800902e:	f004 020f 	and.w	r2, r4, #15
 8009032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800903e:	f7f7 fae3 	bl	8000608 <__aeabi_dmul>
 8009042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009046:	1124      	asrs	r4, r4, #4
 8009048:	2300      	movs	r3, #0
 800904a:	2602      	movs	r6, #2
 800904c:	2c00      	cmp	r4, #0
 800904e:	f040 80b2 	bne.w	80091b6 <_dtoa_r+0x4fe>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1d3      	bne.n	8008ffe <_dtoa_r+0x346>
 8009056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009058:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80b7 	beq.w	80091d0 <_dtoa_r+0x518>
 8009062:	4b86      	ldr	r3, [pc, #536]	@ (800927c <_dtoa_r+0x5c4>)
 8009064:	2200      	movs	r2, #0
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	f7f7 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800906e:	2800      	cmp	r0, #0
 8009070:	f000 80ae 	beq.w	80091d0 <_dtoa_r+0x518>
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80aa 	beq.w	80091d0 <_dtoa_r+0x518>
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	dd37      	ble.n	80090f2 <_dtoa_r+0x43a>
 8009082:	1e7b      	subs	r3, r7, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	4620      	mov	r0, r4
 8009088:	4b7d      	ldr	r3, [pc, #500]	@ (8009280 <_dtoa_r+0x5c8>)
 800908a:	2200      	movs	r2, #0
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 fabb 	bl	8000608 <__aeabi_dmul>
 8009092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009096:	9c00      	ldr	r4, [sp, #0]
 8009098:	3601      	adds	r6, #1
 800909a:	4630      	mov	r0, r6
 800909c:	f7f7 fa4a 	bl	8000534 <__aeabi_i2d>
 80090a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090a4:	f7f7 fab0 	bl	8000608 <__aeabi_dmul>
 80090a8:	4b76      	ldr	r3, [pc, #472]	@ (8009284 <_dtoa_r+0x5cc>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 f8f6 	bl	800029c <__adddf3>
 80090b0:	4605      	mov	r5, r0
 80090b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	f040 808d 	bne.w	80091d6 <_dtoa_r+0x51e>
 80090bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c0:	4b71      	ldr	r3, [pc, #452]	@ (8009288 <_dtoa_r+0x5d0>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	f7f7 f8e8 	bl	8000298 <__aeabi_dsub>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4633      	mov	r3, r6
 80090d4:	f7f7 fd28 	bl	8000b28 <__aeabi_dcmpgt>
 80090d8:	2800      	cmp	r0, #0
 80090da:	f040 828b 	bne.w	80095f4 <_dtoa_r+0x93c>
 80090de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090e2:	462a      	mov	r2, r5
 80090e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80090e8:	f7f7 fd00 	bl	8000aec <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f040 8128 	bne.w	8009342 <_dtoa_r+0x68a>
 80090f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80090f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80090fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f2c0 815a 	blt.w	80093b6 <_dtoa_r+0x6fe>
 8009102:	2f0e      	cmp	r7, #14
 8009104:	f300 8157 	bgt.w	80093b6 <_dtoa_r+0x6fe>
 8009108:	4b5a      	ldr	r3, [pc, #360]	@ (8009274 <_dtoa_r+0x5bc>)
 800910a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800910e:	ed93 7b00 	vldr	d7, [r3]
 8009112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	ed8d 7b00 	vstr	d7, [sp]
 800911a:	da03      	bge.n	8009124 <_dtoa_r+0x46c>
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f340 8101 	ble.w	8009326 <_dtoa_r+0x66e>
 8009124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009128:	4656      	mov	r6, sl
 800912a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800912e:	4620      	mov	r0, r4
 8009130:	4629      	mov	r1, r5
 8009132:	f7f7 fb93 	bl	800085c <__aeabi_ddiv>
 8009136:	f7f7 fd17 	bl	8000b68 <__aeabi_d2iz>
 800913a:	4680      	mov	r8, r0
 800913c:	f7f7 f9fa 	bl	8000534 <__aeabi_i2d>
 8009140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009144:	f7f7 fa60 	bl	8000608 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009154:	f7f7 f8a0 	bl	8000298 <__aeabi_dsub>
 8009158:	f806 4b01 	strb.w	r4, [r6], #1
 800915c:	9d07      	ldr	r5, [sp, #28]
 800915e:	eba6 040a 	sub.w	r4, r6, sl
 8009162:	42a5      	cmp	r5, r4
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	f040 8117 	bne.w	800939a <_dtoa_r+0x6e2>
 800916c:	f7f7 f896 	bl	800029c <__adddf3>
 8009170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	f7f7 fcd6 	bl	8000b28 <__aeabi_dcmpgt>
 800917c:	2800      	cmp	r0, #0
 800917e:	f040 80f9 	bne.w	8009374 <_dtoa_r+0x6bc>
 8009182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800918e:	b118      	cbz	r0, 8009198 <_dtoa_r+0x4e0>
 8009190:	f018 0f01 	tst.w	r8, #1
 8009194:	f040 80ee 	bne.w	8009374 <_dtoa_r+0x6bc>
 8009198:	4649      	mov	r1, r9
 800919a:	4658      	mov	r0, fp
 800919c:	f000 fc90 	bl	8009ac0 <_Bfree>
 80091a0:	2300      	movs	r3, #0
 80091a2:	7033      	strb	r3, [r6, #0]
 80091a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091a6:	3701      	adds	r7, #1
 80091a8:	601f      	str	r7, [r3, #0]
 80091aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 831d 	beq.w	80097ec <_dtoa_r+0xb34>
 80091b2:	601e      	str	r6, [r3, #0]
 80091b4:	e31a      	b.n	80097ec <_dtoa_r+0xb34>
 80091b6:	07e2      	lsls	r2, r4, #31
 80091b8:	d505      	bpl.n	80091c6 <_dtoa_r+0x50e>
 80091ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091be:	f7f7 fa23 	bl	8000608 <__aeabi_dmul>
 80091c2:	3601      	adds	r6, #1
 80091c4:	2301      	movs	r3, #1
 80091c6:	1064      	asrs	r4, r4, #1
 80091c8:	3508      	adds	r5, #8
 80091ca:	e73f      	b.n	800904c <_dtoa_r+0x394>
 80091cc:	2602      	movs	r6, #2
 80091ce:	e742      	b.n	8009056 <_dtoa_r+0x39e>
 80091d0:	9c07      	ldr	r4, [sp, #28]
 80091d2:	9704      	str	r7, [sp, #16]
 80091d4:	e761      	b.n	800909a <_dtoa_r+0x3e2>
 80091d6:	4b27      	ldr	r3, [pc, #156]	@ (8009274 <_dtoa_r+0x5bc>)
 80091d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091e2:	4454      	add	r4, sl
 80091e4:	2900      	cmp	r1, #0
 80091e6:	d053      	beq.n	8009290 <_dtoa_r+0x5d8>
 80091e8:	4928      	ldr	r1, [pc, #160]	@ (800928c <_dtoa_r+0x5d4>)
 80091ea:	2000      	movs	r0, #0
 80091ec:	f7f7 fb36 	bl	800085c <__aeabi_ddiv>
 80091f0:	4633      	mov	r3, r6
 80091f2:	462a      	mov	r2, r5
 80091f4:	f7f7 f850 	bl	8000298 <__aeabi_dsub>
 80091f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091fc:	4656      	mov	r6, sl
 80091fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009202:	f7f7 fcb1 	bl	8000b68 <__aeabi_d2iz>
 8009206:	4605      	mov	r5, r0
 8009208:	f7f7 f994 	bl	8000534 <__aeabi_i2d>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009214:	f7f7 f840 	bl	8000298 <__aeabi_dsub>
 8009218:	3530      	adds	r5, #48	@ 0x30
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009222:	f806 5b01 	strb.w	r5, [r6], #1
 8009226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800922a:	f7f7 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d171      	bne.n	8009316 <_dtoa_r+0x65e>
 8009232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009236:	4911      	ldr	r1, [pc, #68]	@ (800927c <_dtoa_r+0x5c4>)
 8009238:	2000      	movs	r0, #0
 800923a:	f7f7 f82d 	bl	8000298 <__aeabi_dsub>
 800923e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009242:	f7f7 fc53 	bl	8000aec <__aeabi_dcmplt>
 8009246:	2800      	cmp	r0, #0
 8009248:	f040 8095 	bne.w	8009376 <_dtoa_r+0x6be>
 800924c:	42a6      	cmp	r6, r4
 800924e:	f43f af50 	beq.w	80090f2 <_dtoa_r+0x43a>
 8009252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009256:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <_dtoa_r+0x5c8>)
 8009258:	2200      	movs	r2, #0
 800925a:	f7f7 f9d5 	bl	8000608 <__aeabi_dmul>
 800925e:	4b08      	ldr	r3, [pc, #32]	@ (8009280 <_dtoa_r+0x5c8>)
 8009260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009264:	2200      	movs	r2, #0
 8009266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800926a:	f7f7 f9cd 	bl	8000608 <__aeabi_dmul>
 800926e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009272:	e7c4      	b.n	80091fe <_dtoa_r+0x546>
 8009274:	0800c438 	.word	0x0800c438
 8009278:	0800c410 	.word	0x0800c410
 800927c:	3ff00000 	.word	0x3ff00000
 8009280:	40240000 	.word	0x40240000
 8009284:	401c0000 	.word	0x401c0000
 8009288:	40140000 	.word	0x40140000
 800928c:	3fe00000 	.word	0x3fe00000
 8009290:	4631      	mov	r1, r6
 8009292:	4628      	mov	r0, r5
 8009294:	f7f7 f9b8 	bl	8000608 <__aeabi_dmul>
 8009298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800929c:	9415      	str	r4, [sp, #84]	@ 0x54
 800929e:	4656      	mov	r6, sl
 80092a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a4:	f7f7 fc60 	bl	8000b68 <__aeabi_d2iz>
 80092a8:	4605      	mov	r5, r0
 80092aa:	f7f7 f943 	bl	8000534 <__aeabi_i2d>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b6:	f7f6 ffef 	bl	8000298 <__aeabi_dsub>
 80092ba:	3530      	adds	r5, #48	@ 0x30
 80092bc:	f806 5b01 	strb.w	r5, [r6], #1
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	42a6      	cmp	r6, r4
 80092c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	d124      	bne.n	800931a <_dtoa_r+0x662>
 80092d0:	4bac      	ldr	r3, [pc, #688]	@ (8009584 <_dtoa_r+0x8cc>)
 80092d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092d6:	f7f6 ffe1 	bl	800029c <__adddf3>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092e2:	f7f7 fc21 	bl	8000b28 <__aeabi_dcmpgt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d145      	bne.n	8009376 <_dtoa_r+0x6be>
 80092ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092ee:	49a5      	ldr	r1, [pc, #660]	@ (8009584 <_dtoa_r+0x8cc>)
 80092f0:	2000      	movs	r0, #0
 80092f2:	f7f6 ffd1 	bl	8000298 <__aeabi_dsub>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092fe:	f7f7 fbf5 	bl	8000aec <__aeabi_dcmplt>
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f aef5 	beq.w	80090f2 <_dtoa_r+0x43a>
 8009308:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800930a:	1e73      	subs	r3, r6, #1
 800930c:	9315      	str	r3, [sp, #84]	@ 0x54
 800930e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009312:	2b30      	cmp	r3, #48	@ 0x30
 8009314:	d0f8      	beq.n	8009308 <_dtoa_r+0x650>
 8009316:	9f04      	ldr	r7, [sp, #16]
 8009318:	e73e      	b.n	8009198 <_dtoa_r+0x4e0>
 800931a:	4b9b      	ldr	r3, [pc, #620]	@ (8009588 <_dtoa_r+0x8d0>)
 800931c:	f7f7 f974 	bl	8000608 <__aeabi_dmul>
 8009320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009324:	e7bc      	b.n	80092a0 <_dtoa_r+0x5e8>
 8009326:	d10c      	bne.n	8009342 <_dtoa_r+0x68a>
 8009328:	4b98      	ldr	r3, [pc, #608]	@ (800958c <_dtoa_r+0x8d4>)
 800932a:	2200      	movs	r2, #0
 800932c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009330:	f7f7 f96a 	bl	8000608 <__aeabi_dmul>
 8009334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009338:	f7f7 fbec 	bl	8000b14 <__aeabi_dcmpge>
 800933c:	2800      	cmp	r0, #0
 800933e:	f000 8157 	beq.w	80095f0 <_dtoa_r+0x938>
 8009342:	2400      	movs	r4, #0
 8009344:	4625      	mov	r5, r4
 8009346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009348:	43db      	mvns	r3, r3
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	4656      	mov	r6, sl
 800934e:	2700      	movs	r7, #0
 8009350:	4621      	mov	r1, r4
 8009352:	4658      	mov	r0, fp
 8009354:	f000 fbb4 	bl	8009ac0 <_Bfree>
 8009358:	2d00      	cmp	r5, #0
 800935a:	d0dc      	beq.n	8009316 <_dtoa_r+0x65e>
 800935c:	b12f      	cbz	r7, 800936a <_dtoa_r+0x6b2>
 800935e:	42af      	cmp	r7, r5
 8009360:	d003      	beq.n	800936a <_dtoa_r+0x6b2>
 8009362:	4639      	mov	r1, r7
 8009364:	4658      	mov	r0, fp
 8009366:	f000 fbab 	bl	8009ac0 <_Bfree>
 800936a:	4629      	mov	r1, r5
 800936c:	4658      	mov	r0, fp
 800936e:	f000 fba7 	bl	8009ac0 <_Bfree>
 8009372:	e7d0      	b.n	8009316 <_dtoa_r+0x65e>
 8009374:	9704      	str	r7, [sp, #16]
 8009376:	4633      	mov	r3, r6
 8009378:	461e      	mov	r6, r3
 800937a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800937e:	2a39      	cmp	r2, #57	@ 0x39
 8009380:	d107      	bne.n	8009392 <_dtoa_r+0x6da>
 8009382:	459a      	cmp	sl, r3
 8009384:	d1f8      	bne.n	8009378 <_dtoa_r+0x6c0>
 8009386:	9a04      	ldr	r2, [sp, #16]
 8009388:	3201      	adds	r2, #1
 800938a:	9204      	str	r2, [sp, #16]
 800938c:	2230      	movs	r2, #48	@ 0x30
 800938e:	f88a 2000 	strb.w	r2, [sl]
 8009392:	781a      	ldrb	r2, [r3, #0]
 8009394:	3201      	adds	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	e7bd      	b.n	8009316 <_dtoa_r+0x65e>
 800939a:	4b7b      	ldr	r3, [pc, #492]	@ (8009588 <_dtoa_r+0x8d0>)
 800939c:	2200      	movs	r2, #0
 800939e:	f7f7 f933 	bl	8000608 <__aeabi_dmul>
 80093a2:	2200      	movs	r2, #0
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	460d      	mov	r5, r1
 80093aa:	f7f7 fb95 	bl	8000ad8 <__aeabi_dcmpeq>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f43f aebb 	beq.w	800912a <_dtoa_r+0x472>
 80093b4:	e6f0      	b.n	8009198 <_dtoa_r+0x4e0>
 80093b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	f000 80db 	beq.w	8009574 <_dtoa_r+0x8bc>
 80093be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093c0:	2a01      	cmp	r2, #1
 80093c2:	f300 80bf 	bgt.w	8009544 <_dtoa_r+0x88c>
 80093c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	f000 80b7 	beq.w	800953c <_dtoa_r+0x884>
 80093ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80093d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093d4:	4646      	mov	r6, r8
 80093d6:	9a08      	ldr	r2, [sp, #32]
 80093d8:	2101      	movs	r1, #1
 80093da:	441a      	add	r2, r3
 80093dc:	4658      	mov	r0, fp
 80093de:	4498      	add	r8, r3
 80093e0:	9208      	str	r2, [sp, #32]
 80093e2:	f000 fc6b 	bl	8009cbc <__i2b>
 80093e6:	4605      	mov	r5, r0
 80093e8:	b15e      	cbz	r6, 8009402 <_dtoa_r+0x74a>
 80093ea:	9b08      	ldr	r3, [sp, #32]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd08      	ble.n	8009402 <_dtoa_r+0x74a>
 80093f0:	42b3      	cmp	r3, r6
 80093f2:	9a08      	ldr	r2, [sp, #32]
 80093f4:	bfa8      	it	ge
 80093f6:	4633      	movge	r3, r6
 80093f8:	eba8 0803 	sub.w	r8, r8, r3
 80093fc:	1af6      	subs	r6, r6, r3
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	9308      	str	r3, [sp, #32]
 8009402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009404:	b1f3      	cbz	r3, 8009444 <_dtoa_r+0x78c>
 8009406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 80b7 	beq.w	800957c <_dtoa_r+0x8c4>
 800940e:	b18c      	cbz	r4, 8009434 <_dtoa_r+0x77c>
 8009410:	4629      	mov	r1, r5
 8009412:	4622      	mov	r2, r4
 8009414:	4658      	mov	r0, fp
 8009416:	f000 fd11 	bl	8009e3c <__pow5mult>
 800941a:	464a      	mov	r2, r9
 800941c:	4601      	mov	r1, r0
 800941e:	4605      	mov	r5, r0
 8009420:	4658      	mov	r0, fp
 8009422:	f000 fc61 	bl	8009ce8 <__multiply>
 8009426:	4649      	mov	r1, r9
 8009428:	9004      	str	r0, [sp, #16]
 800942a:	4658      	mov	r0, fp
 800942c:	f000 fb48 	bl	8009ac0 <_Bfree>
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	4699      	mov	r9, r3
 8009434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009436:	1b1a      	subs	r2, r3, r4
 8009438:	d004      	beq.n	8009444 <_dtoa_r+0x78c>
 800943a:	4649      	mov	r1, r9
 800943c:	4658      	mov	r0, fp
 800943e:	f000 fcfd 	bl	8009e3c <__pow5mult>
 8009442:	4681      	mov	r9, r0
 8009444:	2101      	movs	r1, #1
 8009446:	4658      	mov	r0, fp
 8009448:	f000 fc38 	bl	8009cbc <__i2b>
 800944c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800944e:	4604      	mov	r4, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 81cf 	beq.w	80097f4 <_dtoa_r+0xb3c>
 8009456:	461a      	mov	r2, r3
 8009458:	4601      	mov	r1, r0
 800945a:	4658      	mov	r0, fp
 800945c:	f000 fcee 	bl	8009e3c <__pow5mult>
 8009460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009462:	2b01      	cmp	r3, #1
 8009464:	4604      	mov	r4, r0
 8009466:	f300 8095 	bgt.w	8009594 <_dtoa_r+0x8dc>
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 8087 	bne.w	8009580 <_dtoa_r+0x8c8>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009478:	2b00      	cmp	r3, #0
 800947a:	f040 8089 	bne.w	8009590 <_dtoa_r+0x8d8>
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	0d1b      	lsrs	r3, r3, #20
 8009486:	051b      	lsls	r3, r3, #20
 8009488:	b12b      	cbz	r3, 8009496 <_dtoa_r+0x7de>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	3301      	adds	r3, #1
 800948e:	9308      	str	r3, [sp, #32]
 8009490:	f108 0801 	add.w	r8, r8, #1
 8009494:	2301      	movs	r3, #1
 8009496:	930a      	str	r3, [sp, #40]	@ 0x28
 8009498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 81b0 	beq.w	8009800 <_dtoa_r+0xb48>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094a6:	6918      	ldr	r0, [r3, #16]
 80094a8:	f000 fbbc 	bl	8009c24 <__hi0bits>
 80094ac:	f1c0 0020 	rsb	r0, r0, #32
 80094b0:	9b08      	ldr	r3, [sp, #32]
 80094b2:	4418      	add	r0, r3
 80094b4:	f010 001f 	ands.w	r0, r0, #31
 80094b8:	d077      	beq.n	80095aa <_dtoa_r+0x8f2>
 80094ba:	f1c0 0320 	rsb	r3, r0, #32
 80094be:	2b04      	cmp	r3, #4
 80094c0:	dd6b      	ble.n	800959a <_dtoa_r+0x8e2>
 80094c2:	9b08      	ldr	r3, [sp, #32]
 80094c4:	f1c0 001c 	rsb	r0, r0, #28
 80094c8:	4403      	add	r3, r0
 80094ca:	4480      	add	r8, r0
 80094cc:	4406      	add	r6, r0
 80094ce:	9308      	str	r3, [sp, #32]
 80094d0:	f1b8 0f00 	cmp.w	r8, #0
 80094d4:	dd05      	ble.n	80094e2 <_dtoa_r+0x82a>
 80094d6:	4649      	mov	r1, r9
 80094d8:	4642      	mov	r2, r8
 80094da:	4658      	mov	r0, fp
 80094dc:	f000 fd08 	bl	8009ef0 <__lshift>
 80094e0:	4681      	mov	r9, r0
 80094e2:	9b08      	ldr	r3, [sp, #32]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd05      	ble.n	80094f4 <_dtoa_r+0x83c>
 80094e8:	4621      	mov	r1, r4
 80094ea:	461a      	mov	r2, r3
 80094ec:	4658      	mov	r0, fp
 80094ee:	f000 fcff 	bl	8009ef0 <__lshift>
 80094f2:	4604      	mov	r4, r0
 80094f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d059      	beq.n	80095ae <_dtoa_r+0x8f6>
 80094fa:	4621      	mov	r1, r4
 80094fc:	4648      	mov	r0, r9
 80094fe:	f000 fd63 	bl	8009fc8 <__mcmp>
 8009502:	2800      	cmp	r0, #0
 8009504:	da53      	bge.n	80095ae <_dtoa_r+0x8f6>
 8009506:	1e7b      	subs	r3, r7, #1
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	4649      	mov	r1, r9
 800950c:	2300      	movs	r3, #0
 800950e:	220a      	movs	r2, #10
 8009510:	4658      	mov	r0, fp
 8009512:	f000 faf7 	bl	8009b04 <__multadd>
 8009516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009518:	4681      	mov	r9, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8172 	beq.w	8009804 <_dtoa_r+0xb4c>
 8009520:	2300      	movs	r3, #0
 8009522:	4629      	mov	r1, r5
 8009524:	220a      	movs	r2, #10
 8009526:	4658      	mov	r0, fp
 8009528:	f000 faec 	bl	8009b04 <__multadd>
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	4605      	mov	r5, r0
 8009532:	dc67      	bgt.n	8009604 <_dtoa_r+0x94c>
 8009534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009536:	2b02      	cmp	r3, #2
 8009538:	dc41      	bgt.n	80095be <_dtoa_r+0x906>
 800953a:	e063      	b.n	8009604 <_dtoa_r+0x94c>
 800953c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800953e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009542:	e746      	b.n	80093d2 <_dtoa_r+0x71a>
 8009544:	9b07      	ldr	r3, [sp, #28]
 8009546:	1e5c      	subs	r4, r3, #1
 8009548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800954a:	42a3      	cmp	r3, r4
 800954c:	bfbf      	itttt	lt
 800954e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009550:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009552:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009554:	1ae3      	sublt	r3, r4, r3
 8009556:	bfb4      	ite	lt
 8009558:	18d2      	addlt	r2, r2, r3
 800955a:	1b1c      	subge	r4, r3, r4
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	bfbc      	itt	lt
 8009560:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009562:	2400      	movlt	r4, #0
 8009564:	2b00      	cmp	r3, #0
 8009566:	bfb5      	itete	lt
 8009568:	eba8 0603 	sublt.w	r6, r8, r3
 800956c:	9b07      	ldrge	r3, [sp, #28]
 800956e:	2300      	movlt	r3, #0
 8009570:	4646      	movge	r6, r8
 8009572:	e730      	b.n	80093d6 <_dtoa_r+0x71e>
 8009574:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009576:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009578:	4646      	mov	r6, r8
 800957a:	e735      	b.n	80093e8 <_dtoa_r+0x730>
 800957c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800957e:	e75c      	b.n	800943a <_dtoa_r+0x782>
 8009580:	2300      	movs	r3, #0
 8009582:	e788      	b.n	8009496 <_dtoa_r+0x7de>
 8009584:	3fe00000 	.word	0x3fe00000
 8009588:	40240000 	.word	0x40240000
 800958c:	40140000 	.word	0x40140000
 8009590:	9b02      	ldr	r3, [sp, #8]
 8009592:	e780      	b.n	8009496 <_dtoa_r+0x7de>
 8009594:	2300      	movs	r3, #0
 8009596:	930a      	str	r3, [sp, #40]	@ 0x28
 8009598:	e782      	b.n	80094a0 <_dtoa_r+0x7e8>
 800959a:	d099      	beq.n	80094d0 <_dtoa_r+0x818>
 800959c:	9a08      	ldr	r2, [sp, #32]
 800959e:	331c      	adds	r3, #28
 80095a0:	441a      	add	r2, r3
 80095a2:	4498      	add	r8, r3
 80095a4:	441e      	add	r6, r3
 80095a6:	9208      	str	r2, [sp, #32]
 80095a8:	e792      	b.n	80094d0 <_dtoa_r+0x818>
 80095aa:	4603      	mov	r3, r0
 80095ac:	e7f6      	b.n	800959c <_dtoa_r+0x8e4>
 80095ae:	9b07      	ldr	r3, [sp, #28]
 80095b0:	9704      	str	r7, [sp, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dc20      	bgt.n	80095f8 <_dtoa_r+0x940>
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	dd1e      	ble.n	80095fc <_dtoa_r+0x944>
 80095be:	9b00      	ldr	r3, [sp, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f47f aec0 	bne.w	8009346 <_dtoa_r+0x68e>
 80095c6:	4621      	mov	r1, r4
 80095c8:	2205      	movs	r2, #5
 80095ca:	4658      	mov	r0, fp
 80095cc:	f000 fa9a 	bl	8009b04 <__multadd>
 80095d0:	4601      	mov	r1, r0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4648      	mov	r0, r9
 80095d6:	f000 fcf7 	bl	8009fc8 <__mcmp>
 80095da:	2800      	cmp	r0, #0
 80095dc:	f77f aeb3 	ble.w	8009346 <_dtoa_r+0x68e>
 80095e0:	4656      	mov	r6, sl
 80095e2:	2331      	movs	r3, #49	@ 0x31
 80095e4:	f806 3b01 	strb.w	r3, [r6], #1
 80095e8:	9b04      	ldr	r3, [sp, #16]
 80095ea:	3301      	adds	r3, #1
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	e6ae      	b.n	800934e <_dtoa_r+0x696>
 80095f0:	9c07      	ldr	r4, [sp, #28]
 80095f2:	9704      	str	r7, [sp, #16]
 80095f4:	4625      	mov	r5, r4
 80095f6:	e7f3      	b.n	80095e0 <_dtoa_r+0x928>
 80095f8:	9b07      	ldr	r3, [sp, #28]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8104 	beq.w	800980c <_dtoa_r+0xb54>
 8009604:	2e00      	cmp	r6, #0
 8009606:	dd05      	ble.n	8009614 <_dtoa_r+0x95c>
 8009608:	4629      	mov	r1, r5
 800960a:	4632      	mov	r2, r6
 800960c:	4658      	mov	r0, fp
 800960e:	f000 fc6f 	bl	8009ef0 <__lshift>
 8009612:	4605      	mov	r5, r0
 8009614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d05a      	beq.n	80096d0 <_dtoa_r+0xa18>
 800961a:	6869      	ldr	r1, [r5, #4]
 800961c:	4658      	mov	r0, fp
 800961e:	f000 fa0f 	bl	8009a40 <_Balloc>
 8009622:	4606      	mov	r6, r0
 8009624:	b928      	cbnz	r0, 8009632 <_dtoa_r+0x97a>
 8009626:	4b84      	ldr	r3, [pc, #528]	@ (8009838 <_dtoa_r+0xb80>)
 8009628:	4602      	mov	r2, r0
 800962a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800962e:	f7ff bb5a 	b.w	8008ce6 <_dtoa_r+0x2e>
 8009632:	692a      	ldr	r2, [r5, #16]
 8009634:	3202      	adds	r2, #2
 8009636:	0092      	lsls	r2, r2, #2
 8009638:	f105 010c 	add.w	r1, r5, #12
 800963c:	300c      	adds	r0, #12
 800963e:	f001 ff75 	bl	800b52c <memcpy>
 8009642:	2201      	movs	r2, #1
 8009644:	4631      	mov	r1, r6
 8009646:	4658      	mov	r0, fp
 8009648:	f000 fc52 	bl	8009ef0 <__lshift>
 800964c:	f10a 0301 	add.w	r3, sl, #1
 8009650:	9307      	str	r3, [sp, #28]
 8009652:	9b00      	ldr	r3, [sp, #0]
 8009654:	4453      	add	r3, sl
 8009656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	462f      	mov	r7, r5
 8009660:	930a      	str	r3, [sp, #40]	@ 0x28
 8009662:	4605      	mov	r5, r0
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	4621      	mov	r1, r4
 8009668:	3b01      	subs	r3, #1
 800966a:	4648      	mov	r0, r9
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	f7ff fa99 	bl	8008ba4 <quorem>
 8009672:	4639      	mov	r1, r7
 8009674:	9002      	str	r0, [sp, #8]
 8009676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800967a:	4648      	mov	r0, r9
 800967c:	f000 fca4 	bl	8009fc8 <__mcmp>
 8009680:	462a      	mov	r2, r5
 8009682:	9008      	str	r0, [sp, #32]
 8009684:	4621      	mov	r1, r4
 8009686:	4658      	mov	r0, fp
 8009688:	f000 fcba 	bl	800a000 <__mdiff>
 800968c:	68c2      	ldr	r2, [r0, #12]
 800968e:	4606      	mov	r6, r0
 8009690:	bb02      	cbnz	r2, 80096d4 <_dtoa_r+0xa1c>
 8009692:	4601      	mov	r1, r0
 8009694:	4648      	mov	r0, r9
 8009696:	f000 fc97 	bl	8009fc8 <__mcmp>
 800969a:	4602      	mov	r2, r0
 800969c:	4631      	mov	r1, r6
 800969e:	4658      	mov	r0, fp
 80096a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80096a2:	f000 fa0d 	bl	8009ac0 <_Bfree>
 80096a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096aa:	9e07      	ldr	r6, [sp, #28]
 80096ac:	ea43 0102 	orr.w	r1, r3, r2
 80096b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096b2:	4319      	orrs	r1, r3
 80096b4:	d110      	bne.n	80096d8 <_dtoa_r+0xa20>
 80096b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096ba:	d029      	beq.n	8009710 <_dtoa_r+0xa58>
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dd02      	ble.n	80096c8 <_dtoa_r+0xa10>
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80096c8:	9b00      	ldr	r3, [sp, #0]
 80096ca:	f883 8000 	strb.w	r8, [r3]
 80096ce:	e63f      	b.n	8009350 <_dtoa_r+0x698>
 80096d0:	4628      	mov	r0, r5
 80096d2:	e7bb      	b.n	800964c <_dtoa_r+0x994>
 80096d4:	2201      	movs	r2, #1
 80096d6:	e7e1      	b.n	800969c <_dtoa_r+0x9e4>
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	db04      	blt.n	80096e8 <_dtoa_r+0xa30>
 80096de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096e0:	430b      	orrs	r3, r1
 80096e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096e4:	430b      	orrs	r3, r1
 80096e6:	d120      	bne.n	800972a <_dtoa_r+0xa72>
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	dded      	ble.n	80096c8 <_dtoa_r+0xa10>
 80096ec:	4649      	mov	r1, r9
 80096ee:	2201      	movs	r2, #1
 80096f0:	4658      	mov	r0, fp
 80096f2:	f000 fbfd 	bl	8009ef0 <__lshift>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4681      	mov	r9, r0
 80096fa:	f000 fc65 	bl	8009fc8 <__mcmp>
 80096fe:	2800      	cmp	r0, #0
 8009700:	dc03      	bgt.n	800970a <_dtoa_r+0xa52>
 8009702:	d1e1      	bne.n	80096c8 <_dtoa_r+0xa10>
 8009704:	f018 0f01 	tst.w	r8, #1
 8009708:	d0de      	beq.n	80096c8 <_dtoa_r+0xa10>
 800970a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800970e:	d1d8      	bne.n	80096c2 <_dtoa_r+0xa0a>
 8009710:	9a00      	ldr	r2, [sp, #0]
 8009712:	2339      	movs	r3, #57	@ 0x39
 8009714:	7013      	strb	r3, [r2, #0]
 8009716:	4633      	mov	r3, r6
 8009718:	461e      	mov	r6, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009720:	2a39      	cmp	r2, #57	@ 0x39
 8009722:	d052      	beq.n	80097ca <_dtoa_r+0xb12>
 8009724:	3201      	adds	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]
 8009728:	e612      	b.n	8009350 <_dtoa_r+0x698>
 800972a:	2a00      	cmp	r2, #0
 800972c:	dd07      	ble.n	800973e <_dtoa_r+0xa86>
 800972e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009732:	d0ed      	beq.n	8009710 <_dtoa_r+0xa58>
 8009734:	9a00      	ldr	r2, [sp, #0]
 8009736:	f108 0301 	add.w	r3, r8, #1
 800973a:	7013      	strb	r3, [r2, #0]
 800973c:	e608      	b.n	8009350 <_dtoa_r+0x698>
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	9a07      	ldr	r2, [sp, #28]
 8009742:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009748:	4293      	cmp	r3, r2
 800974a:	d028      	beq.n	800979e <_dtoa_r+0xae6>
 800974c:	4649      	mov	r1, r9
 800974e:	2300      	movs	r3, #0
 8009750:	220a      	movs	r2, #10
 8009752:	4658      	mov	r0, fp
 8009754:	f000 f9d6 	bl	8009b04 <__multadd>
 8009758:	42af      	cmp	r7, r5
 800975a:	4681      	mov	r9, r0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	f04f 020a 	mov.w	r2, #10
 8009764:	4639      	mov	r1, r7
 8009766:	4658      	mov	r0, fp
 8009768:	d107      	bne.n	800977a <_dtoa_r+0xac2>
 800976a:	f000 f9cb 	bl	8009b04 <__multadd>
 800976e:	4607      	mov	r7, r0
 8009770:	4605      	mov	r5, r0
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	3301      	adds	r3, #1
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	e774      	b.n	8009664 <_dtoa_r+0x9ac>
 800977a:	f000 f9c3 	bl	8009b04 <__multadd>
 800977e:	4629      	mov	r1, r5
 8009780:	4607      	mov	r7, r0
 8009782:	2300      	movs	r3, #0
 8009784:	220a      	movs	r2, #10
 8009786:	4658      	mov	r0, fp
 8009788:	f000 f9bc 	bl	8009b04 <__multadd>
 800978c:	4605      	mov	r5, r0
 800978e:	e7f0      	b.n	8009772 <_dtoa_r+0xaba>
 8009790:	9b00      	ldr	r3, [sp, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	bfcc      	ite	gt
 8009796:	461e      	movgt	r6, r3
 8009798:	2601      	movle	r6, #1
 800979a:	4456      	add	r6, sl
 800979c:	2700      	movs	r7, #0
 800979e:	4649      	mov	r1, r9
 80097a0:	2201      	movs	r2, #1
 80097a2:	4658      	mov	r0, fp
 80097a4:	f000 fba4 	bl	8009ef0 <__lshift>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4681      	mov	r9, r0
 80097ac:	f000 fc0c 	bl	8009fc8 <__mcmp>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	dcb0      	bgt.n	8009716 <_dtoa_r+0xa5e>
 80097b4:	d102      	bne.n	80097bc <_dtoa_r+0xb04>
 80097b6:	f018 0f01 	tst.w	r8, #1
 80097ba:	d1ac      	bne.n	8009716 <_dtoa_r+0xa5e>
 80097bc:	4633      	mov	r3, r6
 80097be:	461e      	mov	r6, r3
 80097c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097c4:	2a30      	cmp	r2, #48	@ 0x30
 80097c6:	d0fa      	beq.n	80097be <_dtoa_r+0xb06>
 80097c8:	e5c2      	b.n	8009350 <_dtoa_r+0x698>
 80097ca:	459a      	cmp	sl, r3
 80097cc:	d1a4      	bne.n	8009718 <_dtoa_r+0xa60>
 80097ce:	9b04      	ldr	r3, [sp, #16]
 80097d0:	3301      	adds	r3, #1
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	2331      	movs	r3, #49	@ 0x31
 80097d6:	f88a 3000 	strb.w	r3, [sl]
 80097da:	e5b9      	b.n	8009350 <_dtoa_r+0x698>
 80097dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800983c <_dtoa_r+0xb84>
 80097e2:	b11b      	cbz	r3, 80097ec <_dtoa_r+0xb34>
 80097e4:	f10a 0308 	add.w	r3, sl, #8
 80097e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	4650      	mov	r0, sl
 80097ee:	b019      	add	sp, #100	@ 0x64
 80097f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	f77f ae37 	ble.w	800946a <_dtoa_r+0x7b2>
 80097fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009800:	2001      	movs	r0, #1
 8009802:	e655      	b.n	80094b0 <_dtoa_r+0x7f8>
 8009804:	9b00      	ldr	r3, [sp, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f77f aed6 	ble.w	80095b8 <_dtoa_r+0x900>
 800980c:	4656      	mov	r6, sl
 800980e:	4621      	mov	r1, r4
 8009810:	4648      	mov	r0, r9
 8009812:	f7ff f9c7 	bl	8008ba4 <quorem>
 8009816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800981a:	f806 8b01 	strb.w	r8, [r6], #1
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	eba6 020a 	sub.w	r2, r6, sl
 8009824:	4293      	cmp	r3, r2
 8009826:	ddb3      	ble.n	8009790 <_dtoa_r+0xad8>
 8009828:	4649      	mov	r1, r9
 800982a:	2300      	movs	r3, #0
 800982c:	220a      	movs	r2, #10
 800982e:	4658      	mov	r0, fp
 8009830:	f000 f968 	bl	8009b04 <__multadd>
 8009834:	4681      	mov	r9, r0
 8009836:	e7ea      	b.n	800980e <_dtoa_r+0xb56>
 8009838:	0800c395 	.word	0x0800c395
 800983c:	0800c319 	.word	0x0800c319

08009840 <_free_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4605      	mov	r5, r0
 8009844:	2900      	cmp	r1, #0
 8009846:	d041      	beq.n	80098cc <_free_r+0x8c>
 8009848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800984c:	1f0c      	subs	r4, r1, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	bfb8      	it	lt
 8009852:	18e4      	addlt	r4, r4, r3
 8009854:	f000 f8e8 	bl	8009a28 <__malloc_lock>
 8009858:	4a1d      	ldr	r2, [pc, #116]	@ (80098d0 <_free_r+0x90>)
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	b933      	cbnz	r3, 800986c <_free_r+0x2c>
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	6014      	str	r4, [r2, #0]
 8009862:	4628      	mov	r0, r5
 8009864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009868:	f000 b8e4 	b.w	8009a34 <__malloc_unlock>
 800986c:	42a3      	cmp	r3, r4
 800986e:	d908      	bls.n	8009882 <_free_r+0x42>
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	1821      	adds	r1, r4, r0
 8009874:	428b      	cmp	r3, r1
 8009876:	bf01      	itttt	eq
 8009878:	6819      	ldreq	r1, [r3, #0]
 800987a:	685b      	ldreq	r3, [r3, #4]
 800987c:	1809      	addeq	r1, r1, r0
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	e7ed      	b.n	800985e <_free_r+0x1e>
 8009882:	461a      	mov	r2, r3
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	b10b      	cbz	r3, 800988c <_free_r+0x4c>
 8009888:	42a3      	cmp	r3, r4
 800988a:	d9fa      	bls.n	8009882 <_free_r+0x42>
 800988c:	6811      	ldr	r1, [r2, #0]
 800988e:	1850      	adds	r0, r2, r1
 8009890:	42a0      	cmp	r0, r4
 8009892:	d10b      	bne.n	80098ac <_free_r+0x6c>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	4401      	add	r1, r0
 8009898:	1850      	adds	r0, r2, r1
 800989a:	4283      	cmp	r3, r0
 800989c:	6011      	str	r1, [r2, #0]
 800989e:	d1e0      	bne.n	8009862 <_free_r+0x22>
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	6053      	str	r3, [r2, #4]
 80098a6:	4408      	add	r0, r1
 80098a8:	6010      	str	r0, [r2, #0]
 80098aa:	e7da      	b.n	8009862 <_free_r+0x22>
 80098ac:	d902      	bls.n	80098b4 <_free_r+0x74>
 80098ae:	230c      	movs	r3, #12
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	e7d6      	b.n	8009862 <_free_r+0x22>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	1821      	adds	r1, r4, r0
 80098b8:	428b      	cmp	r3, r1
 80098ba:	bf04      	itt	eq
 80098bc:	6819      	ldreq	r1, [r3, #0]
 80098be:	685b      	ldreq	r3, [r3, #4]
 80098c0:	6063      	str	r3, [r4, #4]
 80098c2:	bf04      	itt	eq
 80098c4:	1809      	addeq	r1, r1, r0
 80098c6:	6021      	streq	r1, [r4, #0]
 80098c8:	6054      	str	r4, [r2, #4]
 80098ca:	e7ca      	b.n	8009862 <_free_r+0x22>
 80098cc:	bd38      	pop	{r3, r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	20002034 	.word	0x20002034

080098d4 <malloc>:
 80098d4:	4b02      	ldr	r3, [pc, #8]	@ (80098e0 <malloc+0xc>)
 80098d6:	4601      	mov	r1, r0
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	f000 b825 	b.w	8009928 <_malloc_r>
 80098de:	bf00      	nop
 80098e0:	20000108 	.word	0x20000108

080098e4 <sbrk_aligned>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009924 <sbrk_aligned+0x40>)
 80098e8:	460c      	mov	r4, r1
 80098ea:	6831      	ldr	r1, [r6, #0]
 80098ec:	4605      	mov	r5, r0
 80098ee:	b911      	cbnz	r1, 80098f6 <sbrk_aligned+0x12>
 80098f0:	f001 fe0c 	bl	800b50c <_sbrk_r>
 80098f4:	6030      	str	r0, [r6, #0]
 80098f6:	4621      	mov	r1, r4
 80098f8:	4628      	mov	r0, r5
 80098fa:	f001 fe07 	bl	800b50c <_sbrk_r>
 80098fe:	1c43      	adds	r3, r0, #1
 8009900:	d103      	bne.n	800990a <sbrk_aligned+0x26>
 8009902:	f04f 34ff 	mov.w	r4, #4294967295
 8009906:	4620      	mov	r0, r4
 8009908:	bd70      	pop	{r4, r5, r6, pc}
 800990a:	1cc4      	adds	r4, r0, #3
 800990c:	f024 0403 	bic.w	r4, r4, #3
 8009910:	42a0      	cmp	r0, r4
 8009912:	d0f8      	beq.n	8009906 <sbrk_aligned+0x22>
 8009914:	1a21      	subs	r1, r4, r0
 8009916:	4628      	mov	r0, r5
 8009918:	f001 fdf8 	bl	800b50c <_sbrk_r>
 800991c:	3001      	adds	r0, #1
 800991e:	d1f2      	bne.n	8009906 <sbrk_aligned+0x22>
 8009920:	e7ef      	b.n	8009902 <sbrk_aligned+0x1e>
 8009922:	bf00      	nop
 8009924:	20002030 	.word	0x20002030

08009928 <_malloc_r>:
 8009928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800992c:	1ccd      	adds	r5, r1, #3
 800992e:	f025 0503 	bic.w	r5, r5, #3
 8009932:	3508      	adds	r5, #8
 8009934:	2d0c      	cmp	r5, #12
 8009936:	bf38      	it	cc
 8009938:	250c      	movcc	r5, #12
 800993a:	2d00      	cmp	r5, #0
 800993c:	4606      	mov	r6, r0
 800993e:	db01      	blt.n	8009944 <_malloc_r+0x1c>
 8009940:	42a9      	cmp	r1, r5
 8009942:	d904      	bls.n	800994e <_malloc_r+0x26>
 8009944:	230c      	movs	r3, #12
 8009946:	6033      	str	r3, [r6, #0]
 8009948:	2000      	movs	r0, #0
 800994a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a24 <_malloc_r+0xfc>
 8009952:	f000 f869 	bl	8009a28 <__malloc_lock>
 8009956:	f8d8 3000 	ldr.w	r3, [r8]
 800995a:	461c      	mov	r4, r3
 800995c:	bb44      	cbnz	r4, 80099b0 <_malloc_r+0x88>
 800995e:	4629      	mov	r1, r5
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff ffbf 	bl	80098e4 <sbrk_aligned>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	4604      	mov	r4, r0
 800996a:	d158      	bne.n	8009a1e <_malloc_r+0xf6>
 800996c:	f8d8 4000 	ldr.w	r4, [r8]
 8009970:	4627      	mov	r7, r4
 8009972:	2f00      	cmp	r7, #0
 8009974:	d143      	bne.n	80099fe <_malloc_r+0xd6>
 8009976:	2c00      	cmp	r4, #0
 8009978:	d04b      	beq.n	8009a12 <_malloc_r+0xea>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	4639      	mov	r1, r7
 800997e:	4630      	mov	r0, r6
 8009980:	eb04 0903 	add.w	r9, r4, r3
 8009984:	f001 fdc2 	bl	800b50c <_sbrk_r>
 8009988:	4581      	cmp	r9, r0
 800998a:	d142      	bne.n	8009a12 <_malloc_r+0xea>
 800998c:	6821      	ldr	r1, [r4, #0]
 800998e:	1a6d      	subs	r5, r5, r1
 8009990:	4629      	mov	r1, r5
 8009992:	4630      	mov	r0, r6
 8009994:	f7ff ffa6 	bl	80098e4 <sbrk_aligned>
 8009998:	3001      	adds	r0, #1
 800999a:	d03a      	beq.n	8009a12 <_malloc_r+0xea>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	442b      	add	r3, r5
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	f8d8 3000 	ldr.w	r3, [r8]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	bb62      	cbnz	r2, 8009a04 <_malloc_r+0xdc>
 80099aa:	f8c8 7000 	str.w	r7, [r8]
 80099ae:	e00f      	b.n	80099d0 <_malloc_r+0xa8>
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	1b52      	subs	r2, r2, r5
 80099b4:	d420      	bmi.n	80099f8 <_malloc_r+0xd0>
 80099b6:	2a0b      	cmp	r2, #11
 80099b8:	d917      	bls.n	80099ea <_malloc_r+0xc2>
 80099ba:	1961      	adds	r1, r4, r5
 80099bc:	42a3      	cmp	r3, r4
 80099be:	6025      	str	r5, [r4, #0]
 80099c0:	bf18      	it	ne
 80099c2:	6059      	strne	r1, [r3, #4]
 80099c4:	6863      	ldr	r3, [r4, #4]
 80099c6:	bf08      	it	eq
 80099c8:	f8c8 1000 	streq.w	r1, [r8]
 80099cc:	5162      	str	r2, [r4, r5]
 80099ce:	604b      	str	r3, [r1, #4]
 80099d0:	4630      	mov	r0, r6
 80099d2:	f000 f82f 	bl	8009a34 <__malloc_unlock>
 80099d6:	f104 000b 	add.w	r0, r4, #11
 80099da:	1d23      	adds	r3, r4, #4
 80099dc:	f020 0007 	bic.w	r0, r0, #7
 80099e0:	1ac2      	subs	r2, r0, r3
 80099e2:	bf1c      	itt	ne
 80099e4:	1a1b      	subne	r3, r3, r0
 80099e6:	50a3      	strne	r3, [r4, r2]
 80099e8:	e7af      	b.n	800994a <_malloc_r+0x22>
 80099ea:	6862      	ldr	r2, [r4, #4]
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	bf0c      	ite	eq
 80099f0:	f8c8 2000 	streq.w	r2, [r8]
 80099f4:	605a      	strne	r2, [r3, #4]
 80099f6:	e7eb      	b.n	80099d0 <_malloc_r+0xa8>
 80099f8:	4623      	mov	r3, r4
 80099fa:	6864      	ldr	r4, [r4, #4]
 80099fc:	e7ae      	b.n	800995c <_malloc_r+0x34>
 80099fe:	463c      	mov	r4, r7
 8009a00:	687f      	ldr	r7, [r7, #4]
 8009a02:	e7b6      	b.n	8009972 <_malloc_r+0x4a>
 8009a04:	461a      	mov	r2, r3
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	42a3      	cmp	r3, r4
 8009a0a:	d1fb      	bne.n	8009a04 <_malloc_r+0xdc>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6053      	str	r3, [r2, #4]
 8009a10:	e7de      	b.n	80099d0 <_malloc_r+0xa8>
 8009a12:	230c      	movs	r3, #12
 8009a14:	6033      	str	r3, [r6, #0]
 8009a16:	4630      	mov	r0, r6
 8009a18:	f000 f80c 	bl	8009a34 <__malloc_unlock>
 8009a1c:	e794      	b.n	8009948 <_malloc_r+0x20>
 8009a1e:	6005      	str	r5, [r0, #0]
 8009a20:	e7d6      	b.n	80099d0 <_malloc_r+0xa8>
 8009a22:	bf00      	nop
 8009a24:	20002034 	.word	0x20002034

08009a28 <__malloc_lock>:
 8009a28:	4801      	ldr	r0, [pc, #4]	@ (8009a30 <__malloc_lock+0x8>)
 8009a2a:	f7ff b8b2 	b.w	8008b92 <__retarget_lock_acquire_recursive>
 8009a2e:	bf00      	nop
 8009a30:	2000202c 	.word	0x2000202c

08009a34 <__malloc_unlock>:
 8009a34:	4801      	ldr	r0, [pc, #4]	@ (8009a3c <__malloc_unlock+0x8>)
 8009a36:	f7ff b8ad 	b.w	8008b94 <__retarget_lock_release_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	2000202c 	.word	0x2000202c

08009a40 <_Balloc>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	69c6      	ldr	r6, [r0, #28]
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	b976      	cbnz	r6, 8009a68 <_Balloc+0x28>
 8009a4a:	2010      	movs	r0, #16
 8009a4c:	f7ff ff42 	bl	80098d4 <malloc>
 8009a50:	4602      	mov	r2, r0
 8009a52:	61e0      	str	r0, [r4, #28]
 8009a54:	b920      	cbnz	r0, 8009a60 <_Balloc+0x20>
 8009a56:	4b18      	ldr	r3, [pc, #96]	@ (8009ab8 <_Balloc+0x78>)
 8009a58:	4818      	ldr	r0, [pc, #96]	@ (8009abc <_Balloc+0x7c>)
 8009a5a:	216b      	movs	r1, #107	@ 0x6b
 8009a5c:	f001 fd7c 	bl	800b558 <__assert_func>
 8009a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a64:	6006      	str	r6, [r0, #0]
 8009a66:	60c6      	str	r6, [r0, #12]
 8009a68:	69e6      	ldr	r6, [r4, #28]
 8009a6a:	68f3      	ldr	r3, [r6, #12]
 8009a6c:	b183      	cbz	r3, 8009a90 <_Balloc+0x50>
 8009a6e:	69e3      	ldr	r3, [r4, #28]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a76:	b9b8      	cbnz	r0, 8009aa8 <_Balloc+0x68>
 8009a78:	2101      	movs	r1, #1
 8009a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a7e:	1d72      	adds	r2, r6, #5
 8009a80:	0092      	lsls	r2, r2, #2
 8009a82:	4620      	mov	r0, r4
 8009a84:	f001 fd86 	bl	800b594 <_calloc_r>
 8009a88:	b160      	cbz	r0, 8009aa4 <_Balloc+0x64>
 8009a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a8e:	e00e      	b.n	8009aae <_Balloc+0x6e>
 8009a90:	2221      	movs	r2, #33	@ 0x21
 8009a92:	2104      	movs	r1, #4
 8009a94:	4620      	mov	r0, r4
 8009a96:	f001 fd7d 	bl	800b594 <_calloc_r>
 8009a9a:	69e3      	ldr	r3, [r4, #28]
 8009a9c:	60f0      	str	r0, [r6, #12]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e4      	bne.n	8009a6e <_Balloc+0x2e>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	6802      	ldr	r2, [r0, #0]
 8009aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ab4:	e7f7      	b.n	8009aa6 <_Balloc+0x66>
 8009ab6:	bf00      	nop
 8009ab8:	0800c326 	.word	0x0800c326
 8009abc:	0800c3a6 	.word	0x0800c3a6

08009ac0 <_Bfree>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	69c6      	ldr	r6, [r0, #28]
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	b976      	cbnz	r6, 8009ae8 <_Bfree+0x28>
 8009aca:	2010      	movs	r0, #16
 8009acc:	f7ff ff02 	bl	80098d4 <malloc>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	61e8      	str	r0, [r5, #28]
 8009ad4:	b920      	cbnz	r0, 8009ae0 <_Bfree+0x20>
 8009ad6:	4b09      	ldr	r3, [pc, #36]	@ (8009afc <_Bfree+0x3c>)
 8009ad8:	4809      	ldr	r0, [pc, #36]	@ (8009b00 <_Bfree+0x40>)
 8009ada:	218f      	movs	r1, #143	@ 0x8f
 8009adc:	f001 fd3c 	bl	800b558 <__assert_func>
 8009ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ae4:	6006      	str	r6, [r0, #0]
 8009ae6:	60c6      	str	r6, [r0, #12]
 8009ae8:	b13c      	cbz	r4, 8009afa <_Bfree+0x3a>
 8009aea:	69eb      	ldr	r3, [r5, #28]
 8009aec:	6862      	ldr	r2, [r4, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009af4:	6021      	str	r1, [r4, #0]
 8009af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	0800c326 	.word	0x0800c326
 8009b00:	0800c3a6 	.word	0x0800c3a6

08009b04 <__multadd>:
 8009b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b08:	690d      	ldr	r5, [r1, #16]
 8009b0a:	4607      	mov	r7, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	461e      	mov	r6, r3
 8009b10:	f101 0c14 	add.w	ip, r1, #20
 8009b14:	2000      	movs	r0, #0
 8009b16:	f8dc 3000 	ldr.w	r3, [ip]
 8009b1a:	b299      	uxth	r1, r3
 8009b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b20:	0c1e      	lsrs	r6, r3, #16
 8009b22:	0c0b      	lsrs	r3, r1, #16
 8009b24:	fb02 3306 	mla	r3, r2, r6, r3
 8009b28:	b289      	uxth	r1, r1
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b30:	4285      	cmp	r5, r0
 8009b32:	f84c 1b04 	str.w	r1, [ip], #4
 8009b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b3a:	dcec      	bgt.n	8009b16 <__multadd+0x12>
 8009b3c:	b30e      	cbz	r6, 8009b82 <__multadd+0x7e>
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	dc19      	bgt.n	8009b78 <__multadd+0x74>
 8009b44:	6861      	ldr	r1, [r4, #4]
 8009b46:	4638      	mov	r0, r7
 8009b48:	3101      	adds	r1, #1
 8009b4a:	f7ff ff79 	bl	8009a40 <_Balloc>
 8009b4e:	4680      	mov	r8, r0
 8009b50:	b928      	cbnz	r0, 8009b5e <__multadd+0x5a>
 8009b52:	4602      	mov	r2, r0
 8009b54:	4b0c      	ldr	r3, [pc, #48]	@ (8009b88 <__multadd+0x84>)
 8009b56:	480d      	ldr	r0, [pc, #52]	@ (8009b8c <__multadd+0x88>)
 8009b58:	21ba      	movs	r1, #186	@ 0xba
 8009b5a:	f001 fcfd 	bl	800b558 <__assert_func>
 8009b5e:	6922      	ldr	r2, [r4, #16]
 8009b60:	3202      	adds	r2, #2
 8009b62:	f104 010c 	add.w	r1, r4, #12
 8009b66:	0092      	lsls	r2, r2, #2
 8009b68:	300c      	adds	r0, #12
 8009b6a:	f001 fcdf 	bl	800b52c <memcpy>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff ffa5 	bl	8009ac0 <_Bfree>
 8009b76:	4644      	mov	r4, r8
 8009b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	615e      	str	r6, [r3, #20]
 8009b80:	6125      	str	r5, [r4, #16]
 8009b82:	4620      	mov	r0, r4
 8009b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b88:	0800c395 	.word	0x0800c395
 8009b8c:	0800c3a6 	.word	0x0800c3a6

08009b90 <__s2b>:
 8009b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b94:	460c      	mov	r4, r1
 8009b96:	4615      	mov	r5, r2
 8009b98:	461f      	mov	r7, r3
 8009b9a:	2209      	movs	r2, #9
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	db09      	blt.n	8009bc0 <__s2b+0x30>
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff ff47 	bl	8009a40 <_Balloc>
 8009bb2:	b940      	cbnz	r0, 8009bc6 <__s2b+0x36>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	4b19      	ldr	r3, [pc, #100]	@ (8009c1c <__s2b+0x8c>)
 8009bb8:	4819      	ldr	r0, [pc, #100]	@ (8009c20 <__s2b+0x90>)
 8009bba:	21d3      	movs	r1, #211	@ 0xd3
 8009bbc:	f001 fccc 	bl	800b558 <__assert_func>
 8009bc0:	0052      	lsls	r2, r2, #1
 8009bc2:	3101      	adds	r1, #1
 8009bc4:	e7f0      	b.n	8009ba8 <__s2b+0x18>
 8009bc6:	9b08      	ldr	r3, [sp, #32]
 8009bc8:	6143      	str	r3, [r0, #20]
 8009bca:	2d09      	cmp	r5, #9
 8009bcc:	f04f 0301 	mov.w	r3, #1
 8009bd0:	6103      	str	r3, [r0, #16]
 8009bd2:	dd16      	ble.n	8009c02 <__s2b+0x72>
 8009bd4:	f104 0909 	add.w	r9, r4, #9
 8009bd8:	46c8      	mov	r8, r9
 8009bda:	442c      	add	r4, r5
 8009bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009be0:	4601      	mov	r1, r0
 8009be2:	3b30      	subs	r3, #48	@ 0x30
 8009be4:	220a      	movs	r2, #10
 8009be6:	4630      	mov	r0, r6
 8009be8:	f7ff ff8c 	bl	8009b04 <__multadd>
 8009bec:	45a0      	cmp	r8, r4
 8009bee:	d1f5      	bne.n	8009bdc <__s2b+0x4c>
 8009bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8009bf4:	444c      	add	r4, r9
 8009bf6:	1b2d      	subs	r5, r5, r4
 8009bf8:	1963      	adds	r3, r4, r5
 8009bfa:	42bb      	cmp	r3, r7
 8009bfc:	db04      	blt.n	8009c08 <__s2b+0x78>
 8009bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c02:	340a      	adds	r4, #10
 8009c04:	2509      	movs	r5, #9
 8009c06:	e7f6      	b.n	8009bf6 <__s2b+0x66>
 8009c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c0c:	4601      	mov	r1, r0
 8009c0e:	3b30      	subs	r3, #48	@ 0x30
 8009c10:	220a      	movs	r2, #10
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff ff76 	bl	8009b04 <__multadd>
 8009c18:	e7ee      	b.n	8009bf8 <__s2b+0x68>
 8009c1a:	bf00      	nop
 8009c1c:	0800c395 	.word	0x0800c395
 8009c20:	0800c3a6 	.word	0x0800c3a6

08009c24 <__hi0bits>:
 8009c24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c28:	4603      	mov	r3, r0
 8009c2a:	bf36      	itet	cc
 8009c2c:	0403      	lslcc	r3, r0, #16
 8009c2e:	2000      	movcs	r0, #0
 8009c30:	2010      	movcc	r0, #16
 8009c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c36:	bf3c      	itt	cc
 8009c38:	021b      	lslcc	r3, r3, #8
 8009c3a:	3008      	addcc	r0, #8
 8009c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c40:	bf3c      	itt	cc
 8009c42:	011b      	lslcc	r3, r3, #4
 8009c44:	3004      	addcc	r0, #4
 8009c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c4a:	bf3c      	itt	cc
 8009c4c:	009b      	lslcc	r3, r3, #2
 8009c4e:	3002      	addcc	r0, #2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	db05      	blt.n	8009c60 <__hi0bits+0x3c>
 8009c54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c58:	f100 0001 	add.w	r0, r0, #1
 8009c5c:	bf08      	it	eq
 8009c5e:	2020      	moveq	r0, #32
 8009c60:	4770      	bx	lr

08009c62 <__lo0bits>:
 8009c62:	6803      	ldr	r3, [r0, #0]
 8009c64:	4602      	mov	r2, r0
 8009c66:	f013 0007 	ands.w	r0, r3, #7
 8009c6a:	d00b      	beq.n	8009c84 <__lo0bits+0x22>
 8009c6c:	07d9      	lsls	r1, r3, #31
 8009c6e:	d421      	bmi.n	8009cb4 <__lo0bits+0x52>
 8009c70:	0798      	lsls	r0, r3, #30
 8009c72:	bf49      	itett	mi
 8009c74:	085b      	lsrmi	r3, r3, #1
 8009c76:	089b      	lsrpl	r3, r3, #2
 8009c78:	2001      	movmi	r0, #1
 8009c7a:	6013      	strmi	r3, [r2, #0]
 8009c7c:	bf5c      	itt	pl
 8009c7e:	6013      	strpl	r3, [r2, #0]
 8009c80:	2002      	movpl	r0, #2
 8009c82:	4770      	bx	lr
 8009c84:	b299      	uxth	r1, r3
 8009c86:	b909      	cbnz	r1, 8009c8c <__lo0bits+0x2a>
 8009c88:	0c1b      	lsrs	r3, r3, #16
 8009c8a:	2010      	movs	r0, #16
 8009c8c:	b2d9      	uxtb	r1, r3
 8009c8e:	b909      	cbnz	r1, 8009c94 <__lo0bits+0x32>
 8009c90:	3008      	adds	r0, #8
 8009c92:	0a1b      	lsrs	r3, r3, #8
 8009c94:	0719      	lsls	r1, r3, #28
 8009c96:	bf04      	itt	eq
 8009c98:	091b      	lsreq	r3, r3, #4
 8009c9a:	3004      	addeq	r0, #4
 8009c9c:	0799      	lsls	r1, r3, #30
 8009c9e:	bf04      	itt	eq
 8009ca0:	089b      	lsreq	r3, r3, #2
 8009ca2:	3002      	addeq	r0, #2
 8009ca4:	07d9      	lsls	r1, r3, #31
 8009ca6:	d403      	bmi.n	8009cb0 <__lo0bits+0x4e>
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	f100 0001 	add.w	r0, r0, #1
 8009cae:	d003      	beq.n	8009cb8 <__lo0bits+0x56>
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	4770      	bx	lr
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4770      	bx	lr
 8009cb8:	2020      	movs	r0, #32
 8009cba:	4770      	bx	lr

08009cbc <__i2b>:
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	f7ff febd 	bl	8009a40 <_Balloc>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <__i2b+0x1a>
 8009cca:	4b05      	ldr	r3, [pc, #20]	@ (8009ce0 <__i2b+0x24>)
 8009ccc:	4805      	ldr	r0, [pc, #20]	@ (8009ce4 <__i2b+0x28>)
 8009cce:	f240 1145 	movw	r1, #325	@ 0x145
 8009cd2:	f001 fc41 	bl	800b558 <__assert_func>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	6144      	str	r4, [r0, #20]
 8009cda:	6103      	str	r3, [r0, #16]
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	bf00      	nop
 8009ce0:	0800c395 	.word	0x0800c395
 8009ce4:	0800c3a6 	.word	0x0800c3a6

08009ce8 <__multiply>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	4614      	mov	r4, r2
 8009cee:	690a      	ldr	r2, [r1, #16]
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	bfa8      	it	ge
 8009cf6:	4623      	movge	r3, r4
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	bfa4      	itt	ge
 8009cfc:	460c      	movge	r4, r1
 8009cfe:	461f      	movge	r7, r3
 8009d00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d08:	68a3      	ldr	r3, [r4, #8]
 8009d0a:	6861      	ldr	r1, [r4, #4]
 8009d0c:	eb0a 0609 	add.w	r6, sl, r9
 8009d10:	42b3      	cmp	r3, r6
 8009d12:	b085      	sub	sp, #20
 8009d14:	bfb8      	it	lt
 8009d16:	3101      	addlt	r1, #1
 8009d18:	f7ff fe92 	bl	8009a40 <_Balloc>
 8009d1c:	b930      	cbnz	r0, 8009d2c <__multiply+0x44>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b44      	ldr	r3, [pc, #272]	@ (8009e34 <__multiply+0x14c>)
 8009d22:	4845      	ldr	r0, [pc, #276]	@ (8009e38 <__multiply+0x150>)
 8009d24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d28:	f001 fc16 	bl	800b558 <__assert_func>
 8009d2c:	f100 0514 	add.w	r5, r0, #20
 8009d30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d34:	462b      	mov	r3, r5
 8009d36:	2200      	movs	r2, #0
 8009d38:	4543      	cmp	r3, r8
 8009d3a:	d321      	bcc.n	8009d80 <__multiply+0x98>
 8009d3c:	f107 0114 	add.w	r1, r7, #20
 8009d40:	f104 0214 	add.w	r2, r4, #20
 8009d44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d4c:	9302      	str	r3, [sp, #8]
 8009d4e:	1b13      	subs	r3, r2, r4
 8009d50:	3b15      	subs	r3, #21
 8009d52:	f023 0303 	bic.w	r3, r3, #3
 8009d56:	3304      	adds	r3, #4
 8009d58:	f104 0715 	add.w	r7, r4, #21
 8009d5c:	42ba      	cmp	r2, r7
 8009d5e:	bf38      	it	cc
 8009d60:	2304      	movcc	r3, #4
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	9103      	str	r1, [sp, #12]
 8009d68:	428b      	cmp	r3, r1
 8009d6a:	d80c      	bhi.n	8009d86 <__multiply+0x9e>
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	dd03      	ble.n	8009d78 <__multiply+0x90>
 8009d70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d05b      	beq.n	8009e30 <__multiply+0x148>
 8009d78:	6106      	str	r6, [r0, #16]
 8009d7a:	b005      	add	sp, #20
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	f843 2b04 	str.w	r2, [r3], #4
 8009d84:	e7d8      	b.n	8009d38 <__multiply+0x50>
 8009d86:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d8a:	f1ba 0f00 	cmp.w	sl, #0
 8009d8e:	d024      	beq.n	8009dda <__multiply+0xf2>
 8009d90:	f104 0e14 	add.w	lr, r4, #20
 8009d94:	46a9      	mov	r9, r5
 8009d96:	f04f 0c00 	mov.w	ip, #0
 8009d9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d9e:	f8d9 3000 	ldr.w	r3, [r9]
 8009da2:	fa1f fb87 	uxth.w	fp, r7
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009db0:	f8d9 7000 	ldr.w	r7, [r9]
 8009db4:	4463      	add	r3, ip
 8009db6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dba:	fb0a c70b 	mla	r7, sl, fp, ip
 8009dbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009dc8:	4572      	cmp	r2, lr
 8009dca:	f849 3b04 	str.w	r3, [r9], #4
 8009dce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dd2:	d8e2      	bhi.n	8009d9a <__multiply+0xb2>
 8009dd4:	9b01      	ldr	r3, [sp, #4]
 8009dd6:	f845 c003 	str.w	ip, [r5, r3]
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009de0:	3104      	adds	r1, #4
 8009de2:	f1b9 0f00 	cmp.w	r9, #0
 8009de6:	d021      	beq.n	8009e2c <__multiply+0x144>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	f104 0c14 	add.w	ip, r4, #20
 8009dee:	46ae      	mov	lr, r5
 8009df0:	f04f 0a00 	mov.w	sl, #0
 8009df4:	f8bc b000 	ldrh.w	fp, [ip]
 8009df8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009dfc:	fb09 770b 	mla	r7, r9, fp, r7
 8009e00:	4457      	add	r7, sl
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e08:	f84e 3b04 	str.w	r3, [lr], #4
 8009e0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e14:	f8be 3000 	ldrh.w	r3, [lr]
 8009e18:	fb09 330a 	mla	r3, r9, sl, r3
 8009e1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e20:	4562      	cmp	r2, ip
 8009e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e26:	d8e5      	bhi.n	8009df4 <__multiply+0x10c>
 8009e28:	9f01      	ldr	r7, [sp, #4]
 8009e2a:	51eb      	str	r3, [r5, r7]
 8009e2c:	3504      	adds	r5, #4
 8009e2e:	e799      	b.n	8009d64 <__multiply+0x7c>
 8009e30:	3e01      	subs	r6, #1
 8009e32:	e79b      	b.n	8009d6c <__multiply+0x84>
 8009e34:	0800c395 	.word	0x0800c395
 8009e38:	0800c3a6 	.word	0x0800c3a6

08009e3c <__pow5mult>:
 8009e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e40:	4615      	mov	r5, r2
 8009e42:	f012 0203 	ands.w	r2, r2, #3
 8009e46:	4607      	mov	r7, r0
 8009e48:	460e      	mov	r6, r1
 8009e4a:	d007      	beq.n	8009e5c <__pow5mult+0x20>
 8009e4c:	4c25      	ldr	r4, [pc, #148]	@ (8009ee4 <__pow5mult+0xa8>)
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	2300      	movs	r3, #0
 8009e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e56:	f7ff fe55 	bl	8009b04 <__multadd>
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	10ad      	asrs	r5, r5, #2
 8009e5e:	d03d      	beq.n	8009edc <__pow5mult+0xa0>
 8009e60:	69fc      	ldr	r4, [r7, #28]
 8009e62:	b97c      	cbnz	r4, 8009e84 <__pow5mult+0x48>
 8009e64:	2010      	movs	r0, #16
 8009e66:	f7ff fd35 	bl	80098d4 <malloc>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	61f8      	str	r0, [r7, #28]
 8009e6e:	b928      	cbnz	r0, 8009e7c <__pow5mult+0x40>
 8009e70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee8 <__pow5mult+0xac>)
 8009e72:	481e      	ldr	r0, [pc, #120]	@ (8009eec <__pow5mult+0xb0>)
 8009e74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e78:	f001 fb6e 	bl	800b558 <__assert_func>
 8009e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e80:	6004      	str	r4, [r0, #0]
 8009e82:	60c4      	str	r4, [r0, #12]
 8009e84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e8c:	b94c      	cbnz	r4, 8009ea2 <__pow5mult+0x66>
 8009e8e:	f240 2171 	movw	r1, #625	@ 0x271
 8009e92:	4638      	mov	r0, r7
 8009e94:	f7ff ff12 	bl	8009cbc <__i2b>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	f04f 0900 	mov.w	r9, #0
 8009ea6:	07eb      	lsls	r3, r5, #31
 8009ea8:	d50a      	bpl.n	8009ec0 <__pow5mult+0x84>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4622      	mov	r2, r4
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7ff ff1a 	bl	8009ce8 <__multiply>
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4680      	mov	r8, r0
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7ff fe01 	bl	8009ac0 <_Bfree>
 8009ebe:	4646      	mov	r6, r8
 8009ec0:	106d      	asrs	r5, r5, #1
 8009ec2:	d00b      	beq.n	8009edc <__pow5mult+0xa0>
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	b938      	cbnz	r0, 8009ed8 <__pow5mult+0x9c>
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f7ff ff0b 	bl	8009ce8 <__multiply>
 8009ed2:	6020      	str	r0, [r4, #0]
 8009ed4:	f8c0 9000 	str.w	r9, [r0]
 8009ed8:	4604      	mov	r4, r0
 8009eda:	e7e4      	b.n	8009ea6 <__pow5mult+0x6a>
 8009edc:	4630      	mov	r0, r6
 8009ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800c400 	.word	0x0800c400
 8009ee8:	0800c326 	.word	0x0800c326
 8009eec:	0800c3a6 	.word	0x0800c3a6

08009ef0 <__lshift>:
 8009ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	6849      	ldr	r1, [r1, #4]
 8009ef8:	6923      	ldr	r3, [r4, #16]
 8009efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	4607      	mov	r7, r0
 8009f02:	4691      	mov	r9, r2
 8009f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f08:	f108 0601 	add.w	r6, r8, #1
 8009f0c:	42b3      	cmp	r3, r6
 8009f0e:	db0b      	blt.n	8009f28 <__lshift+0x38>
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff fd95 	bl	8009a40 <_Balloc>
 8009f16:	4605      	mov	r5, r0
 8009f18:	b948      	cbnz	r0, 8009f2e <__lshift+0x3e>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <__lshift+0xd0>)
 8009f1e:	4829      	ldr	r0, [pc, #164]	@ (8009fc4 <__lshift+0xd4>)
 8009f20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f24:	f001 fb18 	bl	800b558 <__assert_func>
 8009f28:	3101      	adds	r1, #1
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	e7ee      	b.n	8009f0c <__lshift+0x1c>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f100 0114 	add.w	r1, r0, #20
 8009f34:	f100 0210 	add.w	r2, r0, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	4553      	cmp	r3, sl
 8009f3c:	db33      	blt.n	8009fa6 <__lshift+0xb6>
 8009f3e:	6920      	ldr	r0, [r4, #16]
 8009f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f44:	f104 0314 	add.w	r3, r4, #20
 8009f48:	f019 091f 	ands.w	r9, r9, #31
 8009f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f54:	d02b      	beq.n	8009fae <__lshift+0xbe>
 8009f56:	f1c9 0e20 	rsb	lr, r9, #32
 8009f5a:	468a      	mov	sl, r1
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	fa00 f009 	lsl.w	r0, r0, r9
 8009f64:	4310      	orrs	r0, r2
 8009f66:	f84a 0b04 	str.w	r0, [sl], #4
 8009f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f6e:	459c      	cmp	ip, r3
 8009f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f74:	d8f3      	bhi.n	8009f5e <__lshift+0x6e>
 8009f76:	ebac 0304 	sub.w	r3, ip, r4
 8009f7a:	3b15      	subs	r3, #21
 8009f7c:	f023 0303 	bic.w	r3, r3, #3
 8009f80:	3304      	adds	r3, #4
 8009f82:	f104 0015 	add.w	r0, r4, #21
 8009f86:	4584      	cmp	ip, r0
 8009f88:	bf38      	it	cc
 8009f8a:	2304      	movcc	r3, #4
 8009f8c:	50ca      	str	r2, [r1, r3]
 8009f8e:	b10a      	cbz	r2, 8009f94 <__lshift+0xa4>
 8009f90:	f108 0602 	add.w	r6, r8, #2
 8009f94:	3e01      	subs	r6, #1
 8009f96:	4638      	mov	r0, r7
 8009f98:	612e      	str	r6, [r5, #16]
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	f7ff fd90 	bl	8009ac0 <_Bfree>
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009faa:	3301      	adds	r3, #1
 8009fac:	e7c5      	b.n	8009f3a <__lshift+0x4a>
 8009fae:	3904      	subs	r1, #4
 8009fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fb8:	459c      	cmp	ip, r3
 8009fba:	d8f9      	bhi.n	8009fb0 <__lshift+0xc0>
 8009fbc:	e7ea      	b.n	8009f94 <__lshift+0xa4>
 8009fbe:	bf00      	nop
 8009fc0:	0800c395 	.word	0x0800c395
 8009fc4:	0800c3a6 	.word	0x0800c3a6

08009fc8 <__mcmp>:
 8009fc8:	690a      	ldr	r2, [r1, #16]
 8009fca:	4603      	mov	r3, r0
 8009fcc:	6900      	ldr	r0, [r0, #16]
 8009fce:	1a80      	subs	r0, r0, r2
 8009fd0:	b530      	push	{r4, r5, lr}
 8009fd2:	d10e      	bne.n	8009ff2 <__mcmp+0x2a>
 8009fd4:	3314      	adds	r3, #20
 8009fd6:	3114      	adds	r1, #20
 8009fd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fe8:	4295      	cmp	r5, r2
 8009fea:	d003      	beq.n	8009ff4 <__mcmp+0x2c>
 8009fec:	d205      	bcs.n	8009ffa <__mcmp+0x32>
 8009fee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff2:	bd30      	pop	{r4, r5, pc}
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d3f3      	bcc.n	8009fe0 <__mcmp+0x18>
 8009ff8:	e7fb      	b.n	8009ff2 <__mcmp+0x2a>
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	e7f9      	b.n	8009ff2 <__mcmp+0x2a>
	...

0800a000 <__mdiff>:
 800a000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	4689      	mov	r9, r1
 800a006:	4606      	mov	r6, r0
 800a008:	4611      	mov	r1, r2
 800a00a:	4648      	mov	r0, r9
 800a00c:	4614      	mov	r4, r2
 800a00e:	f7ff ffdb 	bl	8009fc8 <__mcmp>
 800a012:	1e05      	subs	r5, r0, #0
 800a014:	d112      	bne.n	800a03c <__mdiff+0x3c>
 800a016:	4629      	mov	r1, r5
 800a018:	4630      	mov	r0, r6
 800a01a:	f7ff fd11 	bl	8009a40 <_Balloc>
 800a01e:	4602      	mov	r2, r0
 800a020:	b928      	cbnz	r0, 800a02e <__mdiff+0x2e>
 800a022:	4b3f      	ldr	r3, [pc, #252]	@ (800a120 <__mdiff+0x120>)
 800a024:	f240 2137 	movw	r1, #567	@ 0x237
 800a028:	483e      	ldr	r0, [pc, #248]	@ (800a124 <__mdiff+0x124>)
 800a02a:	f001 fa95 	bl	800b558 <__assert_func>
 800a02e:	2301      	movs	r3, #1
 800a030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a034:	4610      	mov	r0, r2
 800a036:	b003      	add	sp, #12
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	bfbc      	itt	lt
 800a03e:	464b      	movlt	r3, r9
 800a040:	46a1      	movlt	r9, r4
 800a042:	4630      	mov	r0, r6
 800a044:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a048:	bfba      	itte	lt
 800a04a:	461c      	movlt	r4, r3
 800a04c:	2501      	movlt	r5, #1
 800a04e:	2500      	movge	r5, #0
 800a050:	f7ff fcf6 	bl	8009a40 <_Balloc>
 800a054:	4602      	mov	r2, r0
 800a056:	b918      	cbnz	r0, 800a060 <__mdiff+0x60>
 800a058:	4b31      	ldr	r3, [pc, #196]	@ (800a120 <__mdiff+0x120>)
 800a05a:	f240 2145 	movw	r1, #581	@ 0x245
 800a05e:	e7e3      	b.n	800a028 <__mdiff+0x28>
 800a060:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a064:	6926      	ldr	r6, [r4, #16]
 800a066:	60c5      	str	r5, [r0, #12]
 800a068:	f109 0310 	add.w	r3, r9, #16
 800a06c:	f109 0514 	add.w	r5, r9, #20
 800a070:	f104 0e14 	add.w	lr, r4, #20
 800a074:	f100 0b14 	add.w	fp, r0, #20
 800a078:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a07c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	46d9      	mov	r9, fp
 800a084:	f04f 0c00 	mov.w	ip, #0
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a08e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	fa1f f38a 	uxth.w	r3, sl
 800a098:	4619      	mov	r1, r3
 800a09a:	b283      	uxth	r3, r0
 800a09c:	1acb      	subs	r3, r1, r3
 800a09e:	0c00      	lsrs	r0, r0, #16
 800a0a0:	4463      	add	r3, ip
 800a0a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0b0:	4576      	cmp	r6, lr
 800a0b2:	f849 3b04 	str.w	r3, [r9], #4
 800a0b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0ba:	d8e5      	bhi.n	800a088 <__mdiff+0x88>
 800a0bc:	1b33      	subs	r3, r6, r4
 800a0be:	3b15      	subs	r3, #21
 800a0c0:	f023 0303 	bic.w	r3, r3, #3
 800a0c4:	3415      	adds	r4, #21
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	bf38      	it	cc
 800a0cc:	2304      	movcc	r3, #4
 800a0ce:	441d      	add	r5, r3
 800a0d0:	445b      	add	r3, fp
 800a0d2:	461e      	mov	r6, r3
 800a0d4:	462c      	mov	r4, r5
 800a0d6:	4544      	cmp	r4, r8
 800a0d8:	d30e      	bcc.n	800a0f8 <__mdiff+0xf8>
 800a0da:	f108 0103 	add.w	r1, r8, #3
 800a0de:	1b49      	subs	r1, r1, r5
 800a0e0:	f021 0103 	bic.w	r1, r1, #3
 800a0e4:	3d03      	subs	r5, #3
 800a0e6:	45a8      	cmp	r8, r5
 800a0e8:	bf38      	it	cc
 800a0ea:	2100      	movcc	r1, #0
 800a0ec:	440b      	add	r3, r1
 800a0ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0f2:	b191      	cbz	r1, 800a11a <__mdiff+0x11a>
 800a0f4:	6117      	str	r7, [r2, #16]
 800a0f6:	e79d      	b.n	800a034 <__mdiff+0x34>
 800a0f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a0fc:	46e6      	mov	lr, ip
 800a0fe:	0c08      	lsrs	r0, r1, #16
 800a100:	fa1c fc81 	uxtah	ip, ip, r1
 800a104:	4471      	add	r1, lr
 800a106:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a10a:	b289      	uxth	r1, r1
 800a10c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a110:	f846 1b04 	str.w	r1, [r6], #4
 800a114:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a118:	e7dd      	b.n	800a0d6 <__mdiff+0xd6>
 800a11a:	3f01      	subs	r7, #1
 800a11c:	e7e7      	b.n	800a0ee <__mdiff+0xee>
 800a11e:	bf00      	nop
 800a120:	0800c395 	.word	0x0800c395
 800a124:	0800c3a6 	.word	0x0800c3a6

0800a128 <__ulp>:
 800a128:	b082      	sub	sp, #8
 800a12a:	ed8d 0b00 	vstr	d0, [sp]
 800a12e:	9a01      	ldr	r2, [sp, #4]
 800a130:	4b0f      	ldr	r3, [pc, #60]	@ (800a170 <__ulp+0x48>)
 800a132:	4013      	ands	r3, r2
 800a134:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dc08      	bgt.n	800a14e <__ulp+0x26>
 800a13c:	425b      	negs	r3, r3
 800a13e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a142:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a146:	da04      	bge.n	800a152 <__ulp+0x2a>
 800a148:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a14c:	4113      	asrs	r3, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	e008      	b.n	800a164 <__ulp+0x3c>
 800a152:	f1a2 0314 	sub.w	r3, r2, #20
 800a156:	2b1e      	cmp	r3, #30
 800a158:	bfda      	itte	le
 800a15a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a15e:	40da      	lsrle	r2, r3
 800a160:	2201      	movgt	r2, #1
 800a162:	2300      	movs	r3, #0
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	ec41 0b10 	vmov	d0, r0, r1
 800a16c:	b002      	add	sp, #8
 800a16e:	4770      	bx	lr
 800a170:	7ff00000 	.word	0x7ff00000

0800a174 <__b2d>:
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	6906      	ldr	r6, [r0, #16]
 800a17a:	f100 0814 	add.w	r8, r0, #20
 800a17e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a182:	1f37      	subs	r7, r6, #4
 800a184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a188:	4610      	mov	r0, r2
 800a18a:	f7ff fd4b 	bl	8009c24 <__hi0bits>
 800a18e:	f1c0 0320 	rsb	r3, r0, #32
 800a192:	280a      	cmp	r0, #10
 800a194:	600b      	str	r3, [r1, #0]
 800a196:	491b      	ldr	r1, [pc, #108]	@ (800a204 <__b2d+0x90>)
 800a198:	dc15      	bgt.n	800a1c6 <__b2d+0x52>
 800a19a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a19e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1a2:	45b8      	cmp	r8, r7
 800a1a4:	ea43 0501 	orr.w	r5, r3, r1
 800a1a8:	bf34      	ite	cc
 800a1aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1ae:	2300      	movcs	r3, #0
 800a1b0:	3015      	adds	r0, #21
 800a1b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a1b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1ba:	4303      	orrs	r3, r0
 800a1bc:	461c      	mov	r4, r3
 800a1be:	ec45 4b10 	vmov	d0, r4, r5
 800a1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c6:	45b8      	cmp	r8, r7
 800a1c8:	bf3a      	itte	cc
 800a1ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a1d2:	2300      	movcs	r3, #0
 800a1d4:	380b      	subs	r0, #11
 800a1d6:	d012      	beq.n	800a1fe <__b2d+0x8a>
 800a1d8:	f1c0 0120 	rsb	r1, r0, #32
 800a1dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a1e0:	4082      	lsls	r2, r0
 800a1e2:	4322      	orrs	r2, r4
 800a1e4:	4547      	cmp	r7, r8
 800a1e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a1ea:	bf8c      	ite	hi
 800a1ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a1f0:	2200      	movls	r2, #0
 800a1f2:	4083      	lsls	r3, r0
 800a1f4:	40ca      	lsrs	r2, r1
 800a1f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	e7de      	b.n	800a1bc <__b2d+0x48>
 800a1fe:	ea42 0501 	orr.w	r5, r2, r1
 800a202:	e7db      	b.n	800a1bc <__b2d+0x48>
 800a204:	3ff00000 	.word	0x3ff00000

0800a208 <__d2b>:
 800a208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a20c:	460f      	mov	r7, r1
 800a20e:	2101      	movs	r1, #1
 800a210:	ec59 8b10 	vmov	r8, r9, d0
 800a214:	4616      	mov	r6, r2
 800a216:	f7ff fc13 	bl	8009a40 <_Balloc>
 800a21a:	4604      	mov	r4, r0
 800a21c:	b930      	cbnz	r0, 800a22c <__d2b+0x24>
 800a21e:	4602      	mov	r2, r0
 800a220:	4b23      	ldr	r3, [pc, #140]	@ (800a2b0 <__d2b+0xa8>)
 800a222:	4824      	ldr	r0, [pc, #144]	@ (800a2b4 <__d2b+0xac>)
 800a224:	f240 310f 	movw	r1, #783	@ 0x30f
 800a228:	f001 f996 	bl	800b558 <__assert_func>
 800a22c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a234:	b10d      	cbz	r5, 800a23a <__d2b+0x32>
 800a236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	f1b8 0300 	subs.w	r3, r8, #0
 800a240:	d023      	beq.n	800a28a <__d2b+0x82>
 800a242:	4668      	mov	r0, sp
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	f7ff fd0c 	bl	8009c62 <__lo0bits>
 800a24a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a24e:	b1d0      	cbz	r0, 800a286 <__d2b+0x7e>
 800a250:	f1c0 0320 	rsb	r3, r0, #32
 800a254:	fa02 f303 	lsl.w	r3, r2, r3
 800a258:	430b      	orrs	r3, r1
 800a25a:	40c2      	lsrs	r2, r0
 800a25c:	6163      	str	r3, [r4, #20]
 800a25e:	9201      	str	r2, [sp, #4]
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	61a3      	str	r3, [r4, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	bf0c      	ite	eq
 800a268:	2201      	moveq	r2, #1
 800a26a:	2202      	movne	r2, #2
 800a26c:	6122      	str	r2, [r4, #16]
 800a26e:	b1a5      	cbz	r5, 800a29a <__d2b+0x92>
 800a270:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a274:	4405      	add	r5, r0
 800a276:	603d      	str	r5, [r7, #0]
 800a278:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a27c:	6030      	str	r0, [r6, #0]
 800a27e:	4620      	mov	r0, r4
 800a280:	b003      	add	sp, #12
 800a282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a286:	6161      	str	r1, [r4, #20]
 800a288:	e7ea      	b.n	800a260 <__d2b+0x58>
 800a28a:	a801      	add	r0, sp, #4
 800a28c:	f7ff fce9 	bl	8009c62 <__lo0bits>
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	6163      	str	r3, [r4, #20]
 800a294:	3020      	adds	r0, #32
 800a296:	2201      	movs	r2, #1
 800a298:	e7e8      	b.n	800a26c <__d2b+0x64>
 800a29a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a29e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a2a2:	6038      	str	r0, [r7, #0]
 800a2a4:	6918      	ldr	r0, [r3, #16]
 800a2a6:	f7ff fcbd 	bl	8009c24 <__hi0bits>
 800a2aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ae:	e7e5      	b.n	800a27c <__d2b+0x74>
 800a2b0:	0800c395 	.word	0x0800c395
 800a2b4:	0800c3a6 	.word	0x0800c3a6

0800a2b8 <__ratio>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	e9cd 1000 	strd	r1, r0, [sp]
 800a2c2:	a902      	add	r1, sp, #8
 800a2c4:	f7ff ff56 	bl	800a174 <__b2d>
 800a2c8:	9800      	ldr	r0, [sp, #0]
 800a2ca:	a903      	add	r1, sp, #12
 800a2cc:	ec55 4b10 	vmov	r4, r5, d0
 800a2d0:	f7ff ff50 	bl	800a174 <__b2d>
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	6919      	ldr	r1, [r3, #16]
 800a2d8:	9b00      	ldr	r3, [sp, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	1ac9      	subs	r1, r1, r3
 800a2de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a2e2:	1a9b      	subs	r3, r3, r2
 800a2e4:	ec5b ab10 	vmov	sl, fp, d0
 800a2e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bfce      	itee	gt
 800a2f0:	462a      	movgt	r2, r5
 800a2f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2f6:	465a      	movle	r2, fp
 800a2f8:	462f      	mov	r7, r5
 800a2fa:	46d9      	mov	r9, fp
 800a2fc:	bfcc      	ite	gt
 800a2fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a302:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a306:	464b      	mov	r3, r9
 800a308:	4652      	mov	r2, sl
 800a30a:	4620      	mov	r0, r4
 800a30c:	4639      	mov	r1, r7
 800a30e:	f7f6 faa5 	bl	800085c <__aeabi_ddiv>
 800a312:	ec41 0b10 	vmov	d0, r0, r1
 800a316:	b005      	add	sp, #20
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a31c <__copybits>:
 800a31c:	3901      	subs	r1, #1
 800a31e:	b570      	push	{r4, r5, r6, lr}
 800a320:	1149      	asrs	r1, r1, #5
 800a322:	6914      	ldr	r4, [r2, #16]
 800a324:	3101      	adds	r1, #1
 800a326:	f102 0314 	add.w	r3, r2, #20
 800a32a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a32e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a332:	1f05      	subs	r5, r0, #4
 800a334:	42a3      	cmp	r3, r4
 800a336:	d30c      	bcc.n	800a352 <__copybits+0x36>
 800a338:	1aa3      	subs	r3, r4, r2
 800a33a:	3b11      	subs	r3, #17
 800a33c:	f023 0303 	bic.w	r3, r3, #3
 800a340:	3211      	adds	r2, #17
 800a342:	42a2      	cmp	r2, r4
 800a344:	bf88      	it	hi
 800a346:	2300      	movhi	r3, #0
 800a348:	4418      	add	r0, r3
 800a34a:	2300      	movs	r3, #0
 800a34c:	4288      	cmp	r0, r1
 800a34e:	d305      	bcc.n	800a35c <__copybits+0x40>
 800a350:	bd70      	pop	{r4, r5, r6, pc}
 800a352:	f853 6b04 	ldr.w	r6, [r3], #4
 800a356:	f845 6f04 	str.w	r6, [r5, #4]!
 800a35a:	e7eb      	b.n	800a334 <__copybits+0x18>
 800a35c:	f840 3b04 	str.w	r3, [r0], #4
 800a360:	e7f4      	b.n	800a34c <__copybits+0x30>

0800a362 <__any_on>:
 800a362:	f100 0214 	add.w	r2, r0, #20
 800a366:	6900      	ldr	r0, [r0, #16]
 800a368:	114b      	asrs	r3, r1, #5
 800a36a:	4298      	cmp	r0, r3
 800a36c:	b510      	push	{r4, lr}
 800a36e:	db11      	blt.n	800a394 <__any_on+0x32>
 800a370:	dd0a      	ble.n	800a388 <__any_on+0x26>
 800a372:	f011 011f 	ands.w	r1, r1, #31
 800a376:	d007      	beq.n	800a388 <__any_on+0x26>
 800a378:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a37c:	fa24 f001 	lsr.w	r0, r4, r1
 800a380:	fa00 f101 	lsl.w	r1, r0, r1
 800a384:	428c      	cmp	r4, r1
 800a386:	d10b      	bne.n	800a3a0 <__any_on+0x3e>
 800a388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d803      	bhi.n	800a398 <__any_on+0x36>
 800a390:	2000      	movs	r0, #0
 800a392:	bd10      	pop	{r4, pc}
 800a394:	4603      	mov	r3, r0
 800a396:	e7f7      	b.n	800a388 <__any_on+0x26>
 800a398:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d0f5      	beq.n	800a38c <__any_on+0x2a>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e7f6      	b.n	800a392 <__any_on+0x30>

0800a3a4 <sulp>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	ec45 4b10 	vmov	d0, r4, r5
 800a3ae:	4616      	mov	r6, r2
 800a3b0:	f7ff feba 	bl	800a128 <__ulp>
 800a3b4:	ec51 0b10 	vmov	r0, r1, d0
 800a3b8:	b17e      	cbz	r6, 800a3da <sulp+0x36>
 800a3ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dd09      	ble.n	800a3da <sulp+0x36>
 800a3c6:	051b      	lsls	r3, r3, #20
 800a3c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a3cc:	2400      	movs	r4, #0
 800a3ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	462b      	mov	r3, r5
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	ec41 0b10 	vmov	d0, r0, r1
 800a3de:	bd70      	pop	{r4, r5, r6, pc}

0800a3e0 <_strtod_l>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	b09f      	sub	sp, #124	@ 0x7c
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800a3ee:	9005      	str	r0, [sp, #20]
 800a3f0:	f04f 0a00 	mov.w	sl, #0
 800a3f4:	f04f 0b00 	mov.w	fp, #0
 800a3f8:	460a      	mov	r2, r1
 800a3fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3fc:	7811      	ldrb	r1, [r2, #0]
 800a3fe:	292b      	cmp	r1, #43	@ 0x2b
 800a400:	d04a      	beq.n	800a498 <_strtod_l+0xb8>
 800a402:	d838      	bhi.n	800a476 <_strtod_l+0x96>
 800a404:	290d      	cmp	r1, #13
 800a406:	d832      	bhi.n	800a46e <_strtod_l+0x8e>
 800a408:	2908      	cmp	r1, #8
 800a40a:	d832      	bhi.n	800a472 <_strtod_l+0x92>
 800a40c:	2900      	cmp	r1, #0
 800a40e:	d03b      	beq.n	800a488 <_strtod_l+0xa8>
 800a410:	2200      	movs	r2, #0
 800a412:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a414:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a416:	782a      	ldrb	r2, [r5, #0]
 800a418:	2a30      	cmp	r2, #48	@ 0x30
 800a41a:	f040 80b3 	bne.w	800a584 <_strtod_l+0x1a4>
 800a41e:	786a      	ldrb	r2, [r5, #1]
 800a420:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a424:	2a58      	cmp	r2, #88	@ 0x58
 800a426:	d16e      	bne.n	800a506 <_strtod_l+0x126>
 800a428:	9302      	str	r3, [sp, #8]
 800a42a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	4a8e      	ldr	r2, [pc, #568]	@ (800a66c <_strtod_l+0x28c>)
 800a434:	9805      	ldr	r0, [sp, #20]
 800a436:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a438:	a919      	add	r1, sp, #100	@ 0x64
 800a43a:	f001 f927 	bl	800b68c <__gethex>
 800a43e:	f010 060f 	ands.w	r6, r0, #15
 800a442:	4604      	mov	r4, r0
 800a444:	d005      	beq.n	800a452 <_strtod_l+0x72>
 800a446:	2e06      	cmp	r6, #6
 800a448:	d128      	bne.n	800a49c <_strtod_l+0xbc>
 800a44a:	3501      	adds	r5, #1
 800a44c:	2300      	movs	r3, #0
 800a44e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a454:	2b00      	cmp	r3, #0
 800a456:	f040 858e 	bne.w	800af76 <_strtod_l+0xb96>
 800a45a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a45c:	b1cb      	cbz	r3, 800a492 <_strtod_l+0xb2>
 800a45e:	4652      	mov	r2, sl
 800a460:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a464:	ec43 2b10 	vmov	d0, r2, r3
 800a468:	b01f      	add	sp, #124	@ 0x7c
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	2920      	cmp	r1, #32
 800a470:	d1ce      	bne.n	800a410 <_strtod_l+0x30>
 800a472:	3201      	adds	r2, #1
 800a474:	e7c1      	b.n	800a3fa <_strtod_l+0x1a>
 800a476:	292d      	cmp	r1, #45	@ 0x2d
 800a478:	d1ca      	bne.n	800a410 <_strtod_l+0x30>
 800a47a:	2101      	movs	r1, #1
 800a47c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a47e:	1c51      	adds	r1, r2, #1
 800a480:	9119      	str	r1, [sp, #100]	@ 0x64
 800a482:	7852      	ldrb	r2, [r2, #1]
 800a484:	2a00      	cmp	r2, #0
 800a486:	d1c5      	bne.n	800a414 <_strtod_l+0x34>
 800a488:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a48a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 8570 	bne.w	800af72 <_strtod_l+0xb92>
 800a492:	4652      	mov	r2, sl
 800a494:	465b      	mov	r3, fp
 800a496:	e7e5      	b.n	800a464 <_strtod_l+0x84>
 800a498:	2100      	movs	r1, #0
 800a49a:	e7ef      	b.n	800a47c <_strtod_l+0x9c>
 800a49c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a49e:	b13a      	cbz	r2, 800a4b0 <_strtod_l+0xd0>
 800a4a0:	2135      	movs	r1, #53	@ 0x35
 800a4a2:	a81c      	add	r0, sp, #112	@ 0x70
 800a4a4:	f7ff ff3a 	bl	800a31c <__copybits>
 800a4a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4aa:	9805      	ldr	r0, [sp, #20]
 800a4ac:	f7ff fb08 	bl	8009ac0 <_Bfree>
 800a4b0:	3e01      	subs	r6, #1
 800a4b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a4b4:	2e04      	cmp	r6, #4
 800a4b6:	d806      	bhi.n	800a4c6 <_strtod_l+0xe6>
 800a4b8:	e8df f006 	tbb	[pc, r6]
 800a4bc:	201d0314 	.word	0x201d0314
 800a4c0:	14          	.byte	0x14
 800a4c1:	00          	.byte	0x00
 800a4c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a4c6:	05e1      	lsls	r1, r4, #23
 800a4c8:	bf48      	it	mi
 800a4ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a4ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4d2:	0d1b      	lsrs	r3, r3, #20
 800a4d4:	051b      	lsls	r3, r3, #20
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1bb      	bne.n	800a452 <_strtod_l+0x72>
 800a4da:	f7fe fb2f 	bl	8008b3c <__errno>
 800a4de:	2322      	movs	r3, #34	@ 0x22
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	e7b6      	b.n	800a452 <_strtod_l+0x72>
 800a4e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a4e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a4ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a4f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a4f4:	e7e7      	b.n	800a4c6 <_strtod_l+0xe6>
 800a4f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a674 <_strtod_l+0x294>
 800a4fa:	e7e4      	b.n	800a4c6 <_strtod_l+0xe6>
 800a4fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a500:	f04f 3aff 	mov.w	sl, #4294967295
 800a504:	e7df      	b.n	800a4c6 <_strtod_l+0xe6>
 800a506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b30      	cmp	r3, #48	@ 0x30
 800a510:	d0f9      	beq.n	800a506 <_strtod_l+0x126>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d09d      	beq.n	800a452 <_strtod_l+0x72>
 800a516:	2301      	movs	r3, #1
 800a518:	9309      	str	r3, [sp, #36]	@ 0x24
 800a51a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a51c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a51e:	2300      	movs	r3, #0
 800a520:	9308      	str	r3, [sp, #32]
 800a522:	930a      	str	r3, [sp, #40]	@ 0x28
 800a524:	461f      	mov	r7, r3
 800a526:	220a      	movs	r2, #10
 800a528:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a52a:	7805      	ldrb	r5, [r0, #0]
 800a52c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a530:	b2d9      	uxtb	r1, r3
 800a532:	2909      	cmp	r1, #9
 800a534:	d928      	bls.n	800a588 <_strtod_l+0x1a8>
 800a536:	494e      	ldr	r1, [pc, #312]	@ (800a670 <_strtod_l+0x290>)
 800a538:	2201      	movs	r2, #1
 800a53a:	f000 ffd5 	bl	800b4e8 <strncmp>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d032      	beq.n	800a5a8 <_strtod_l+0x1c8>
 800a542:	2000      	movs	r0, #0
 800a544:	462a      	mov	r2, r5
 800a546:	4681      	mov	r9, r0
 800a548:	463d      	mov	r5, r7
 800a54a:	4603      	mov	r3, r0
 800a54c:	2a65      	cmp	r2, #101	@ 0x65
 800a54e:	d001      	beq.n	800a554 <_strtod_l+0x174>
 800a550:	2a45      	cmp	r2, #69	@ 0x45
 800a552:	d114      	bne.n	800a57e <_strtod_l+0x19e>
 800a554:	b91d      	cbnz	r5, 800a55e <_strtod_l+0x17e>
 800a556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a558:	4302      	orrs	r2, r0
 800a55a:	d095      	beq.n	800a488 <_strtod_l+0xa8>
 800a55c:	2500      	movs	r5, #0
 800a55e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a560:	1c62      	adds	r2, r4, #1
 800a562:	9219      	str	r2, [sp, #100]	@ 0x64
 800a564:	7862      	ldrb	r2, [r4, #1]
 800a566:	2a2b      	cmp	r2, #43	@ 0x2b
 800a568:	d077      	beq.n	800a65a <_strtod_l+0x27a>
 800a56a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a56c:	d07b      	beq.n	800a666 <_strtod_l+0x286>
 800a56e:	f04f 0c00 	mov.w	ip, #0
 800a572:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a576:	2909      	cmp	r1, #9
 800a578:	f240 8082 	bls.w	800a680 <_strtod_l+0x2a0>
 800a57c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a57e:	f04f 0800 	mov.w	r8, #0
 800a582:	e0a2      	b.n	800a6ca <_strtod_l+0x2ea>
 800a584:	2300      	movs	r3, #0
 800a586:	e7c7      	b.n	800a518 <_strtod_l+0x138>
 800a588:	2f08      	cmp	r7, #8
 800a58a:	bfd5      	itete	le
 800a58c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a58e:	9908      	ldrgt	r1, [sp, #32]
 800a590:	fb02 3301 	mlale	r3, r2, r1, r3
 800a594:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a598:	f100 0001 	add.w	r0, r0, #1
 800a59c:	bfd4      	ite	le
 800a59e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a5a0:	9308      	strgt	r3, [sp, #32]
 800a5a2:	3701      	adds	r7, #1
 800a5a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5a6:	e7bf      	b.n	800a528 <_strtod_l+0x148>
 800a5a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5ae:	785a      	ldrb	r2, [r3, #1]
 800a5b0:	b37f      	cbz	r7, 800a612 <_strtod_l+0x232>
 800a5b2:	4681      	mov	r9, r0
 800a5b4:	463d      	mov	r5, r7
 800a5b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a5ba:	2b09      	cmp	r3, #9
 800a5bc:	d912      	bls.n	800a5e4 <_strtod_l+0x204>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e7c4      	b.n	800a54c <_strtod_l+0x16c>
 800a5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5c8:	785a      	ldrb	r2, [r3, #1]
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	2a30      	cmp	r2, #48	@ 0x30
 800a5ce:	d0f8      	beq.n	800a5c2 <_strtod_l+0x1e2>
 800a5d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a5d4:	2b08      	cmp	r3, #8
 800a5d6:	f200 84d3 	bhi.w	800af80 <_strtod_l+0xba0>
 800a5da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5de:	4681      	mov	r9, r0
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	3a30      	subs	r2, #48	@ 0x30
 800a5e6:	f100 0301 	add.w	r3, r0, #1
 800a5ea:	d02a      	beq.n	800a642 <_strtod_l+0x262>
 800a5ec:	4499      	add	r9, r3
 800a5ee:	eb00 0c05 	add.w	ip, r0, r5
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	210a      	movs	r1, #10
 800a5f6:	4563      	cmp	r3, ip
 800a5f8:	d10d      	bne.n	800a616 <_strtod_l+0x236>
 800a5fa:	1c69      	adds	r1, r5, #1
 800a5fc:	4401      	add	r1, r0
 800a5fe:	4428      	add	r0, r5
 800a600:	2808      	cmp	r0, #8
 800a602:	dc16      	bgt.n	800a632 <_strtod_l+0x252>
 800a604:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a606:	230a      	movs	r3, #10
 800a608:	fb03 2300 	mla	r3, r3, r0, r2
 800a60c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a60e:	2300      	movs	r3, #0
 800a610:	e018      	b.n	800a644 <_strtod_l+0x264>
 800a612:	4638      	mov	r0, r7
 800a614:	e7da      	b.n	800a5cc <_strtod_l+0x1ec>
 800a616:	2b08      	cmp	r3, #8
 800a618:	f103 0301 	add.w	r3, r3, #1
 800a61c:	dc03      	bgt.n	800a626 <_strtod_l+0x246>
 800a61e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a620:	434e      	muls	r6, r1
 800a622:	960a      	str	r6, [sp, #40]	@ 0x28
 800a624:	e7e7      	b.n	800a5f6 <_strtod_l+0x216>
 800a626:	2b10      	cmp	r3, #16
 800a628:	bfde      	ittt	le
 800a62a:	9e08      	ldrle	r6, [sp, #32]
 800a62c:	434e      	mulle	r6, r1
 800a62e:	9608      	strle	r6, [sp, #32]
 800a630:	e7e1      	b.n	800a5f6 <_strtod_l+0x216>
 800a632:	280f      	cmp	r0, #15
 800a634:	dceb      	bgt.n	800a60e <_strtod_l+0x22e>
 800a636:	9808      	ldr	r0, [sp, #32]
 800a638:	230a      	movs	r3, #10
 800a63a:	fb03 2300 	mla	r3, r3, r0, r2
 800a63e:	9308      	str	r3, [sp, #32]
 800a640:	e7e5      	b.n	800a60e <_strtod_l+0x22e>
 800a642:	4629      	mov	r1, r5
 800a644:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a646:	1c50      	adds	r0, r2, #1
 800a648:	9019      	str	r0, [sp, #100]	@ 0x64
 800a64a:	7852      	ldrb	r2, [r2, #1]
 800a64c:	4618      	mov	r0, r3
 800a64e:	460d      	mov	r5, r1
 800a650:	e7b1      	b.n	800a5b6 <_strtod_l+0x1d6>
 800a652:	f04f 0900 	mov.w	r9, #0
 800a656:	2301      	movs	r3, #1
 800a658:	e77d      	b.n	800a556 <_strtod_l+0x176>
 800a65a:	f04f 0c00 	mov.w	ip, #0
 800a65e:	1ca2      	adds	r2, r4, #2
 800a660:	9219      	str	r2, [sp, #100]	@ 0x64
 800a662:	78a2      	ldrb	r2, [r4, #2]
 800a664:	e785      	b.n	800a572 <_strtod_l+0x192>
 800a666:	f04f 0c01 	mov.w	ip, #1
 800a66a:	e7f8      	b.n	800a65e <_strtod_l+0x27e>
 800a66c:	0800c518 	.word	0x0800c518
 800a670:	0800c500 	.word	0x0800c500
 800a674:	7ff00000 	.word	0x7ff00000
 800a678:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a67a:	1c51      	adds	r1, r2, #1
 800a67c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a67e:	7852      	ldrb	r2, [r2, #1]
 800a680:	2a30      	cmp	r2, #48	@ 0x30
 800a682:	d0f9      	beq.n	800a678 <_strtod_l+0x298>
 800a684:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a688:	2908      	cmp	r1, #8
 800a68a:	f63f af78 	bhi.w	800a57e <_strtod_l+0x19e>
 800a68e:	3a30      	subs	r2, #48	@ 0x30
 800a690:	920e      	str	r2, [sp, #56]	@ 0x38
 800a692:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a694:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a696:	f04f 080a 	mov.w	r8, #10
 800a69a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a69c:	1c56      	adds	r6, r2, #1
 800a69e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a6a0:	7852      	ldrb	r2, [r2, #1]
 800a6a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a6a6:	f1be 0f09 	cmp.w	lr, #9
 800a6aa:	d939      	bls.n	800a720 <_strtod_l+0x340>
 800a6ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a6ae:	1a76      	subs	r6, r6, r1
 800a6b0:	2e08      	cmp	r6, #8
 800a6b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a6b6:	dc03      	bgt.n	800a6c0 <_strtod_l+0x2e0>
 800a6b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a6ba:	4588      	cmp	r8, r1
 800a6bc:	bfa8      	it	ge
 800a6be:	4688      	movge	r8, r1
 800a6c0:	f1bc 0f00 	cmp.w	ip, #0
 800a6c4:	d001      	beq.n	800a6ca <_strtod_l+0x2ea>
 800a6c6:	f1c8 0800 	rsb	r8, r8, #0
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	d14e      	bne.n	800a76c <_strtod_l+0x38c>
 800a6ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6d0:	4308      	orrs	r0, r1
 800a6d2:	f47f aebe 	bne.w	800a452 <_strtod_l+0x72>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f47f aed6 	bne.w	800a488 <_strtod_l+0xa8>
 800a6dc:	2a69      	cmp	r2, #105	@ 0x69
 800a6de:	d028      	beq.n	800a732 <_strtod_l+0x352>
 800a6e0:	dc25      	bgt.n	800a72e <_strtod_l+0x34e>
 800a6e2:	2a49      	cmp	r2, #73	@ 0x49
 800a6e4:	d025      	beq.n	800a732 <_strtod_l+0x352>
 800a6e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a6e8:	f47f aece 	bne.w	800a488 <_strtod_l+0xa8>
 800a6ec:	499b      	ldr	r1, [pc, #620]	@ (800a95c <_strtod_l+0x57c>)
 800a6ee:	a819      	add	r0, sp, #100	@ 0x64
 800a6f0:	f001 f9ee 	bl	800bad0 <__match>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f43f aec7 	beq.w	800a488 <_strtod_l+0xa8>
 800a6fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	2b28      	cmp	r3, #40	@ 0x28
 800a700:	d12e      	bne.n	800a760 <_strtod_l+0x380>
 800a702:	4997      	ldr	r1, [pc, #604]	@ (800a960 <_strtod_l+0x580>)
 800a704:	aa1c      	add	r2, sp, #112	@ 0x70
 800a706:	a819      	add	r0, sp, #100	@ 0x64
 800a708:	f001 f9f6 	bl	800baf8 <__hexnan>
 800a70c:	2805      	cmp	r0, #5
 800a70e:	d127      	bne.n	800a760 <_strtod_l+0x380>
 800a710:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a712:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a716:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a71a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a71e:	e698      	b.n	800a452 <_strtod_l+0x72>
 800a720:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a722:	fb08 2101 	mla	r1, r8, r1, r2
 800a726:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a72a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a72c:	e7b5      	b.n	800a69a <_strtod_l+0x2ba>
 800a72e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a730:	e7da      	b.n	800a6e8 <_strtod_l+0x308>
 800a732:	498c      	ldr	r1, [pc, #560]	@ (800a964 <_strtod_l+0x584>)
 800a734:	a819      	add	r0, sp, #100	@ 0x64
 800a736:	f001 f9cb 	bl	800bad0 <__match>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	f43f aea4 	beq.w	800a488 <_strtod_l+0xa8>
 800a740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a742:	4989      	ldr	r1, [pc, #548]	@ (800a968 <_strtod_l+0x588>)
 800a744:	3b01      	subs	r3, #1
 800a746:	a819      	add	r0, sp, #100	@ 0x64
 800a748:	9319      	str	r3, [sp, #100]	@ 0x64
 800a74a:	f001 f9c1 	bl	800bad0 <__match>
 800a74e:	b910      	cbnz	r0, 800a756 <_strtod_l+0x376>
 800a750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a752:	3301      	adds	r3, #1
 800a754:	9319      	str	r3, [sp, #100]	@ 0x64
 800a756:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a978 <_strtod_l+0x598>
 800a75a:	f04f 0a00 	mov.w	sl, #0
 800a75e:	e678      	b.n	800a452 <_strtod_l+0x72>
 800a760:	4882      	ldr	r0, [pc, #520]	@ (800a96c <_strtod_l+0x58c>)
 800a762:	f000 fef1 	bl	800b548 <nan>
 800a766:	ec5b ab10 	vmov	sl, fp, d0
 800a76a:	e672      	b.n	800a452 <_strtod_l+0x72>
 800a76c:	eba8 0309 	sub.w	r3, r8, r9
 800a770:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a772:	9309      	str	r3, [sp, #36]	@ 0x24
 800a774:	2f00      	cmp	r7, #0
 800a776:	bf08      	it	eq
 800a778:	462f      	moveq	r7, r5
 800a77a:	2d10      	cmp	r5, #16
 800a77c:	462c      	mov	r4, r5
 800a77e:	bfa8      	it	ge
 800a780:	2410      	movge	r4, #16
 800a782:	f7f5 fec7 	bl	8000514 <__aeabi_ui2d>
 800a786:	2d09      	cmp	r5, #9
 800a788:	4682      	mov	sl, r0
 800a78a:	468b      	mov	fp, r1
 800a78c:	dc13      	bgt.n	800a7b6 <_strtod_l+0x3d6>
 800a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	f43f ae5e 	beq.w	800a452 <_strtod_l+0x72>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	dd78      	ble.n	800a88c <_strtod_l+0x4ac>
 800a79a:	2b16      	cmp	r3, #22
 800a79c:	dc5f      	bgt.n	800a85e <_strtod_l+0x47e>
 800a79e:	4974      	ldr	r1, [pc, #464]	@ (800a970 <_strtod_l+0x590>)
 800a7a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a8:	4652      	mov	r2, sl
 800a7aa:	465b      	mov	r3, fp
 800a7ac:	f7f5 ff2c 	bl	8000608 <__aeabi_dmul>
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	e64d      	b.n	800a452 <_strtod_l+0x72>
 800a7b6:	4b6e      	ldr	r3, [pc, #440]	@ (800a970 <_strtod_l+0x590>)
 800a7b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a7c0:	f7f5 ff22 	bl	8000608 <__aeabi_dmul>
 800a7c4:	4682      	mov	sl, r0
 800a7c6:	9808      	ldr	r0, [sp, #32]
 800a7c8:	468b      	mov	fp, r1
 800a7ca:	f7f5 fea3 	bl	8000514 <__aeabi_ui2d>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	f7f5 fd61 	bl	800029c <__adddf3>
 800a7da:	2d0f      	cmp	r5, #15
 800a7dc:	4682      	mov	sl, r0
 800a7de:	468b      	mov	fp, r1
 800a7e0:	ddd5      	ble.n	800a78e <_strtod_l+0x3ae>
 800a7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e4:	1b2c      	subs	r4, r5, r4
 800a7e6:	441c      	add	r4, r3
 800a7e8:	2c00      	cmp	r4, #0
 800a7ea:	f340 8096 	ble.w	800a91a <_strtod_l+0x53a>
 800a7ee:	f014 030f 	ands.w	r3, r4, #15
 800a7f2:	d00a      	beq.n	800a80a <_strtod_l+0x42a>
 800a7f4:	495e      	ldr	r1, [pc, #376]	@ (800a970 <_strtod_l+0x590>)
 800a7f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7fa:	4652      	mov	r2, sl
 800a7fc:	465b      	mov	r3, fp
 800a7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a802:	f7f5 ff01 	bl	8000608 <__aeabi_dmul>
 800a806:	4682      	mov	sl, r0
 800a808:	468b      	mov	fp, r1
 800a80a:	f034 040f 	bics.w	r4, r4, #15
 800a80e:	d073      	beq.n	800a8f8 <_strtod_l+0x518>
 800a810:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a814:	dd48      	ble.n	800a8a8 <_strtod_l+0x4c8>
 800a816:	2400      	movs	r4, #0
 800a818:	46a0      	mov	r8, r4
 800a81a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a81c:	46a1      	mov	r9, r4
 800a81e:	9a05      	ldr	r2, [sp, #20]
 800a820:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a978 <_strtod_l+0x598>
 800a824:	2322      	movs	r3, #34	@ 0x22
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	f04f 0a00 	mov.w	sl, #0
 800a82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f43f ae0f 	beq.w	800a452 <_strtod_l+0x72>
 800a834:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a836:	9805      	ldr	r0, [sp, #20]
 800a838:	f7ff f942 	bl	8009ac0 <_Bfree>
 800a83c:	9805      	ldr	r0, [sp, #20]
 800a83e:	4649      	mov	r1, r9
 800a840:	f7ff f93e 	bl	8009ac0 <_Bfree>
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	4641      	mov	r1, r8
 800a848:	f7ff f93a 	bl	8009ac0 <_Bfree>
 800a84c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a84e:	9805      	ldr	r0, [sp, #20]
 800a850:	f7ff f936 	bl	8009ac0 <_Bfree>
 800a854:	9805      	ldr	r0, [sp, #20]
 800a856:	4621      	mov	r1, r4
 800a858:	f7ff f932 	bl	8009ac0 <_Bfree>
 800a85c:	e5f9      	b.n	800a452 <_strtod_l+0x72>
 800a85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a860:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a864:	4293      	cmp	r3, r2
 800a866:	dbbc      	blt.n	800a7e2 <_strtod_l+0x402>
 800a868:	4c41      	ldr	r4, [pc, #260]	@ (800a970 <_strtod_l+0x590>)
 800a86a:	f1c5 050f 	rsb	r5, r5, #15
 800a86e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a872:	4652      	mov	r2, sl
 800a874:	465b      	mov	r3, fp
 800a876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a87a:	f7f5 fec5 	bl	8000608 <__aeabi_dmul>
 800a87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a880:	1b5d      	subs	r5, r3, r5
 800a882:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a88a:	e78f      	b.n	800a7ac <_strtod_l+0x3cc>
 800a88c:	3316      	adds	r3, #22
 800a88e:	dba8      	blt.n	800a7e2 <_strtod_l+0x402>
 800a890:	4b37      	ldr	r3, [pc, #220]	@ (800a970 <_strtod_l+0x590>)
 800a892:	eba9 0808 	sub.w	r8, r9, r8
 800a896:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a89a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a89e:	4650      	mov	r0, sl
 800a8a0:	4659      	mov	r1, fp
 800a8a2:	f7f5 ffdb 	bl	800085c <__aeabi_ddiv>
 800a8a6:	e783      	b.n	800a7b0 <_strtod_l+0x3d0>
 800a8a8:	4b32      	ldr	r3, [pc, #200]	@ (800a974 <_strtod_l+0x594>)
 800a8aa:	9308      	str	r3, [sp, #32]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	1124      	asrs	r4, r4, #4
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	4659      	mov	r1, fp
 800a8b4:	461e      	mov	r6, r3
 800a8b6:	2c01      	cmp	r4, #1
 800a8b8:	dc21      	bgt.n	800a8fe <_strtod_l+0x51e>
 800a8ba:	b10b      	cbz	r3, 800a8c0 <_strtod_l+0x4e0>
 800a8bc:	4682      	mov	sl, r0
 800a8be:	468b      	mov	fp, r1
 800a8c0:	492c      	ldr	r1, [pc, #176]	@ (800a974 <_strtod_l+0x594>)
 800a8c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a8c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a8ca:	4652      	mov	r2, sl
 800a8cc:	465b      	mov	r3, fp
 800a8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8d2:	f7f5 fe99 	bl	8000608 <__aeabi_dmul>
 800a8d6:	4b28      	ldr	r3, [pc, #160]	@ (800a978 <_strtod_l+0x598>)
 800a8d8:	460a      	mov	r2, r1
 800a8da:	400b      	ands	r3, r1
 800a8dc:	4927      	ldr	r1, [pc, #156]	@ (800a97c <_strtod_l+0x59c>)
 800a8de:	428b      	cmp	r3, r1
 800a8e0:	4682      	mov	sl, r0
 800a8e2:	d898      	bhi.n	800a816 <_strtod_l+0x436>
 800a8e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a8e8:	428b      	cmp	r3, r1
 800a8ea:	bf86      	itte	hi
 800a8ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a980 <_strtod_l+0x5a0>
 800a8f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a8f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9308      	str	r3, [sp, #32]
 800a8fc:	e07a      	b.n	800a9f4 <_strtod_l+0x614>
 800a8fe:	07e2      	lsls	r2, r4, #31
 800a900:	d505      	bpl.n	800a90e <_strtod_l+0x52e>
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fe7e 	bl	8000608 <__aeabi_dmul>
 800a90c:	2301      	movs	r3, #1
 800a90e:	9a08      	ldr	r2, [sp, #32]
 800a910:	3208      	adds	r2, #8
 800a912:	3601      	adds	r6, #1
 800a914:	1064      	asrs	r4, r4, #1
 800a916:	9208      	str	r2, [sp, #32]
 800a918:	e7cd      	b.n	800a8b6 <_strtod_l+0x4d6>
 800a91a:	d0ed      	beq.n	800a8f8 <_strtod_l+0x518>
 800a91c:	4264      	negs	r4, r4
 800a91e:	f014 020f 	ands.w	r2, r4, #15
 800a922:	d00a      	beq.n	800a93a <_strtod_l+0x55a>
 800a924:	4b12      	ldr	r3, [pc, #72]	@ (800a970 <_strtod_l+0x590>)
 800a926:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a92a:	4650      	mov	r0, sl
 800a92c:	4659      	mov	r1, fp
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f7f5 ff93 	bl	800085c <__aeabi_ddiv>
 800a936:	4682      	mov	sl, r0
 800a938:	468b      	mov	fp, r1
 800a93a:	1124      	asrs	r4, r4, #4
 800a93c:	d0dc      	beq.n	800a8f8 <_strtod_l+0x518>
 800a93e:	2c1f      	cmp	r4, #31
 800a940:	dd20      	ble.n	800a984 <_strtod_l+0x5a4>
 800a942:	2400      	movs	r4, #0
 800a944:	46a0      	mov	r8, r4
 800a946:	940a      	str	r4, [sp, #40]	@ 0x28
 800a948:	46a1      	mov	r9, r4
 800a94a:	9a05      	ldr	r2, [sp, #20]
 800a94c:	2322      	movs	r3, #34	@ 0x22
 800a94e:	f04f 0a00 	mov.w	sl, #0
 800a952:	f04f 0b00 	mov.w	fp, #0
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	e768      	b.n	800a82c <_strtod_l+0x44c>
 800a95a:	bf00      	nop
 800a95c:	0800c2ed 	.word	0x0800c2ed
 800a960:	0800c504 	.word	0x0800c504
 800a964:	0800c2e5 	.word	0x0800c2e5
 800a968:	0800c31c 	.word	0x0800c31c
 800a96c:	0800c6ad 	.word	0x0800c6ad
 800a970:	0800c438 	.word	0x0800c438
 800a974:	0800c410 	.word	0x0800c410
 800a978:	7ff00000 	.word	0x7ff00000
 800a97c:	7ca00000 	.word	0x7ca00000
 800a980:	7fefffff 	.word	0x7fefffff
 800a984:	f014 0310 	ands.w	r3, r4, #16
 800a988:	bf18      	it	ne
 800a98a:	236a      	movne	r3, #106	@ 0x6a
 800a98c:	4ea9      	ldr	r6, [pc, #676]	@ (800ac34 <_strtod_l+0x854>)
 800a98e:	9308      	str	r3, [sp, #32]
 800a990:	4650      	mov	r0, sl
 800a992:	4659      	mov	r1, fp
 800a994:	2300      	movs	r3, #0
 800a996:	07e2      	lsls	r2, r4, #31
 800a998:	d504      	bpl.n	800a9a4 <_strtod_l+0x5c4>
 800a99a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a99e:	f7f5 fe33 	bl	8000608 <__aeabi_dmul>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	1064      	asrs	r4, r4, #1
 800a9a6:	f106 0608 	add.w	r6, r6, #8
 800a9aa:	d1f4      	bne.n	800a996 <_strtod_l+0x5b6>
 800a9ac:	b10b      	cbz	r3, 800a9b2 <_strtod_l+0x5d2>
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	468b      	mov	fp, r1
 800a9b2:	9b08      	ldr	r3, [sp, #32]
 800a9b4:	b1b3      	cbz	r3, 800a9e4 <_strtod_l+0x604>
 800a9b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a9ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	4659      	mov	r1, fp
 800a9c2:	dd0f      	ble.n	800a9e4 <_strtod_l+0x604>
 800a9c4:	2b1f      	cmp	r3, #31
 800a9c6:	dd55      	ble.n	800aa74 <_strtod_l+0x694>
 800a9c8:	2b34      	cmp	r3, #52	@ 0x34
 800a9ca:	bfde      	ittt	le
 800a9cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a9d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a9d4:	4093      	lslle	r3, r2
 800a9d6:	f04f 0a00 	mov.w	sl, #0
 800a9da:	bfcc      	ite	gt
 800a9dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a9e0:	ea03 0b01 	andle.w	fp, r3, r1
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	f7f6 f874 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d1a6      	bne.n	800a942 <_strtod_l+0x562>
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a9fa:	9805      	ldr	r0, [sp, #20]
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	463a      	mov	r2, r7
 800aa00:	f7ff f8c6 	bl	8009b90 <__s2b>
 800aa04:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f43f af05 	beq.w	800a816 <_strtod_l+0x436>
 800aa0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	eba9 0308 	sub.w	r3, r9, r8
 800aa14:	bfa8      	it	ge
 800aa16:	2300      	movge	r3, #0
 800aa18:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa1a:	2400      	movs	r4, #0
 800aa1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa20:	9316      	str	r3, [sp, #88]	@ 0x58
 800aa22:	46a0      	mov	r8, r4
 800aa24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa26:	9805      	ldr	r0, [sp, #20]
 800aa28:	6859      	ldr	r1, [r3, #4]
 800aa2a:	f7ff f809 	bl	8009a40 <_Balloc>
 800aa2e:	4681      	mov	r9, r0
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f43f aef4 	beq.w	800a81e <_strtod_l+0x43e>
 800aa36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa38:	691a      	ldr	r2, [r3, #16]
 800aa3a:	3202      	adds	r2, #2
 800aa3c:	f103 010c 	add.w	r1, r3, #12
 800aa40:	0092      	lsls	r2, r2, #2
 800aa42:	300c      	adds	r0, #12
 800aa44:	f000 fd72 	bl	800b52c <memcpy>
 800aa48:	ec4b ab10 	vmov	d0, sl, fp
 800aa4c:	9805      	ldr	r0, [sp, #20]
 800aa4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800aa50:	a91b      	add	r1, sp, #108	@ 0x6c
 800aa52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aa56:	f7ff fbd7 	bl	800a208 <__d2b>
 800aa5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f aede 	beq.w	800a81e <_strtod_l+0x43e>
 800aa62:	9805      	ldr	r0, [sp, #20]
 800aa64:	2101      	movs	r1, #1
 800aa66:	f7ff f929 	bl	8009cbc <__i2b>
 800aa6a:	4680      	mov	r8, r0
 800aa6c:	b948      	cbnz	r0, 800aa82 <_strtod_l+0x6a2>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	e6d4      	b.n	800a81e <_strtod_l+0x43e>
 800aa74:	f04f 32ff 	mov.w	r2, #4294967295
 800aa78:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7c:	ea03 0a0a 	and.w	sl, r3, sl
 800aa80:	e7b0      	b.n	800a9e4 <_strtod_l+0x604>
 800aa82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aa84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	bfab      	itete	ge
 800aa8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aa8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aa8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aa90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aa92:	bfac      	ite	ge
 800aa94:	18ef      	addge	r7, r5, r3
 800aa96:	1b5e      	sublt	r6, r3, r5
 800aa98:	9b08      	ldr	r3, [sp, #32]
 800aa9a:	1aed      	subs	r5, r5, r3
 800aa9c:	4415      	add	r5, r2
 800aa9e:	4b66      	ldr	r3, [pc, #408]	@ (800ac38 <_strtod_l+0x858>)
 800aaa0:	3d01      	subs	r5, #1
 800aaa2:	429d      	cmp	r5, r3
 800aaa4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aaa8:	da50      	bge.n	800ab4c <_strtod_l+0x76c>
 800aaaa:	1b5b      	subs	r3, r3, r5
 800aaac:	2b1f      	cmp	r3, #31
 800aaae:	eba2 0203 	sub.w	r2, r2, r3
 800aab2:	f04f 0101 	mov.w	r1, #1
 800aab6:	dc3d      	bgt.n	800ab34 <_strtod_l+0x754>
 800aab8:	fa01 f303 	lsl.w	r3, r1, r3
 800aabc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aabe:	2300      	movs	r3, #0
 800aac0:	9310      	str	r3, [sp, #64]	@ 0x40
 800aac2:	18bd      	adds	r5, r7, r2
 800aac4:	9b08      	ldr	r3, [sp, #32]
 800aac6:	42af      	cmp	r7, r5
 800aac8:	4416      	add	r6, r2
 800aaca:	441e      	add	r6, r3
 800aacc:	463b      	mov	r3, r7
 800aace:	bfa8      	it	ge
 800aad0:	462b      	movge	r3, r5
 800aad2:	42b3      	cmp	r3, r6
 800aad4:	bfa8      	it	ge
 800aad6:	4633      	movge	r3, r6
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bfc2      	ittt	gt
 800aadc:	1aed      	subgt	r5, r5, r3
 800aade:	1af6      	subgt	r6, r6, r3
 800aae0:	1aff      	subgt	r7, r7, r3
 800aae2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dd16      	ble.n	800ab16 <_strtod_l+0x736>
 800aae8:	4641      	mov	r1, r8
 800aaea:	9805      	ldr	r0, [sp, #20]
 800aaec:	461a      	mov	r2, r3
 800aaee:	f7ff f9a5 	bl	8009e3c <__pow5mult>
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d0ba      	beq.n	800aa6e <_strtod_l+0x68e>
 800aaf8:	4601      	mov	r1, r0
 800aafa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	f7ff f8f3 	bl	8009ce8 <__multiply>
 800ab02:	900e      	str	r0, [sp, #56]	@ 0x38
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f43f ae8a 	beq.w	800a81e <_strtod_l+0x43e>
 800ab0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	f7fe ffd7 	bl	8009ac0 <_Bfree>
 800ab12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	dc1d      	bgt.n	800ab56 <_strtod_l+0x776>
 800ab1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dd23      	ble.n	800ab68 <_strtod_l+0x788>
 800ab20:	4649      	mov	r1, r9
 800ab22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab24:	9805      	ldr	r0, [sp, #20]
 800ab26:	f7ff f989 	bl	8009e3c <__pow5mult>
 800ab2a:	4681      	mov	r9, r0
 800ab2c:	b9e0      	cbnz	r0, 800ab68 <_strtod_l+0x788>
 800ab2e:	f04f 0900 	mov.w	r9, #0
 800ab32:	e674      	b.n	800a81e <_strtod_l+0x43e>
 800ab34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ab38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ab3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ab40:	35e2      	adds	r5, #226	@ 0xe2
 800ab42:	fa01 f305 	lsl.w	r3, r1, r5
 800ab46:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab48:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ab4a:	e7ba      	b.n	800aac2 <_strtod_l+0x6e2>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab50:	2301      	movs	r3, #1
 800ab52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab54:	e7b5      	b.n	800aac2 <_strtod_l+0x6e2>
 800ab56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab58:	9805      	ldr	r0, [sp, #20]
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	f7ff f9c8 	bl	8009ef0 <__lshift>
 800ab60:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d1d9      	bne.n	800ab1a <_strtod_l+0x73a>
 800ab66:	e65a      	b.n	800a81e <_strtod_l+0x43e>
 800ab68:	2e00      	cmp	r6, #0
 800ab6a:	dd07      	ble.n	800ab7c <_strtod_l+0x79c>
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	9805      	ldr	r0, [sp, #20]
 800ab70:	4632      	mov	r2, r6
 800ab72:	f7ff f9bd 	bl	8009ef0 <__lshift>
 800ab76:	4681      	mov	r9, r0
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d0d8      	beq.n	800ab2e <_strtod_l+0x74e>
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	dd08      	ble.n	800ab92 <_strtod_l+0x7b2>
 800ab80:	4641      	mov	r1, r8
 800ab82:	9805      	ldr	r0, [sp, #20]
 800ab84:	463a      	mov	r2, r7
 800ab86:	f7ff f9b3 	bl	8009ef0 <__lshift>
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f43f ae46 	beq.w	800a81e <_strtod_l+0x43e>
 800ab92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab94:	9805      	ldr	r0, [sp, #20]
 800ab96:	464a      	mov	r2, r9
 800ab98:	f7ff fa32 	bl	800a000 <__mdiff>
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f43f ae3d 	beq.w	800a81e <_strtod_l+0x43e>
 800aba4:	68c3      	ldr	r3, [r0, #12]
 800aba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aba8:	2300      	movs	r3, #0
 800abaa:	60c3      	str	r3, [r0, #12]
 800abac:	4641      	mov	r1, r8
 800abae:	f7ff fa0b 	bl	8009fc8 <__mcmp>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	da46      	bge.n	800ac44 <_strtod_l+0x864>
 800abb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb8:	ea53 030a 	orrs.w	r3, r3, sl
 800abbc:	d16c      	bne.n	800ac98 <_strtod_l+0x8b8>
 800abbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d168      	bne.n	800ac98 <_strtod_l+0x8b8>
 800abc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abca:	0d1b      	lsrs	r3, r3, #20
 800abcc:	051b      	lsls	r3, r3, #20
 800abce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800abd2:	d961      	bls.n	800ac98 <_strtod_l+0x8b8>
 800abd4:	6963      	ldr	r3, [r4, #20]
 800abd6:	b913      	cbnz	r3, 800abde <_strtod_l+0x7fe>
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	dd5c      	ble.n	800ac98 <_strtod_l+0x8b8>
 800abde:	4621      	mov	r1, r4
 800abe0:	2201      	movs	r2, #1
 800abe2:	9805      	ldr	r0, [sp, #20]
 800abe4:	f7ff f984 	bl	8009ef0 <__lshift>
 800abe8:	4641      	mov	r1, r8
 800abea:	4604      	mov	r4, r0
 800abec:	f7ff f9ec 	bl	8009fc8 <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	dd51      	ble.n	800ac98 <_strtod_l+0x8b8>
 800abf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abf8:	9a08      	ldr	r2, [sp, #32]
 800abfa:	0d1b      	lsrs	r3, r3, #20
 800abfc:	051b      	lsls	r3, r3, #20
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	d06b      	beq.n	800acda <_strtod_l+0x8fa>
 800ac02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac06:	d868      	bhi.n	800acda <_strtod_l+0x8fa>
 800ac08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac0c:	f67f ae9d 	bls.w	800a94a <_strtod_l+0x56a>
 800ac10:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <_strtod_l+0x85c>)
 800ac12:	4650      	mov	r0, sl
 800ac14:	4659      	mov	r1, fp
 800ac16:	2200      	movs	r2, #0
 800ac18:	f7f5 fcf6 	bl	8000608 <__aeabi_dmul>
 800ac1c:	4b08      	ldr	r3, [pc, #32]	@ (800ac40 <_strtod_l+0x860>)
 800ac1e:	400b      	ands	r3, r1
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f47f ae05 	bne.w	800a834 <_strtod_l+0x454>
 800ac2a:	9a05      	ldr	r2, [sp, #20]
 800ac2c:	2322      	movs	r3, #34	@ 0x22
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e600      	b.n	800a834 <_strtod_l+0x454>
 800ac32:	bf00      	nop
 800ac34:	0800c530 	.word	0x0800c530
 800ac38:	fffffc02 	.word	0xfffffc02
 800ac3c:	39500000 	.word	0x39500000
 800ac40:	7ff00000 	.word	0x7ff00000
 800ac44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ac48:	d165      	bne.n	800ad16 <_strtod_l+0x936>
 800ac4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac50:	b35a      	cbz	r2, 800acaa <_strtod_l+0x8ca>
 800ac52:	4a9f      	ldr	r2, [pc, #636]	@ (800aed0 <_strtod_l+0xaf0>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d12b      	bne.n	800acb0 <_strtod_l+0x8d0>
 800ac58:	9b08      	ldr	r3, [sp, #32]
 800ac5a:	4651      	mov	r1, sl
 800ac5c:	b303      	cbz	r3, 800aca0 <_strtod_l+0x8c0>
 800ac5e:	4b9d      	ldr	r3, [pc, #628]	@ (800aed4 <_strtod_l+0xaf4>)
 800ac60:	465a      	mov	r2, fp
 800ac62:	4013      	ands	r3, r2
 800ac64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ac68:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6c:	d81b      	bhi.n	800aca6 <_strtod_l+0x8c6>
 800ac6e:	0d1b      	lsrs	r3, r3, #20
 800ac70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac74:	fa02 f303 	lsl.w	r3, r2, r3
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	d119      	bne.n	800acb0 <_strtod_l+0x8d0>
 800ac7c:	4b96      	ldr	r3, [pc, #600]	@ (800aed8 <_strtod_l+0xaf8>)
 800ac7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d102      	bne.n	800ac8a <_strtod_l+0x8aa>
 800ac84:	3101      	adds	r1, #1
 800ac86:	f43f adca 	beq.w	800a81e <_strtod_l+0x43e>
 800ac8a:	4b92      	ldr	r3, [pc, #584]	@ (800aed4 <_strtod_l+0xaf4>)
 800ac8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac8e:	401a      	ands	r2, r3
 800ac90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ac94:	f04f 0a00 	mov.w	sl, #0
 800ac98:	9b08      	ldr	r3, [sp, #32]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1b8      	bne.n	800ac10 <_strtod_l+0x830>
 800ac9e:	e5c9      	b.n	800a834 <_strtod_l+0x454>
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	e7e8      	b.n	800ac78 <_strtod_l+0x898>
 800aca6:	4613      	mov	r3, r2
 800aca8:	e7e6      	b.n	800ac78 <_strtod_l+0x898>
 800acaa:	ea53 030a 	orrs.w	r3, r3, sl
 800acae:	d0a1      	beq.n	800abf4 <_strtod_l+0x814>
 800acb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800acb2:	b1db      	cbz	r3, 800acec <_strtod_l+0x90c>
 800acb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acb6:	4213      	tst	r3, r2
 800acb8:	d0ee      	beq.n	800ac98 <_strtod_l+0x8b8>
 800acba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acbc:	9a08      	ldr	r2, [sp, #32]
 800acbe:	4650      	mov	r0, sl
 800acc0:	4659      	mov	r1, fp
 800acc2:	b1bb      	cbz	r3, 800acf4 <_strtod_l+0x914>
 800acc4:	f7ff fb6e 	bl	800a3a4 <sulp>
 800acc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800accc:	ec53 2b10 	vmov	r2, r3, d0
 800acd0:	f7f5 fae4 	bl	800029c <__adddf3>
 800acd4:	4682      	mov	sl, r0
 800acd6:	468b      	mov	fp, r1
 800acd8:	e7de      	b.n	800ac98 <_strtod_l+0x8b8>
 800acda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800acde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ace2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ace6:	f04f 3aff 	mov.w	sl, #4294967295
 800acea:	e7d5      	b.n	800ac98 <_strtod_l+0x8b8>
 800acec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acee:	ea13 0f0a 	tst.w	r3, sl
 800acf2:	e7e1      	b.n	800acb8 <_strtod_l+0x8d8>
 800acf4:	f7ff fb56 	bl	800a3a4 <sulp>
 800acf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acfc:	ec53 2b10 	vmov	r2, r3, d0
 800ad00:	f7f5 faca 	bl	8000298 <__aeabi_dsub>
 800ad04:	2200      	movs	r2, #0
 800ad06:	2300      	movs	r3, #0
 800ad08:	4682      	mov	sl, r0
 800ad0a:	468b      	mov	fp, r1
 800ad0c:	f7f5 fee4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d0c1      	beq.n	800ac98 <_strtod_l+0x8b8>
 800ad14:	e619      	b.n	800a94a <_strtod_l+0x56a>
 800ad16:	4641      	mov	r1, r8
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7ff facd 	bl	800a2b8 <__ratio>
 800ad1e:	ec57 6b10 	vmov	r6, r7, d0
 800ad22:	2200      	movs	r2, #0
 800ad24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 fee8 	bl	8000b00 <__aeabi_dcmple>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d06f      	beq.n	800ae14 <_strtod_l+0xa34>
 800ad34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d17a      	bne.n	800ae30 <_strtod_l+0xa50>
 800ad3a:	f1ba 0f00 	cmp.w	sl, #0
 800ad3e:	d158      	bne.n	800adf2 <_strtod_l+0xa12>
 800ad40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d15a      	bne.n	800ae00 <_strtod_l+0xa20>
 800ad4a:	4b64      	ldr	r3, [pc, #400]	@ (800aedc <_strtod_l+0xafc>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	f7f5 fecb 	bl	8000aec <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d159      	bne.n	800ae0e <_strtod_l+0xa2e>
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4b60      	ldr	r3, [pc, #384]	@ (800aee0 <_strtod_l+0xb00>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	f7f5 fc51 	bl	8000608 <__aeabi_dmul>
 800ad66:	4606      	mov	r6, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ad6e:	9606      	str	r6, [sp, #24]
 800ad70:	9307      	str	r3, [sp, #28]
 800ad72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad76:	4d57      	ldr	r5, [pc, #348]	@ (800aed4 <_strtod_l+0xaf4>)
 800ad78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad7e:	401d      	ands	r5, r3
 800ad80:	4b58      	ldr	r3, [pc, #352]	@ (800aee4 <_strtod_l+0xb04>)
 800ad82:	429d      	cmp	r5, r3
 800ad84:	f040 80b2 	bne.w	800aeec <_strtod_l+0xb0c>
 800ad88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ad8e:	ec4b ab10 	vmov	d0, sl, fp
 800ad92:	f7ff f9c9 	bl	800a128 <__ulp>
 800ad96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad9a:	ec51 0b10 	vmov	r0, r1, d0
 800ad9e:	f7f5 fc33 	bl	8000608 <__aeabi_dmul>
 800ada2:	4652      	mov	r2, sl
 800ada4:	465b      	mov	r3, fp
 800ada6:	f7f5 fa79 	bl	800029c <__adddf3>
 800adaa:	460b      	mov	r3, r1
 800adac:	4949      	ldr	r1, [pc, #292]	@ (800aed4 <_strtod_l+0xaf4>)
 800adae:	4a4e      	ldr	r2, [pc, #312]	@ (800aee8 <_strtod_l+0xb08>)
 800adb0:	4019      	ands	r1, r3
 800adb2:	4291      	cmp	r1, r2
 800adb4:	4682      	mov	sl, r0
 800adb6:	d942      	bls.n	800ae3e <_strtod_l+0xa5e>
 800adb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adba:	4b47      	ldr	r3, [pc, #284]	@ (800aed8 <_strtod_l+0xaf8>)
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d103      	bne.n	800adc8 <_strtod_l+0x9e8>
 800adc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adc2:	3301      	adds	r3, #1
 800adc4:	f43f ad2b 	beq.w	800a81e <_strtod_l+0x43e>
 800adc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aed8 <_strtod_l+0xaf8>
 800adcc:	f04f 3aff 	mov.w	sl, #4294967295
 800add0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800add2:	9805      	ldr	r0, [sp, #20]
 800add4:	f7fe fe74 	bl	8009ac0 <_Bfree>
 800add8:	9805      	ldr	r0, [sp, #20]
 800adda:	4649      	mov	r1, r9
 800addc:	f7fe fe70 	bl	8009ac0 <_Bfree>
 800ade0:	9805      	ldr	r0, [sp, #20]
 800ade2:	4641      	mov	r1, r8
 800ade4:	f7fe fe6c 	bl	8009ac0 <_Bfree>
 800ade8:	9805      	ldr	r0, [sp, #20]
 800adea:	4621      	mov	r1, r4
 800adec:	f7fe fe68 	bl	8009ac0 <_Bfree>
 800adf0:	e618      	b.n	800aa24 <_strtod_l+0x644>
 800adf2:	f1ba 0f01 	cmp.w	sl, #1
 800adf6:	d103      	bne.n	800ae00 <_strtod_l+0xa20>
 800adf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f43f ada5 	beq.w	800a94a <_strtod_l+0x56a>
 800ae00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aeb0 <_strtod_l+0xad0>
 800ae04:	4f35      	ldr	r7, [pc, #212]	@ (800aedc <_strtod_l+0xafc>)
 800ae06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae0a:	2600      	movs	r6, #0
 800ae0c:	e7b1      	b.n	800ad72 <_strtod_l+0x992>
 800ae0e:	4f34      	ldr	r7, [pc, #208]	@ (800aee0 <_strtod_l+0xb00>)
 800ae10:	2600      	movs	r6, #0
 800ae12:	e7aa      	b.n	800ad6a <_strtod_l+0x98a>
 800ae14:	4b32      	ldr	r3, [pc, #200]	@ (800aee0 <_strtod_l+0xb00>)
 800ae16:	4630      	mov	r0, r6
 800ae18:	4639      	mov	r1, r7
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fbf4 	bl	8000608 <__aeabi_dmul>
 800ae20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d09f      	beq.n	800ad6a <_strtod_l+0x98a>
 800ae2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae2e:	e7a0      	b.n	800ad72 <_strtod_l+0x992>
 800ae30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aeb8 <_strtod_l+0xad8>
 800ae34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae38:	ec57 6b17 	vmov	r6, r7, d7
 800ae3c:	e799      	b.n	800ad72 <_strtod_l+0x992>
 800ae3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1c1      	bne.n	800add0 <_strtod_l+0x9f0>
 800ae4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae50:	0d1b      	lsrs	r3, r3, #20
 800ae52:	051b      	lsls	r3, r3, #20
 800ae54:	429d      	cmp	r5, r3
 800ae56:	d1bb      	bne.n	800add0 <_strtod_l+0x9f0>
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 ff34 	bl	8000cc8 <__aeabi_d2lz>
 800ae60:	f7f5 fba4 	bl	80005ac <__aeabi_l2d>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4630      	mov	r0, r6
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	f7f5 fa14 	bl	8000298 <__aeabi_dsub>
 800ae70:	460b      	mov	r3, r1
 800ae72:	4602      	mov	r2, r0
 800ae74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ae78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ae7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae7e:	ea46 060a 	orr.w	r6, r6, sl
 800ae82:	431e      	orrs	r6, r3
 800ae84:	d06f      	beq.n	800af66 <_strtod_l+0xb86>
 800ae86:	a30e      	add	r3, pc, #56	@ (adr r3, 800aec0 <_strtod_l+0xae0>)
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f7f5 fe2e 	bl	8000aec <__aeabi_dcmplt>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f47f accf 	bne.w	800a834 <_strtod_l+0x454>
 800ae96:	a30c      	add	r3, pc, #48	@ (adr r3, 800aec8 <_strtod_l+0xae8>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aea0:	f7f5 fe42 	bl	8000b28 <__aeabi_dcmpgt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d093      	beq.n	800add0 <_strtod_l+0x9f0>
 800aea8:	e4c4      	b.n	800a834 <_strtod_l+0x454>
 800aeaa:	bf00      	nop
 800aeac:	f3af 8000 	nop.w
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	bff00000 	.word	0xbff00000
 800aeb8:	00000000 	.word	0x00000000
 800aebc:	3ff00000 	.word	0x3ff00000
 800aec0:	94a03595 	.word	0x94a03595
 800aec4:	3fdfffff 	.word	0x3fdfffff
 800aec8:	35afe535 	.word	0x35afe535
 800aecc:	3fe00000 	.word	0x3fe00000
 800aed0:	000fffff 	.word	0x000fffff
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	7fefffff 	.word	0x7fefffff
 800aedc:	3ff00000 	.word	0x3ff00000
 800aee0:	3fe00000 	.word	0x3fe00000
 800aee4:	7fe00000 	.word	0x7fe00000
 800aee8:	7c9fffff 	.word	0x7c9fffff
 800aeec:	9b08      	ldr	r3, [sp, #32]
 800aeee:	b323      	cbz	r3, 800af3a <_strtod_l+0xb5a>
 800aef0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aef4:	d821      	bhi.n	800af3a <_strtod_l+0xb5a>
 800aef6:	a328      	add	r3, pc, #160	@ (adr r3, 800af98 <_strtod_l+0xbb8>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	4630      	mov	r0, r6
 800aefe:	4639      	mov	r1, r7
 800af00:	f7f5 fdfe 	bl	8000b00 <__aeabi_dcmple>
 800af04:	b1a0      	cbz	r0, 800af30 <_strtod_l+0xb50>
 800af06:	4639      	mov	r1, r7
 800af08:	4630      	mov	r0, r6
 800af0a:	f7f5 fe55 	bl	8000bb8 <__aeabi_d2uiz>
 800af0e:	2801      	cmp	r0, #1
 800af10:	bf38      	it	cc
 800af12:	2001      	movcc	r0, #1
 800af14:	f7f5 fafe 	bl	8000514 <__aeabi_ui2d>
 800af18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	b9fb      	cbnz	r3, 800af60 <_strtod_l+0xb80>
 800af20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af24:	9014      	str	r0, [sp, #80]	@ 0x50
 800af26:	9315      	str	r3, [sp, #84]	@ 0x54
 800af28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800af2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800af30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800af36:	1b5b      	subs	r3, r3, r5
 800af38:	9311      	str	r3, [sp, #68]	@ 0x44
 800af3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800af42:	f7ff f8f1 	bl	800a128 <__ulp>
 800af46:	4650      	mov	r0, sl
 800af48:	ec53 2b10 	vmov	r2, r3, d0
 800af4c:	4659      	mov	r1, fp
 800af4e:	f7f5 fb5b 	bl	8000608 <__aeabi_dmul>
 800af52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af56:	f7f5 f9a1 	bl	800029c <__adddf3>
 800af5a:	4682      	mov	sl, r0
 800af5c:	468b      	mov	fp, r1
 800af5e:	e770      	b.n	800ae42 <_strtod_l+0xa62>
 800af60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800af64:	e7e0      	b.n	800af28 <_strtod_l+0xb48>
 800af66:	a30e      	add	r3, pc, #56	@ (adr r3, 800afa0 <_strtod_l+0xbc0>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fdbe 	bl	8000aec <__aeabi_dcmplt>
 800af70:	e798      	b.n	800aea4 <_strtod_l+0xac4>
 800af72:	2300      	movs	r3, #0
 800af74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800af78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	f7ff ba6d 	b.w	800a45a <_strtod_l+0x7a>
 800af80:	2a65      	cmp	r2, #101	@ 0x65
 800af82:	f43f ab66 	beq.w	800a652 <_strtod_l+0x272>
 800af86:	2a45      	cmp	r2, #69	@ 0x45
 800af88:	f43f ab63 	beq.w	800a652 <_strtod_l+0x272>
 800af8c:	2301      	movs	r3, #1
 800af8e:	f7ff bb9e 	b.w	800a6ce <_strtod_l+0x2ee>
 800af92:	bf00      	nop
 800af94:	f3af 8000 	nop.w
 800af98:	ffc00000 	.word	0xffc00000
 800af9c:	41dfffff 	.word	0x41dfffff
 800afa0:	94a03595 	.word	0x94a03595
 800afa4:	3fcfffff 	.word	0x3fcfffff

0800afa8 <_strtod_r>:
 800afa8:	4b01      	ldr	r3, [pc, #4]	@ (800afb0 <_strtod_r+0x8>)
 800afaa:	f7ff ba19 	b.w	800a3e0 <_strtod_l>
 800afae:	bf00      	nop
 800afb0:	20000158 	.word	0x20000158

0800afb4 <_strtol_l.constprop.0>:
 800afb4:	2b24      	cmp	r3, #36	@ 0x24
 800afb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afba:	4686      	mov	lr, r0
 800afbc:	4690      	mov	r8, r2
 800afbe:	d801      	bhi.n	800afc4 <_strtol_l.constprop.0+0x10>
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d106      	bne.n	800afd2 <_strtol_l.constprop.0+0x1e>
 800afc4:	f7fd fdba 	bl	8008b3c <__errno>
 800afc8:	2316      	movs	r3, #22
 800afca:	6003      	str	r3, [r0, #0]
 800afcc:	2000      	movs	r0, #0
 800afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd2:	4834      	ldr	r0, [pc, #208]	@ (800b0a4 <_strtol_l.constprop.0+0xf0>)
 800afd4:	460d      	mov	r5, r1
 800afd6:	462a      	mov	r2, r5
 800afd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afdc:	5d06      	ldrb	r6, [r0, r4]
 800afde:	f016 0608 	ands.w	r6, r6, #8
 800afe2:	d1f8      	bne.n	800afd6 <_strtol_l.constprop.0+0x22>
 800afe4:	2c2d      	cmp	r4, #45	@ 0x2d
 800afe6:	d12d      	bne.n	800b044 <_strtol_l.constprop.0+0x90>
 800afe8:	782c      	ldrb	r4, [r5, #0]
 800afea:	2601      	movs	r6, #1
 800afec:	1c95      	adds	r5, r2, #2
 800afee:	f033 0210 	bics.w	r2, r3, #16
 800aff2:	d109      	bne.n	800b008 <_strtol_l.constprop.0+0x54>
 800aff4:	2c30      	cmp	r4, #48	@ 0x30
 800aff6:	d12a      	bne.n	800b04e <_strtol_l.constprop.0+0x9a>
 800aff8:	782a      	ldrb	r2, [r5, #0]
 800affa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800affe:	2a58      	cmp	r2, #88	@ 0x58
 800b000:	d125      	bne.n	800b04e <_strtol_l.constprop.0+0x9a>
 800b002:	786c      	ldrb	r4, [r5, #1]
 800b004:	2310      	movs	r3, #16
 800b006:	3502      	adds	r5, #2
 800b008:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b00c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b010:	2200      	movs	r2, #0
 800b012:	fbbc f9f3 	udiv	r9, ip, r3
 800b016:	4610      	mov	r0, r2
 800b018:	fb03 ca19 	mls	sl, r3, r9, ip
 800b01c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b020:	2f09      	cmp	r7, #9
 800b022:	d81b      	bhi.n	800b05c <_strtol_l.constprop.0+0xa8>
 800b024:	463c      	mov	r4, r7
 800b026:	42a3      	cmp	r3, r4
 800b028:	dd27      	ble.n	800b07a <_strtol_l.constprop.0+0xc6>
 800b02a:	1c57      	adds	r7, r2, #1
 800b02c:	d007      	beq.n	800b03e <_strtol_l.constprop.0+0x8a>
 800b02e:	4581      	cmp	r9, r0
 800b030:	d320      	bcc.n	800b074 <_strtol_l.constprop.0+0xc0>
 800b032:	d101      	bne.n	800b038 <_strtol_l.constprop.0+0x84>
 800b034:	45a2      	cmp	sl, r4
 800b036:	db1d      	blt.n	800b074 <_strtol_l.constprop.0+0xc0>
 800b038:	fb00 4003 	mla	r0, r0, r3, r4
 800b03c:	2201      	movs	r2, #1
 800b03e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b042:	e7eb      	b.n	800b01c <_strtol_l.constprop.0+0x68>
 800b044:	2c2b      	cmp	r4, #43	@ 0x2b
 800b046:	bf04      	itt	eq
 800b048:	782c      	ldrbeq	r4, [r5, #0]
 800b04a:	1c95      	addeq	r5, r2, #2
 800b04c:	e7cf      	b.n	800afee <_strtol_l.constprop.0+0x3a>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1da      	bne.n	800b008 <_strtol_l.constprop.0+0x54>
 800b052:	2c30      	cmp	r4, #48	@ 0x30
 800b054:	bf0c      	ite	eq
 800b056:	2308      	moveq	r3, #8
 800b058:	230a      	movne	r3, #10
 800b05a:	e7d5      	b.n	800b008 <_strtol_l.constprop.0+0x54>
 800b05c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b060:	2f19      	cmp	r7, #25
 800b062:	d801      	bhi.n	800b068 <_strtol_l.constprop.0+0xb4>
 800b064:	3c37      	subs	r4, #55	@ 0x37
 800b066:	e7de      	b.n	800b026 <_strtol_l.constprop.0+0x72>
 800b068:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b06c:	2f19      	cmp	r7, #25
 800b06e:	d804      	bhi.n	800b07a <_strtol_l.constprop.0+0xc6>
 800b070:	3c57      	subs	r4, #87	@ 0x57
 800b072:	e7d8      	b.n	800b026 <_strtol_l.constprop.0+0x72>
 800b074:	f04f 32ff 	mov.w	r2, #4294967295
 800b078:	e7e1      	b.n	800b03e <_strtol_l.constprop.0+0x8a>
 800b07a:	1c53      	adds	r3, r2, #1
 800b07c:	d108      	bne.n	800b090 <_strtol_l.constprop.0+0xdc>
 800b07e:	2322      	movs	r3, #34	@ 0x22
 800b080:	f8ce 3000 	str.w	r3, [lr]
 800b084:	4660      	mov	r0, ip
 800b086:	f1b8 0f00 	cmp.w	r8, #0
 800b08a:	d0a0      	beq.n	800afce <_strtol_l.constprop.0+0x1a>
 800b08c:	1e69      	subs	r1, r5, #1
 800b08e:	e006      	b.n	800b09e <_strtol_l.constprop.0+0xea>
 800b090:	b106      	cbz	r6, 800b094 <_strtol_l.constprop.0+0xe0>
 800b092:	4240      	negs	r0, r0
 800b094:	f1b8 0f00 	cmp.w	r8, #0
 800b098:	d099      	beq.n	800afce <_strtol_l.constprop.0+0x1a>
 800b09a:	2a00      	cmp	r2, #0
 800b09c:	d1f6      	bne.n	800b08c <_strtol_l.constprop.0+0xd8>
 800b09e:	f8c8 1000 	str.w	r1, [r8]
 800b0a2:	e794      	b.n	800afce <_strtol_l.constprop.0+0x1a>
 800b0a4:	0800c559 	.word	0x0800c559

0800b0a8 <_strtol_r>:
 800b0a8:	f7ff bf84 	b.w	800afb4 <_strtol_l.constprop.0>

0800b0ac <__ssputs_r>:
 800b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b0:	688e      	ldr	r6, [r1, #8]
 800b0b2:	461f      	mov	r7, r3
 800b0b4:	42be      	cmp	r6, r7
 800b0b6:	680b      	ldr	r3, [r1, #0]
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	4690      	mov	r8, r2
 800b0be:	d82d      	bhi.n	800b11c <__ssputs_r+0x70>
 800b0c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0c8:	d026      	beq.n	800b118 <__ssputs_r+0x6c>
 800b0ca:	6965      	ldr	r5, [r4, #20]
 800b0cc:	6909      	ldr	r1, [r1, #16]
 800b0ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0d2:	eba3 0901 	sub.w	r9, r3, r1
 800b0d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0da:	1c7b      	adds	r3, r7, #1
 800b0dc:	444b      	add	r3, r9
 800b0de:	106d      	asrs	r5, r5, #1
 800b0e0:	429d      	cmp	r5, r3
 800b0e2:	bf38      	it	cc
 800b0e4:	461d      	movcc	r5, r3
 800b0e6:	0553      	lsls	r3, r2, #21
 800b0e8:	d527      	bpl.n	800b13a <__ssputs_r+0x8e>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	f7fe fc1c 	bl	8009928 <_malloc_r>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	b360      	cbz	r0, 800b14e <__ssputs_r+0xa2>
 800b0f4:	6921      	ldr	r1, [r4, #16]
 800b0f6:	464a      	mov	r2, r9
 800b0f8:	f000 fa18 	bl	800b52c <memcpy>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b106:	81a3      	strh	r3, [r4, #12]
 800b108:	6126      	str	r6, [r4, #16]
 800b10a:	6165      	str	r5, [r4, #20]
 800b10c:	444e      	add	r6, r9
 800b10e:	eba5 0509 	sub.w	r5, r5, r9
 800b112:	6026      	str	r6, [r4, #0]
 800b114:	60a5      	str	r5, [r4, #8]
 800b116:	463e      	mov	r6, r7
 800b118:	42be      	cmp	r6, r7
 800b11a:	d900      	bls.n	800b11e <__ssputs_r+0x72>
 800b11c:	463e      	mov	r6, r7
 800b11e:	6820      	ldr	r0, [r4, #0]
 800b120:	4632      	mov	r2, r6
 800b122:	4641      	mov	r1, r8
 800b124:	f000 f9c6 	bl	800b4b4 <memmove>
 800b128:	68a3      	ldr	r3, [r4, #8]
 800b12a:	1b9b      	subs	r3, r3, r6
 800b12c:	60a3      	str	r3, [r4, #8]
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	4433      	add	r3, r6
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	2000      	movs	r0, #0
 800b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13a:	462a      	mov	r2, r5
 800b13c:	f000 fd89 	bl	800bc52 <_realloc_r>
 800b140:	4606      	mov	r6, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d1e0      	bne.n	800b108 <__ssputs_r+0x5c>
 800b146:	6921      	ldr	r1, [r4, #16]
 800b148:	4650      	mov	r0, sl
 800b14a:	f7fe fb79 	bl	8009840 <_free_r>
 800b14e:	230c      	movs	r3, #12
 800b150:	f8ca 3000 	str.w	r3, [sl]
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	f04f 30ff 	mov.w	r0, #4294967295
 800b160:	e7e9      	b.n	800b136 <__ssputs_r+0x8a>
	...

0800b164 <_svfiprintf_r>:
 800b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b168:	4698      	mov	r8, r3
 800b16a:	898b      	ldrh	r3, [r1, #12]
 800b16c:	061b      	lsls	r3, r3, #24
 800b16e:	b09d      	sub	sp, #116	@ 0x74
 800b170:	4607      	mov	r7, r0
 800b172:	460d      	mov	r5, r1
 800b174:	4614      	mov	r4, r2
 800b176:	d510      	bpl.n	800b19a <_svfiprintf_r+0x36>
 800b178:	690b      	ldr	r3, [r1, #16]
 800b17a:	b973      	cbnz	r3, 800b19a <_svfiprintf_r+0x36>
 800b17c:	2140      	movs	r1, #64	@ 0x40
 800b17e:	f7fe fbd3 	bl	8009928 <_malloc_r>
 800b182:	6028      	str	r0, [r5, #0]
 800b184:	6128      	str	r0, [r5, #16]
 800b186:	b930      	cbnz	r0, 800b196 <_svfiprintf_r+0x32>
 800b188:	230c      	movs	r3, #12
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	f04f 30ff 	mov.w	r0, #4294967295
 800b190:	b01d      	add	sp, #116	@ 0x74
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b196:	2340      	movs	r3, #64	@ 0x40
 800b198:	616b      	str	r3, [r5, #20]
 800b19a:	2300      	movs	r3, #0
 800b19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b19e:	2320      	movs	r3, #32
 800b1a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1a8:	2330      	movs	r3, #48	@ 0x30
 800b1aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b348 <_svfiprintf_r+0x1e4>
 800b1ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1b2:	f04f 0901 	mov.w	r9, #1
 800b1b6:	4623      	mov	r3, r4
 800b1b8:	469a      	mov	sl, r3
 800b1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1be:	b10a      	cbz	r2, 800b1c4 <_svfiprintf_r+0x60>
 800b1c0:	2a25      	cmp	r2, #37	@ 0x25
 800b1c2:	d1f9      	bne.n	800b1b8 <_svfiprintf_r+0x54>
 800b1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1c8:	d00b      	beq.n	800b1e2 <_svfiprintf_r+0x7e>
 800b1ca:	465b      	mov	r3, fp
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	f7ff ff6b 	bl	800b0ac <__ssputs_r>
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	f000 80a7 	beq.w	800b32a <_svfiprintf_r+0x1c6>
 800b1dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1de:	445a      	add	r2, fp
 800b1e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 809f 	beq.w	800b32a <_svfiprintf_r+0x1c6>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1f6:	f10a 0a01 	add.w	sl, sl, #1
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	9307      	str	r3, [sp, #28]
 800b1fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b202:	931a      	str	r3, [sp, #104]	@ 0x68
 800b204:	4654      	mov	r4, sl
 800b206:	2205      	movs	r2, #5
 800b208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20c:	484e      	ldr	r0, [pc, #312]	@ (800b348 <_svfiprintf_r+0x1e4>)
 800b20e:	f7f4 ffe7 	bl	80001e0 <memchr>
 800b212:	9a04      	ldr	r2, [sp, #16]
 800b214:	b9d8      	cbnz	r0, 800b24e <_svfiprintf_r+0xea>
 800b216:	06d0      	lsls	r0, r2, #27
 800b218:	bf44      	itt	mi
 800b21a:	2320      	movmi	r3, #32
 800b21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b220:	0711      	lsls	r1, r2, #28
 800b222:	bf44      	itt	mi
 800b224:	232b      	movmi	r3, #43	@ 0x2b
 800b226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b22a:	f89a 3000 	ldrb.w	r3, [sl]
 800b22e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b230:	d015      	beq.n	800b25e <_svfiprintf_r+0xfa>
 800b232:	9a07      	ldr	r2, [sp, #28]
 800b234:	4654      	mov	r4, sl
 800b236:	2000      	movs	r0, #0
 800b238:	f04f 0c0a 	mov.w	ip, #10
 800b23c:	4621      	mov	r1, r4
 800b23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b242:	3b30      	subs	r3, #48	@ 0x30
 800b244:	2b09      	cmp	r3, #9
 800b246:	d94b      	bls.n	800b2e0 <_svfiprintf_r+0x17c>
 800b248:	b1b0      	cbz	r0, 800b278 <_svfiprintf_r+0x114>
 800b24a:	9207      	str	r2, [sp, #28]
 800b24c:	e014      	b.n	800b278 <_svfiprintf_r+0x114>
 800b24e:	eba0 0308 	sub.w	r3, r0, r8
 800b252:	fa09 f303 	lsl.w	r3, r9, r3
 800b256:	4313      	orrs	r3, r2
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	46a2      	mov	sl, r4
 800b25c:	e7d2      	b.n	800b204 <_svfiprintf_r+0xa0>
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	1d19      	adds	r1, r3, #4
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	9103      	str	r1, [sp, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	bfbb      	ittet	lt
 800b26a:	425b      	neglt	r3, r3
 800b26c:	f042 0202 	orrlt.w	r2, r2, #2
 800b270:	9307      	strge	r3, [sp, #28]
 800b272:	9307      	strlt	r3, [sp, #28]
 800b274:	bfb8      	it	lt
 800b276:	9204      	strlt	r2, [sp, #16]
 800b278:	7823      	ldrb	r3, [r4, #0]
 800b27a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b27c:	d10a      	bne.n	800b294 <_svfiprintf_r+0x130>
 800b27e:	7863      	ldrb	r3, [r4, #1]
 800b280:	2b2a      	cmp	r3, #42	@ 0x2a
 800b282:	d132      	bne.n	800b2ea <_svfiprintf_r+0x186>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	1d1a      	adds	r2, r3, #4
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	9203      	str	r2, [sp, #12]
 800b28c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b290:	3402      	adds	r4, #2
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b358 <_svfiprintf_r+0x1f4>
 800b298:	7821      	ldrb	r1, [r4, #0]
 800b29a:	2203      	movs	r2, #3
 800b29c:	4650      	mov	r0, sl
 800b29e:	f7f4 ff9f 	bl	80001e0 <memchr>
 800b2a2:	b138      	cbz	r0, 800b2b4 <_svfiprintf_r+0x150>
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	eba0 000a 	sub.w	r0, r0, sl
 800b2aa:	2240      	movs	r2, #64	@ 0x40
 800b2ac:	4082      	lsls	r2, r0
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	3401      	adds	r4, #1
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b8:	4824      	ldr	r0, [pc, #144]	@ (800b34c <_svfiprintf_r+0x1e8>)
 800b2ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2be:	2206      	movs	r2, #6
 800b2c0:	f7f4 ff8e 	bl	80001e0 <memchr>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d036      	beq.n	800b336 <_svfiprintf_r+0x1d2>
 800b2c8:	4b21      	ldr	r3, [pc, #132]	@ (800b350 <_svfiprintf_r+0x1ec>)
 800b2ca:	bb1b      	cbnz	r3, 800b314 <_svfiprintf_r+0x1b0>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	3307      	adds	r3, #7
 800b2d0:	f023 0307 	bic.w	r3, r3, #7
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	9303      	str	r3, [sp, #12]
 800b2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2da:	4433      	add	r3, r6
 800b2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2de:	e76a      	b.n	800b1b6 <_svfiprintf_r+0x52>
 800b2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	e7a8      	b.n	800b23c <_svfiprintf_r+0xd8>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	3401      	adds	r4, #1
 800b2ee:	9305      	str	r3, [sp, #20]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	f04f 0c0a 	mov.w	ip, #10
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2fc:	3a30      	subs	r2, #48	@ 0x30
 800b2fe:	2a09      	cmp	r2, #9
 800b300:	d903      	bls.n	800b30a <_svfiprintf_r+0x1a6>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0c6      	beq.n	800b294 <_svfiprintf_r+0x130>
 800b306:	9105      	str	r1, [sp, #20]
 800b308:	e7c4      	b.n	800b294 <_svfiprintf_r+0x130>
 800b30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b30e:	4604      	mov	r4, r0
 800b310:	2301      	movs	r3, #1
 800b312:	e7f0      	b.n	800b2f6 <_svfiprintf_r+0x192>
 800b314:	ab03      	add	r3, sp, #12
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	462a      	mov	r2, r5
 800b31a:	4b0e      	ldr	r3, [pc, #56]	@ (800b354 <_svfiprintf_r+0x1f0>)
 800b31c:	a904      	add	r1, sp, #16
 800b31e:	4638      	mov	r0, r7
 800b320:	f7fc fc94 	bl	8007c4c <_printf_float>
 800b324:	1c42      	adds	r2, r0, #1
 800b326:	4606      	mov	r6, r0
 800b328:	d1d6      	bne.n	800b2d8 <_svfiprintf_r+0x174>
 800b32a:	89ab      	ldrh	r3, [r5, #12]
 800b32c:	065b      	lsls	r3, r3, #25
 800b32e:	f53f af2d 	bmi.w	800b18c <_svfiprintf_r+0x28>
 800b332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b334:	e72c      	b.n	800b190 <_svfiprintf_r+0x2c>
 800b336:	ab03      	add	r3, sp, #12
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	462a      	mov	r2, r5
 800b33c:	4b05      	ldr	r3, [pc, #20]	@ (800b354 <_svfiprintf_r+0x1f0>)
 800b33e:	a904      	add	r1, sp, #16
 800b340:	4638      	mov	r0, r7
 800b342:	f7fc ff1b 	bl	800817c <_printf_i>
 800b346:	e7ed      	b.n	800b324 <_svfiprintf_r+0x1c0>
 800b348:	0800c659 	.word	0x0800c659
 800b34c:	0800c663 	.word	0x0800c663
 800b350:	08007c4d 	.word	0x08007c4d
 800b354:	0800b0ad 	.word	0x0800b0ad
 800b358:	0800c65f 	.word	0x0800c65f

0800b35c <__sflush_r>:
 800b35c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	0716      	lsls	r6, r2, #28
 800b366:	4605      	mov	r5, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	d454      	bmi.n	800b416 <__sflush_r+0xba>
 800b36c:	684b      	ldr	r3, [r1, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dc02      	bgt.n	800b378 <__sflush_r+0x1c>
 800b372:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b374:	2b00      	cmp	r3, #0
 800b376:	dd48      	ble.n	800b40a <__sflush_r+0xae>
 800b378:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b37a:	2e00      	cmp	r6, #0
 800b37c:	d045      	beq.n	800b40a <__sflush_r+0xae>
 800b37e:	2300      	movs	r3, #0
 800b380:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b384:	682f      	ldr	r7, [r5, #0]
 800b386:	6a21      	ldr	r1, [r4, #32]
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	d030      	beq.n	800b3ee <__sflush_r+0x92>
 800b38c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	0759      	lsls	r1, r3, #29
 800b392:	d505      	bpl.n	800b3a0 <__sflush_r+0x44>
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	1ad2      	subs	r2, r2, r3
 800b398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b39a:	b10b      	cbz	r3, 800b3a0 <__sflush_r+0x44>
 800b39c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b39e:	1ad2      	subs	r2, r2, r3
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3a4:	6a21      	ldr	r1, [r4, #32]
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b0      	blx	r6
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	d106      	bne.n	800b3be <__sflush_r+0x62>
 800b3b0:	6829      	ldr	r1, [r5, #0]
 800b3b2:	291d      	cmp	r1, #29
 800b3b4:	d82b      	bhi.n	800b40e <__sflush_r+0xb2>
 800b3b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b460 <__sflush_r+0x104>)
 800b3b8:	410a      	asrs	r2, r1
 800b3ba:	07d6      	lsls	r6, r2, #31
 800b3bc:	d427      	bmi.n	800b40e <__sflush_r+0xb2>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	6062      	str	r2, [r4, #4]
 800b3c2:	04d9      	lsls	r1, r3, #19
 800b3c4:	6922      	ldr	r2, [r4, #16]
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	d504      	bpl.n	800b3d4 <__sflush_r+0x78>
 800b3ca:	1c42      	adds	r2, r0, #1
 800b3cc:	d101      	bne.n	800b3d2 <__sflush_r+0x76>
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	b903      	cbnz	r3, 800b3d4 <__sflush_r+0x78>
 800b3d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3d6:	602f      	str	r7, [r5, #0]
 800b3d8:	b1b9      	cbz	r1, 800b40a <__sflush_r+0xae>
 800b3da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3de:	4299      	cmp	r1, r3
 800b3e0:	d002      	beq.n	800b3e8 <__sflush_r+0x8c>
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7fe fa2c 	bl	8009840 <_free_r>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3ec:	e00d      	b.n	800b40a <__sflush_r+0xae>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	47b0      	blx	r6
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	1c50      	adds	r0, r2, #1
 800b3f8:	d1c9      	bne.n	800b38e <__sflush_r+0x32>
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d0c6      	beq.n	800b38e <__sflush_r+0x32>
 800b400:	2b1d      	cmp	r3, #29
 800b402:	d001      	beq.n	800b408 <__sflush_r+0xac>
 800b404:	2b16      	cmp	r3, #22
 800b406:	d11e      	bne.n	800b446 <__sflush_r+0xea>
 800b408:	602f      	str	r7, [r5, #0]
 800b40a:	2000      	movs	r0, #0
 800b40c:	e022      	b.n	800b454 <__sflush_r+0xf8>
 800b40e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b412:	b21b      	sxth	r3, r3
 800b414:	e01b      	b.n	800b44e <__sflush_r+0xf2>
 800b416:	690f      	ldr	r7, [r1, #16]
 800b418:	2f00      	cmp	r7, #0
 800b41a:	d0f6      	beq.n	800b40a <__sflush_r+0xae>
 800b41c:	0793      	lsls	r3, r2, #30
 800b41e:	680e      	ldr	r6, [r1, #0]
 800b420:	bf08      	it	eq
 800b422:	694b      	ldreq	r3, [r1, #20]
 800b424:	600f      	str	r7, [r1, #0]
 800b426:	bf18      	it	ne
 800b428:	2300      	movne	r3, #0
 800b42a:	eba6 0807 	sub.w	r8, r6, r7
 800b42e:	608b      	str	r3, [r1, #8]
 800b430:	f1b8 0f00 	cmp.w	r8, #0
 800b434:	dde9      	ble.n	800b40a <__sflush_r+0xae>
 800b436:	6a21      	ldr	r1, [r4, #32]
 800b438:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b43a:	4643      	mov	r3, r8
 800b43c:	463a      	mov	r2, r7
 800b43e:	4628      	mov	r0, r5
 800b440:	47b0      	blx	r6
 800b442:	2800      	cmp	r0, #0
 800b444:	dc08      	bgt.n	800b458 <__sflush_r+0xfc>
 800b446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b44e:	81a3      	strh	r3, [r4, #12]
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	4407      	add	r7, r0
 800b45a:	eba8 0800 	sub.w	r8, r8, r0
 800b45e:	e7e7      	b.n	800b430 <__sflush_r+0xd4>
 800b460:	dfbffffe 	.word	0xdfbffffe

0800b464 <_fflush_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	690b      	ldr	r3, [r1, #16]
 800b468:	4605      	mov	r5, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	b913      	cbnz	r3, 800b474 <_fflush_r+0x10>
 800b46e:	2500      	movs	r5, #0
 800b470:	4628      	mov	r0, r5
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	b118      	cbz	r0, 800b47e <_fflush_r+0x1a>
 800b476:	6a03      	ldr	r3, [r0, #32]
 800b478:	b90b      	cbnz	r3, 800b47e <_fflush_r+0x1a>
 800b47a:	f7fd fa3f 	bl	80088fc <__sinit>
 800b47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0f3      	beq.n	800b46e <_fflush_r+0xa>
 800b486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b488:	07d0      	lsls	r0, r2, #31
 800b48a:	d404      	bmi.n	800b496 <_fflush_r+0x32>
 800b48c:	0599      	lsls	r1, r3, #22
 800b48e:	d402      	bmi.n	800b496 <_fflush_r+0x32>
 800b490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b492:	f7fd fb7e 	bl	8008b92 <__retarget_lock_acquire_recursive>
 800b496:	4628      	mov	r0, r5
 800b498:	4621      	mov	r1, r4
 800b49a:	f7ff ff5f 	bl	800b35c <__sflush_r>
 800b49e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4a0:	07da      	lsls	r2, r3, #31
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	d4e4      	bmi.n	800b470 <_fflush_r+0xc>
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	059b      	lsls	r3, r3, #22
 800b4aa:	d4e1      	bmi.n	800b470 <_fflush_r+0xc>
 800b4ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4ae:	f7fd fb71 	bl	8008b94 <__retarget_lock_release_recursive>
 800b4b2:	e7dd      	b.n	800b470 <_fflush_r+0xc>

0800b4b4 <memmove>:
 800b4b4:	4288      	cmp	r0, r1
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	eb01 0402 	add.w	r4, r1, r2
 800b4bc:	d902      	bls.n	800b4c4 <memmove+0x10>
 800b4be:	4284      	cmp	r4, r0
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	d807      	bhi.n	800b4d4 <memmove+0x20>
 800b4c4:	1e43      	subs	r3, r0, #1
 800b4c6:	42a1      	cmp	r1, r4
 800b4c8:	d008      	beq.n	800b4dc <memmove+0x28>
 800b4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4d2:	e7f8      	b.n	800b4c6 <memmove+0x12>
 800b4d4:	4402      	add	r2, r0
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	428a      	cmp	r2, r1
 800b4da:	d100      	bne.n	800b4de <memmove+0x2a>
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4e6:	e7f7      	b.n	800b4d8 <memmove+0x24>

0800b4e8 <strncmp>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	b16a      	cbz	r2, 800b508 <strncmp+0x20>
 800b4ec:	3901      	subs	r1, #1
 800b4ee:	1884      	adds	r4, r0, r2
 800b4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d103      	bne.n	800b504 <strncmp+0x1c>
 800b4fc:	42a0      	cmp	r0, r4
 800b4fe:	d001      	beq.n	800b504 <strncmp+0x1c>
 800b500:	2a00      	cmp	r2, #0
 800b502:	d1f5      	bne.n	800b4f0 <strncmp+0x8>
 800b504:	1ad0      	subs	r0, r2, r3
 800b506:	bd10      	pop	{r4, pc}
 800b508:	4610      	mov	r0, r2
 800b50a:	e7fc      	b.n	800b506 <strncmp+0x1e>

0800b50c <_sbrk_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d06      	ldr	r5, [pc, #24]	@ (800b528 <_sbrk_r+0x1c>)
 800b510:	2300      	movs	r3, #0
 800b512:	4604      	mov	r4, r0
 800b514:	4608      	mov	r0, r1
 800b516:	602b      	str	r3, [r5, #0]
 800b518:	f7f6 f872 	bl	8001600 <_sbrk>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	d102      	bne.n	800b526 <_sbrk_r+0x1a>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	b103      	cbz	r3, 800b526 <_sbrk_r+0x1a>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	20002028 	.word	0x20002028

0800b52c <memcpy>:
 800b52c:	440a      	add	r2, r1
 800b52e:	4291      	cmp	r1, r2
 800b530:	f100 33ff 	add.w	r3, r0, #4294967295
 800b534:	d100      	bne.n	800b538 <memcpy+0xc>
 800b536:	4770      	bx	lr
 800b538:	b510      	push	{r4, lr}
 800b53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b542:	4291      	cmp	r1, r2
 800b544:	d1f9      	bne.n	800b53a <memcpy+0xe>
 800b546:	bd10      	pop	{r4, pc}

0800b548 <nan>:
 800b548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b550 <nan+0x8>
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	00000000 	.word	0x00000000
 800b554:	7ff80000 	.word	0x7ff80000

0800b558 <__assert_func>:
 800b558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b55a:	4614      	mov	r4, r2
 800b55c:	461a      	mov	r2, r3
 800b55e:	4b09      	ldr	r3, [pc, #36]	@ (800b584 <__assert_func+0x2c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4605      	mov	r5, r0
 800b564:	68d8      	ldr	r0, [r3, #12]
 800b566:	b954      	cbnz	r4, 800b57e <__assert_func+0x26>
 800b568:	4b07      	ldr	r3, [pc, #28]	@ (800b588 <__assert_func+0x30>)
 800b56a:	461c      	mov	r4, r3
 800b56c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b570:	9100      	str	r1, [sp, #0]
 800b572:	462b      	mov	r3, r5
 800b574:	4905      	ldr	r1, [pc, #20]	@ (800b58c <__assert_func+0x34>)
 800b576:	f000 fba7 	bl	800bcc8 <fiprintf>
 800b57a:	f000 fbb7 	bl	800bcec <abort>
 800b57e:	4b04      	ldr	r3, [pc, #16]	@ (800b590 <__assert_func+0x38>)
 800b580:	e7f4      	b.n	800b56c <__assert_func+0x14>
 800b582:	bf00      	nop
 800b584:	20000108 	.word	0x20000108
 800b588:	0800c6ad 	.word	0x0800c6ad
 800b58c:	0800c67f 	.word	0x0800c67f
 800b590:	0800c672 	.word	0x0800c672

0800b594 <_calloc_r>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	fba1 5402 	umull	r5, r4, r1, r2
 800b59a:	b93c      	cbnz	r4, 800b5ac <_calloc_r+0x18>
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7fe f9c3 	bl	8009928 <_malloc_r>
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	b928      	cbnz	r0, 800b5b2 <_calloc_r+0x1e>
 800b5a6:	2600      	movs	r6, #0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	220c      	movs	r2, #12
 800b5ae:	6002      	str	r2, [r0, #0]
 800b5b0:	e7f9      	b.n	800b5a6 <_calloc_r+0x12>
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	f7fd fa6e 	bl	8008a96 <memset>
 800b5ba:	e7f5      	b.n	800b5a8 <_calloc_r+0x14>

0800b5bc <rshift>:
 800b5bc:	6903      	ldr	r3, [r0, #16]
 800b5be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5ca:	f100 0414 	add.w	r4, r0, #20
 800b5ce:	dd45      	ble.n	800b65c <rshift+0xa0>
 800b5d0:	f011 011f 	ands.w	r1, r1, #31
 800b5d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5dc:	d10c      	bne.n	800b5f8 <rshift+0x3c>
 800b5de:	f100 0710 	add.w	r7, r0, #16
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	42b1      	cmp	r1, r6
 800b5e6:	d334      	bcc.n	800b652 <rshift+0x96>
 800b5e8:	1a9b      	subs	r3, r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	1eea      	subs	r2, r5, #3
 800b5ee:	4296      	cmp	r6, r2
 800b5f0:	bf38      	it	cc
 800b5f2:	2300      	movcc	r3, #0
 800b5f4:	4423      	add	r3, r4
 800b5f6:	e015      	b.n	800b624 <rshift+0x68>
 800b5f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b5fc:	f1c1 0820 	rsb	r8, r1, #32
 800b600:	40cf      	lsrs	r7, r1
 800b602:	f105 0e04 	add.w	lr, r5, #4
 800b606:	46a1      	mov	r9, r4
 800b608:	4576      	cmp	r6, lr
 800b60a:	46f4      	mov	ip, lr
 800b60c:	d815      	bhi.n	800b63a <rshift+0x7e>
 800b60e:	1a9a      	subs	r2, r3, r2
 800b610:	0092      	lsls	r2, r2, #2
 800b612:	3a04      	subs	r2, #4
 800b614:	3501      	adds	r5, #1
 800b616:	42ae      	cmp	r6, r5
 800b618:	bf38      	it	cc
 800b61a:	2200      	movcc	r2, #0
 800b61c:	18a3      	adds	r3, r4, r2
 800b61e:	50a7      	str	r7, [r4, r2]
 800b620:	b107      	cbz	r7, 800b624 <rshift+0x68>
 800b622:	3304      	adds	r3, #4
 800b624:	1b1a      	subs	r2, r3, r4
 800b626:	42a3      	cmp	r3, r4
 800b628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b62c:	bf08      	it	eq
 800b62e:	2300      	moveq	r3, #0
 800b630:	6102      	str	r2, [r0, #16]
 800b632:	bf08      	it	eq
 800b634:	6143      	streq	r3, [r0, #20]
 800b636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b63a:	f8dc c000 	ldr.w	ip, [ip]
 800b63e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b642:	ea4c 0707 	orr.w	r7, ip, r7
 800b646:	f849 7b04 	str.w	r7, [r9], #4
 800b64a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b64e:	40cf      	lsrs	r7, r1
 800b650:	e7da      	b.n	800b608 <rshift+0x4c>
 800b652:	f851 cb04 	ldr.w	ip, [r1], #4
 800b656:	f847 cf04 	str.w	ip, [r7, #4]!
 800b65a:	e7c3      	b.n	800b5e4 <rshift+0x28>
 800b65c:	4623      	mov	r3, r4
 800b65e:	e7e1      	b.n	800b624 <rshift+0x68>

0800b660 <__hexdig_fun>:
 800b660:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b664:	2b09      	cmp	r3, #9
 800b666:	d802      	bhi.n	800b66e <__hexdig_fun+0xe>
 800b668:	3820      	subs	r0, #32
 800b66a:	b2c0      	uxtb	r0, r0
 800b66c:	4770      	bx	lr
 800b66e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b672:	2b05      	cmp	r3, #5
 800b674:	d801      	bhi.n	800b67a <__hexdig_fun+0x1a>
 800b676:	3847      	subs	r0, #71	@ 0x47
 800b678:	e7f7      	b.n	800b66a <__hexdig_fun+0xa>
 800b67a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b67e:	2b05      	cmp	r3, #5
 800b680:	d801      	bhi.n	800b686 <__hexdig_fun+0x26>
 800b682:	3827      	subs	r0, #39	@ 0x27
 800b684:	e7f1      	b.n	800b66a <__hexdig_fun+0xa>
 800b686:	2000      	movs	r0, #0
 800b688:	4770      	bx	lr
	...

0800b68c <__gethex>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	b085      	sub	sp, #20
 800b692:	468a      	mov	sl, r1
 800b694:	9302      	str	r3, [sp, #8]
 800b696:	680b      	ldr	r3, [r1, #0]
 800b698:	9001      	str	r0, [sp, #4]
 800b69a:	4690      	mov	r8, r2
 800b69c:	1c9c      	adds	r4, r3, #2
 800b69e:	46a1      	mov	r9, r4
 800b6a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b6a4:	2830      	cmp	r0, #48	@ 0x30
 800b6a6:	d0fa      	beq.n	800b69e <__gethex+0x12>
 800b6a8:	eba9 0303 	sub.w	r3, r9, r3
 800b6ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800b6b0:	f7ff ffd6 	bl	800b660 <__hexdig_fun>
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d168      	bne.n	800b78c <__gethex+0x100>
 800b6ba:	49a0      	ldr	r1, [pc, #640]	@ (800b93c <__gethex+0x2b0>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	4648      	mov	r0, r9
 800b6c0:	f7ff ff12 	bl	800b4e8 <strncmp>
 800b6c4:	4607      	mov	r7, r0
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d167      	bne.n	800b79a <__gethex+0x10e>
 800b6ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b6ce:	4626      	mov	r6, r4
 800b6d0:	f7ff ffc6 	bl	800b660 <__hexdig_fun>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d062      	beq.n	800b79e <__gethex+0x112>
 800b6d8:	4623      	mov	r3, r4
 800b6da:	7818      	ldrb	r0, [r3, #0]
 800b6dc:	2830      	cmp	r0, #48	@ 0x30
 800b6de:	4699      	mov	r9, r3
 800b6e0:	f103 0301 	add.w	r3, r3, #1
 800b6e4:	d0f9      	beq.n	800b6da <__gethex+0x4e>
 800b6e6:	f7ff ffbb 	bl	800b660 <__hexdig_fun>
 800b6ea:	fab0 f580 	clz	r5, r0
 800b6ee:	096d      	lsrs	r5, r5, #5
 800b6f0:	f04f 0b01 	mov.w	fp, #1
 800b6f4:	464a      	mov	r2, r9
 800b6f6:	4616      	mov	r6, r2
 800b6f8:	3201      	adds	r2, #1
 800b6fa:	7830      	ldrb	r0, [r6, #0]
 800b6fc:	f7ff ffb0 	bl	800b660 <__hexdig_fun>
 800b700:	2800      	cmp	r0, #0
 800b702:	d1f8      	bne.n	800b6f6 <__gethex+0x6a>
 800b704:	498d      	ldr	r1, [pc, #564]	@ (800b93c <__gethex+0x2b0>)
 800b706:	2201      	movs	r2, #1
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff feed 	bl	800b4e8 <strncmp>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d13f      	bne.n	800b792 <__gethex+0x106>
 800b712:	b944      	cbnz	r4, 800b726 <__gethex+0x9a>
 800b714:	1c74      	adds	r4, r6, #1
 800b716:	4622      	mov	r2, r4
 800b718:	4616      	mov	r6, r2
 800b71a:	3201      	adds	r2, #1
 800b71c:	7830      	ldrb	r0, [r6, #0]
 800b71e:	f7ff ff9f 	bl	800b660 <__hexdig_fun>
 800b722:	2800      	cmp	r0, #0
 800b724:	d1f8      	bne.n	800b718 <__gethex+0x8c>
 800b726:	1ba4      	subs	r4, r4, r6
 800b728:	00a7      	lsls	r7, r4, #2
 800b72a:	7833      	ldrb	r3, [r6, #0]
 800b72c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b730:	2b50      	cmp	r3, #80	@ 0x50
 800b732:	d13e      	bne.n	800b7b2 <__gethex+0x126>
 800b734:	7873      	ldrb	r3, [r6, #1]
 800b736:	2b2b      	cmp	r3, #43	@ 0x2b
 800b738:	d033      	beq.n	800b7a2 <__gethex+0x116>
 800b73a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b73c:	d034      	beq.n	800b7a8 <__gethex+0x11c>
 800b73e:	1c71      	adds	r1, r6, #1
 800b740:	2400      	movs	r4, #0
 800b742:	7808      	ldrb	r0, [r1, #0]
 800b744:	f7ff ff8c 	bl	800b660 <__hexdig_fun>
 800b748:	1e43      	subs	r3, r0, #1
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b18      	cmp	r3, #24
 800b74e:	d830      	bhi.n	800b7b2 <__gethex+0x126>
 800b750:	f1a0 0210 	sub.w	r2, r0, #16
 800b754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b758:	f7ff ff82 	bl	800b660 <__hexdig_fun>
 800b75c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b760:	fa5f fc8c 	uxtb.w	ip, ip
 800b764:	f1bc 0f18 	cmp.w	ip, #24
 800b768:	f04f 030a 	mov.w	r3, #10
 800b76c:	d91e      	bls.n	800b7ac <__gethex+0x120>
 800b76e:	b104      	cbz	r4, 800b772 <__gethex+0xe6>
 800b770:	4252      	negs	r2, r2
 800b772:	4417      	add	r7, r2
 800b774:	f8ca 1000 	str.w	r1, [sl]
 800b778:	b1ed      	cbz	r5, 800b7b6 <__gethex+0x12a>
 800b77a:	f1bb 0f00 	cmp.w	fp, #0
 800b77e:	bf0c      	ite	eq
 800b780:	2506      	moveq	r5, #6
 800b782:	2500      	movne	r5, #0
 800b784:	4628      	mov	r0, r5
 800b786:	b005      	add	sp, #20
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	2500      	movs	r5, #0
 800b78e:	462c      	mov	r4, r5
 800b790:	e7b0      	b.n	800b6f4 <__gethex+0x68>
 800b792:	2c00      	cmp	r4, #0
 800b794:	d1c7      	bne.n	800b726 <__gethex+0x9a>
 800b796:	4627      	mov	r7, r4
 800b798:	e7c7      	b.n	800b72a <__gethex+0x9e>
 800b79a:	464e      	mov	r6, r9
 800b79c:	462f      	mov	r7, r5
 800b79e:	2501      	movs	r5, #1
 800b7a0:	e7c3      	b.n	800b72a <__gethex+0x9e>
 800b7a2:	2400      	movs	r4, #0
 800b7a4:	1cb1      	adds	r1, r6, #2
 800b7a6:	e7cc      	b.n	800b742 <__gethex+0xb6>
 800b7a8:	2401      	movs	r4, #1
 800b7aa:	e7fb      	b.n	800b7a4 <__gethex+0x118>
 800b7ac:	fb03 0002 	mla	r0, r3, r2, r0
 800b7b0:	e7ce      	b.n	800b750 <__gethex+0xc4>
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	e7de      	b.n	800b774 <__gethex+0xe8>
 800b7b6:	eba6 0309 	sub.w	r3, r6, r9
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	4629      	mov	r1, r5
 800b7be:	2b07      	cmp	r3, #7
 800b7c0:	dc0a      	bgt.n	800b7d8 <__gethex+0x14c>
 800b7c2:	9801      	ldr	r0, [sp, #4]
 800b7c4:	f7fe f93c 	bl	8009a40 <_Balloc>
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	b940      	cbnz	r0, 800b7de <__gethex+0x152>
 800b7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b940 <__gethex+0x2b4>)
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	21e4      	movs	r1, #228	@ 0xe4
 800b7d2:	485c      	ldr	r0, [pc, #368]	@ (800b944 <__gethex+0x2b8>)
 800b7d4:	f7ff fec0 	bl	800b558 <__assert_func>
 800b7d8:	3101      	adds	r1, #1
 800b7da:	105b      	asrs	r3, r3, #1
 800b7dc:	e7ef      	b.n	800b7be <__gethex+0x132>
 800b7de:	f100 0a14 	add.w	sl, r0, #20
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	4655      	mov	r5, sl
 800b7e6:	469b      	mov	fp, r3
 800b7e8:	45b1      	cmp	r9, r6
 800b7ea:	d337      	bcc.n	800b85c <__gethex+0x1d0>
 800b7ec:	f845 bb04 	str.w	fp, [r5], #4
 800b7f0:	eba5 050a 	sub.w	r5, r5, sl
 800b7f4:	10ad      	asrs	r5, r5, #2
 800b7f6:	6125      	str	r5, [r4, #16]
 800b7f8:	4658      	mov	r0, fp
 800b7fa:	f7fe fa13 	bl	8009c24 <__hi0bits>
 800b7fe:	016d      	lsls	r5, r5, #5
 800b800:	f8d8 6000 	ldr.w	r6, [r8]
 800b804:	1a2d      	subs	r5, r5, r0
 800b806:	42b5      	cmp	r5, r6
 800b808:	dd54      	ble.n	800b8b4 <__gethex+0x228>
 800b80a:	1bad      	subs	r5, r5, r6
 800b80c:	4629      	mov	r1, r5
 800b80e:	4620      	mov	r0, r4
 800b810:	f7fe fda7 	bl	800a362 <__any_on>
 800b814:	4681      	mov	r9, r0
 800b816:	b178      	cbz	r0, 800b838 <__gethex+0x1ac>
 800b818:	1e6b      	subs	r3, r5, #1
 800b81a:	1159      	asrs	r1, r3, #5
 800b81c:	f003 021f 	and.w	r2, r3, #31
 800b820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b824:	f04f 0901 	mov.w	r9, #1
 800b828:	fa09 f202 	lsl.w	r2, r9, r2
 800b82c:	420a      	tst	r2, r1
 800b82e:	d003      	beq.n	800b838 <__gethex+0x1ac>
 800b830:	454b      	cmp	r3, r9
 800b832:	dc36      	bgt.n	800b8a2 <__gethex+0x216>
 800b834:	f04f 0902 	mov.w	r9, #2
 800b838:	4629      	mov	r1, r5
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff febe 	bl	800b5bc <rshift>
 800b840:	442f      	add	r7, r5
 800b842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b846:	42bb      	cmp	r3, r7
 800b848:	da42      	bge.n	800b8d0 <__gethex+0x244>
 800b84a:	9801      	ldr	r0, [sp, #4]
 800b84c:	4621      	mov	r1, r4
 800b84e:	f7fe f937 	bl	8009ac0 <_Bfree>
 800b852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b854:	2300      	movs	r3, #0
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	25a3      	movs	r5, #163	@ 0xa3
 800b85a:	e793      	b.n	800b784 <__gethex+0xf8>
 800b85c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b860:	2a2e      	cmp	r2, #46	@ 0x2e
 800b862:	d012      	beq.n	800b88a <__gethex+0x1fe>
 800b864:	2b20      	cmp	r3, #32
 800b866:	d104      	bne.n	800b872 <__gethex+0x1e6>
 800b868:	f845 bb04 	str.w	fp, [r5], #4
 800b86c:	f04f 0b00 	mov.w	fp, #0
 800b870:	465b      	mov	r3, fp
 800b872:	7830      	ldrb	r0, [r6, #0]
 800b874:	9303      	str	r3, [sp, #12]
 800b876:	f7ff fef3 	bl	800b660 <__hexdig_fun>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	f000 000f 	and.w	r0, r0, #15
 800b880:	4098      	lsls	r0, r3
 800b882:	ea4b 0b00 	orr.w	fp, fp, r0
 800b886:	3304      	adds	r3, #4
 800b888:	e7ae      	b.n	800b7e8 <__gethex+0x15c>
 800b88a:	45b1      	cmp	r9, r6
 800b88c:	d8ea      	bhi.n	800b864 <__gethex+0x1d8>
 800b88e:	492b      	ldr	r1, [pc, #172]	@ (800b93c <__gethex+0x2b0>)
 800b890:	9303      	str	r3, [sp, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff fe27 	bl	800b4e8 <strncmp>
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d1e1      	bne.n	800b864 <__gethex+0x1d8>
 800b8a0:	e7a2      	b.n	800b7e8 <__gethex+0x15c>
 800b8a2:	1ea9      	subs	r1, r5, #2
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f7fe fd5c 	bl	800a362 <__any_on>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d0c2      	beq.n	800b834 <__gethex+0x1a8>
 800b8ae:	f04f 0903 	mov.w	r9, #3
 800b8b2:	e7c1      	b.n	800b838 <__gethex+0x1ac>
 800b8b4:	da09      	bge.n	800b8ca <__gethex+0x23e>
 800b8b6:	1b75      	subs	r5, r6, r5
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	9801      	ldr	r0, [sp, #4]
 800b8bc:	462a      	mov	r2, r5
 800b8be:	f7fe fb17 	bl	8009ef0 <__lshift>
 800b8c2:	1b7f      	subs	r7, r7, r5
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	f100 0a14 	add.w	sl, r0, #20
 800b8ca:	f04f 0900 	mov.w	r9, #0
 800b8ce:	e7b8      	b.n	800b842 <__gethex+0x1b6>
 800b8d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b8d4:	42bd      	cmp	r5, r7
 800b8d6:	dd6f      	ble.n	800b9b8 <__gethex+0x32c>
 800b8d8:	1bed      	subs	r5, r5, r7
 800b8da:	42ae      	cmp	r6, r5
 800b8dc:	dc34      	bgt.n	800b948 <__gethex+0x2bc>
 800b8de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d022      	beq.n	800b92c <__gethex+0x2a0>
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d024      	beq.n	800b934 <__gethex+0x2a8>
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d115      	bne.n	800b91a <__gethex+0x28e>
 800b8ee:	42ae      	cmp	r6, r5
 800b8f0:	d113      	bne.n	800b91a <__gethex+0x28e>
 800b8f2:	2e01      	cmp	r6, #1
 800b8f4:	d10b      	bne.n	800b90e <__gethex+0x282>
 800b8f6:	9a02      	ldr	r2, [sp, #8]
 800b8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	2301      	movs	r3, #1
 800b900:	6123      	str	r3, [r4, #16]
 800b902:	f8ca 3000 	str.w	r3, [sl]
 800b906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b908:	2562      	movs	r5, #98	@ 0x62
 800b90a:	601c      	str	r4, [r3, #0]
 800b90c:	e73a      	b.n	800b784 <__gethex+0xf8>
 800b90e:	1e71      	subs	r1, r6, #1
 800b910:	4620      	mov	r0, r4
 800b912:	f7fe fd26 	bl	800a362 <__any_on>
 800b916:	2800      	cmp	r0, #0
 800b918:	d1ed      	bne.n	800b8f6 <__gethex+0x26a>
 800b91a:	9801      	ldr	r0, [sp, #4]
 800b91c:	4621      	mov	r1, r4
 800b91e:	f7fe f8cf 	bl	8009ac0 <_Bfree>
 800b922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b924:	2300      	movs	r3, #0
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	2550      	movs	r5, #80	@ 0x50
 800b92a:	e72b      	b.n	800b784 <__gethex+0xf8>
 800b92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f3      	bne.n	800b91a <__gethex+0x28e>
 800b932:	e7e0      	b.n	800b8f6 <__gethex+0x26a>
 800b934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1dd      	bne.n	800b8f6 <__gethex+0x26a>
 800b93a:	e7ee      	b.n	800b91a <__gethex+0x28e>
 800b93c:	0800c500 	.word	0x0800c500
 800b940:	0800c395 	.word	0x0800c395
 800b944:	0800c6ae 	.word	0x0800c6ae
 800b948:	1e6f      	subs	r7, r5, #1
 800b94a:	f1b9 0f00 	cmp.w	r9, #0
 800b94e:	d130      	bne.n	800b9b2 <__gethex+0x326>
 800b950:	b127      	cbz	r7, 800b95c <__gethex+0x2d0>
 800b952:	4639      	mov	r1, r7
 800b954:	4620      	mov	r0, r4
 800b956:	f7fe fd04 	bl	800a362 <__any_on>
 800b95a:	4681      	mov	r9, r0
 800b95c:	117a      	asrs	r2, r7, #5
 800b95e:	2301      	movs	r3, #1
 800b960:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b964:	f007 071f 	and.w	r7, r7, #31
 800b968:	40bb      	lsls	r3, r7
 800b96a:	4213      	tst	r3, r2
 800b96c:	4629      	mov	r1, r5
 800b96e:	4620      	mov	r0, r4
 800b970:	bf18      	it	ne
 800b972:	f049 0902 	orrne.w	r9, r9, #2
 800b976:	f7ff fe21 	bl	800b5bc <rshift>
 800b97a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b97e:	1b76      	subs	r6, r6, r5
 800b980:	2502      	movs	r5, #2
 800b982:	f1b9 0f00 	cmp.w	r9, #0
 800b986:	d047      	beq.n	800ba18 <__gethex+0x38c>
 800b988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d015      	beq.n	800b9bc <__gethex+0x330>
 800b990:	2b03      	cmp	r3, #3
 800b992:	d017      	beq.n	800b9c4 <__gethex+0x338>
 800b994:	2b01      	cmp	r3, #1
 800b996:	d109      	bne.n	800b9ac <__gethex+0x320>
 800b998:	f019 0f02 	tst.w	r9, #2
 800b99c:	d006      	beq.n	800b9ac <__gethex+0x320>
 800b99e:	f8da 3000 	ldr.w	r3, [sl]
 800b9a2:	ea49 0903 	orr.w	r9, r9, r3
 800b9a6:	f019 0f01 	tst.w	r9, #1
 800b9aa:	d10e      	bne.n	800b9ca <__gethex+0x33e>
 800b9ac:	f045 0510 	orr.w	r5, r5, #16
 800b9b0:	e032      	b.n	800ba18 <__gethex+0x38c>
 800b9b2:	f04f 0901 	mov.w	r9, #1
 800b9b6:	e7d1      	b.n	800b95c <__gethex+0x2d0>
 800b9b8:	2501      	movs	r5, #1
 800b9ba:	e7e2      	b.n	800b982 <__gethex+0x2f6>
 800b9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9be:	f1c3 0301 	rsb	r3, r3, #1
 800b9c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0f0      	beq.n	800b9ac <__gethex+0x320>
 800b9ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b9ce:	f104 0314 	add.w	r3, r4, #20
 800b9d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b9d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b9da:	f04f 0c00 	mov.w	ip, #0
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b9e8:	d01b      	beq.n	800ba22 <__gethex+0x396>
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	6002      	str	r2, [r0, #0]
 800b9ee:	2d02      	cmp	r5, #2
 800b9f0:	f104 0314 	add.w	r3, r4, #20
 800b9f4:	d13c      	bne.n	800ba70 <__gethex+0x3e4>
 800b9f6:	f8d8 2000 	ldr.w	r2, [r8]
 800b9fa:	3a01      	subs	r2, #1
 800b9fc:	42b2      	cmp	r2, r6
 800b9fe:	d109      	bne.n	800ba14 <__gethex+0x388>
 800ba00:	1171      	asrs	r1, r6, #5
 800ba02:	2201      	movs	r2, #1
 800ba04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba08:	f006 061f 	and.w	r6, r6, #31
 800ba0c:	fa02 f606 	lsl.w	r6, r2, r6
 800ba10:	421e      	tst	r6, r3
 800ba12:	d13a      	bne.n	800ba8a <__gethex+0x3fe>
 800ba14:	f045 0520 	orr.w	r5, r5, #32
 800ba18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba1a:	601c      	str	r4, [r3, #0]
 800ba1c:	9b02      	ldr	r3, [sp, #8]
 800ba1e:	601f      	str	r7, [r3, #0]
 800ba20:	e6b0      	b.n	800b784 <__gethex+0xf8>
 800ba22:	4299      	cmp	r1, r3
 800ba24:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba28:	d8d9      	bhi.n	800b9de <__gethex+0x352>
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	459b      	cmp	fp, r3
 800ba2e:	db17      	blt.n	800ba60 <__gethex+0x3d4>
 800ba30:	6861      	ldr	r1, [r4, #4]
 800ba32:	9801      	ldr	r0, [sp, #4]
 800ba34:	3101      	adds	r1, #1
 800ba36:	f7fe f803 	bl	8009a40 <_Balloc>
 800ba3a:	4681      	mov	r9, r0
 800ba3c:	b918      	cbnz	r0, 800ba46 <__gethex+0x3ba>
 800ba3e:	4b1a      	ldr	r3, [pc, #104]	@ (800baa8 <__gethex+0x41c>)
 800ba40:	4602      	mov	r2, r0
 800ba42:	2184      	movs	r1, #132	@ 0x84
 800ba44:	e6c5      	b.n	800b7d2 <__gethex+0x146>
 800ba46:	6922      	ldr	r2, [r4, #16]
 800ba48:	3202      	adds	r2, #2
 800ba4a:	f104 010c 	add.w	r1, r4, #12
 800ba4e:	0092      	lsls	r2, r2, #2
 800ba50:	300c      	adds	r0, #12
 800ba52:	f7ff fd6b 	bl	800b52c <memcpy>
 800ba56:	4621      	mov	r1, r4
 800ba58:	9801      	ldr	r0, [sp, #4]
 800ba5a:	f7fe f831 	bl	8009ac0 <_Bfree>
 800ba5e:	464c      	mov	r4, r9
 800ba60:	6923      	ldr	r3, [r4, #16]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba68:	6122      	str	r2, [r4, #16]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	615a      	str	r2, [r3, #20]
 800ba6e:	e7be      	b.n	800b9ee <__gethex+0x362>
 800ba70:	6922      	ldr	r2, [r4, #16]
 800ba72:	455a      	cmp	r2, fp
 800ba74:	dd0b      	ble.n	800ba8e <__gethex+0x402>
 800ba76:	2101      	movs	r1, #1
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7ff fd9f 	bl	800b5bc <rshift>
 800ba7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba82:	3701      	adds	r7, #1
 800ba84:	42bb      	cmp	r3, r7
 800ba86:	f6ff aee0 	blt.w	800b84a <__gethex+0x1be>
 800ba8a:	2501      	movs	r5, #1
 800ba8c:	e7c2      	b.n	800ba14 <__gethex+0x388>
 800ba8e:	f016 061f 	ands.w	r6, r6, #31
 800ba92:	d0fa      	beq.n	800ba8a <__gethex+0x3fe>
 800ba94:	4453      	add	r3, sl
 800ba96:	f1c6 0620 	rsb	r6, r6, #32
 800ba9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba9e:	f7fe f8c1 	bl	8009c24 <__hi0bits>
 800baa2:	42b0      	cmp	r0, r6
 800baa4:	dbe7      	blt.n	800ba76 <__gethex+0x3ea>
 800baa6:	e7f0      	b.n	800ba8a <__gethex+0x3fe>
 800baa8:	0800c395 	.word	0x0800c395

0800baac <L_shift>:
 800baac:	f1c2 0208 	rsb	r2, r2, #8
 800bab0:	0092      	lsls	r2, r2, #2
 800bab2:	b570      	push	{r4, r5, r6, lr}
 800bab4:	f1c2 0620 	rsb	r6, r2, #32
 800bab8:	6843      	ldr	r3, [r0, #4]
 800baba:	6804      	ldr	r4, [r0, #0]
 800babc:	fa03 f506 	lsl.w	r5, r3, r6
 800bac0:	432c      	orrs	r4, r5
 800bac2:	40d3      	lsrs	r3, r2
 800bac4:	6004      	str	r4, [r0, #0]
 800bac6:	f840 3f04 	str.w	r3, [r0, #4]!
 800baca:	4288      	cmp	r0, r1
 800bacc:	d3f4      	bcc.n	800bab8 <L_shift+0xc>
 800bace:	bd70      	pop	{r4, r5, r6, pc}

0800bad0 <__match>:
 800bad0:	b530      	push	{r4, r5, lr}
 800bad2:	6803      	ldr	r3, [r0, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bada:	b914      	cbnz	r4, 800bae2 <__match+0x12>
 800badc:	6003      	str	r3, [r0, #0]
 800bade:	2001      	movs	r0, #1
 800bae0:	bd30      	pop	{r4, r5, pc}
 800bae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800baea:	2d19      	cmp	r5, #25
 800baec:	bf98      	it	ls
 800baee:	3220      	addls	r2, #32
 800baf0:	42a2      	cmp	r2, r4
 800baf2:	d0f0      	beq.n	800bad6 <__match+0x6>
 800baf4:	2000      	movs	r0, #0
 800baf6:	e7f3      	b.n	800bae0 <__match+0x10>

0800baf8 <__hexnan>:
 800baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	680b      	ldr	r3, [r1, #0]
 800bafe:	6801      	ldr	r1, [r0, #0]
 800bb00:	115e      	asrs	r6, r3, #5
 800bb02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb06:	f013 031f 	ands.w	r3, r3, #31
 800bb0a:	b087      	sub	sp, #28
 800bb0c:	bf18      	it	ne
 800bb0e:	3604      	addne	r6, #4
 800bb10:	2500      	movs	r5, #0
 800bb12:	1f37      	subs	r7, r6, #4
 800bb14:	4682      	mov	sl, r0
 800bb16:	4690      	mov	r8, r2
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb1e:	46b9      	mov	r9, r7
 800bb20:	463c      	mov	r4, r7
 800bb22:	9502      	str	r5, [sp, #8]
 800bb24:	46ab      	mov	fp, r5
 800bb26:	784a      	ldrb	r2, [r1, #1]
 800bb28:	1c4b      	adds	r3, r1, #1
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	b342      	cbz	r2, 800bb80 <__hexnan+0x88>
 800bb2e:	4610      	mov	r0, r2
 800bb30:	9105      	str	r1, [sp, #20]
 800bb32:	9204      	str	r2, [sp, #16]
 800bb34:	f7ff fd94 	bl	800b660 <__hexdig_fun>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d151      	bne.n	800bbe0 <__hexnan+0xe8>
 800bb3c:	9a04      	ldr	r2, [sp, #16]
 800bb3e:	9905      	ldr	r1, [sp, #20]
 800bb40:	2a20      	cmp	r2, #32
 800bb42:	d818      	bhi.n	800bb76 <__hexnan+0x7e>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	459b      	cmp	fp, r3
 800bb48:	dd13      	ble.n	800bb72 <__hexnan+0x7a>
 800bb4a:	454c      	cmp	r4, r9
 800bb4c:	d206      	bcs.n	800bb5c <__hexnan+0x64>
 800bb4e:	2d07      	cmp	r5, #7
 800bb50:	dc04      	bgt.n	800bb5c <__hexnan+0x64>
 800bb52:	462a      	mov	r2, r5
 800bb54:	4649      	mov	r1, r9
 800bb56:	4620      	mov	r0, r4
 800bb58:	f7ff ffa8 	bl	800baac <L_shift>
 800bb5c:	4544      	cmp	r4, r8
 800bb5e:	d952      	bls.n	800bc06 <__hexnan+0x10e>
 800bb60:	2300      	movs	r3, #0
 800bb62:	f1a4 0904 	sub.w	r9, r4, #4
 800bb66:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb6a:	f8cd b008 	str.w	fp, [sp, #8]
 800bb6e:	464c      	mov	r4, r9
 800bb70:	461d      	mov	r5, r3
 800bb72:	9903      	ldr	r1, [sp, #12]
 800bb74:	e7d7      	b.n	800bb26 <__hexnan+0x2e>
 800bb76:	2a29      	cmp	r2, #41	@ 0x29
 800bb78:	d157      	bne.n	800bc2a <__hexnan+0x132>
 800bb7a:	3102      	adds	r1, #2
 800bb7c:	f8ca 1000 	str.w	r1, [sl]
 800bb80:	f1bb 0f00 	cmp.w	fp, #0
 800bb84:	d051      	beq.n	800bc2a <__hexnan+0x132>
 800bb86:	454c      	cmp	r4, r9
 800bb88:	d206      	bcs.n	800bb98 <__hexnan+0xa0>
 800bb8a:	2d07      	cmp	r5, #7
 800bb8c:	dc04      	bgt.n	800bb98 <__hexnan+0xa0>
 800bb8e:	462a      	mov	r2, r5
 800bb90:	4649      	mov	r1, r9
 800bb92:	4620      	mov	r0, r4
 800bb94:	f7ff ff8a 	bl	800baac <L_shift>
 800bb98:	4544      	cmp	r4, r8
 800bb9a:	d936      	bls.n	800bc0a <__hexnan+0x112>
 800bb9c:	f1a8 0204 	sub.w	r2, r8, #4
 800bba0:	4623      	mov	r3, r4
 800bba2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bba6:	f842 1f04 	str.w	r1, [r2, #4]!
 800bbaa:	429f      	cmp	r7, r3
 800bbac:	d2f9      	bcs.n	800bba2 <__hexnan+0xaa>
 800bbae:	1b3b      	subs	r3, r7, r4
 800bbb0:	f023 0303 	bic.w	r3, r3, #3
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	3401      	adds	r4, #1
 800bbb8:	3e03      	subs	r6, #3
 800bbba:	42b4      	cmp	r4, r6
 800bbbc:	bf88      	it	hi
 800bbbe:	2304      	movhi	r3, #4
 800bbc0:	4443      	add	r3, r8
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f843 2b04 	str.w	r2, [r3], #4
 800bbc8:	429f      	cmp	r7, r3
 800bbca:	d2fb      	bcs.n	800bbc4 <__hexnan+0xcc>
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	b91b      	cbnz	r3, 800bbd8 <__hexnan+0xe0>
 800bbd0:	4547      	cmp	r7, r8
 800bbd2:	d128      	bne.n	800bc26 <__hexnan+0x12e>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	603b      	str	r3, [r7, #0]
 800bbd8:	2005      	movs	r0, #5
 800bbda:	b007      	add	sp, #28
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	2d08      	cmp	r5, #8
 800bbe4:	f10b 0b01 	add.w	fp, fp, #1
 800bbe8:	dd06      	ble.n	800bbf8 <__hexnan+0x100>
 800bbea:	4544      	cmp	r4, r8
 800bbec:	d9c1      	bls.n	800bb72 <__hexnan+0x7a>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbf4:	2501      	movs	r5, #1
 800bbf6:	3c04      	subs	r4, #4
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	f000 000f 	and.w	r0, r0, #15
 800bbfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc02:	6020      	str	r0, [r4, #0]
 800bc04:	e7b5      	b.n	800bb72 <__hexnan+0x7a>
 800bc06:	2508      	movs	r5, #8
 800bc08:	e7b3      	b.n	800bb72 <__hexnan+0x7a>
 800bc0a:	9b01      	ldr	r3, [sp, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0dd      	beq.n	800bbcc <__hexnan+0xd4>
 800bc10:	f1c3 0320 	rsb	r3, r3, #32
 800bc14:	f04f 32ff 	mov.w	r2, #4294967295
 800bc18:	40da      	lsrs	r2, r3
 800bc1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc24:	e7d2      	b.n	800bbcc <__hexnan+0xd4>
 800bc26:	3f04      	subs	r7, #4
 800bc28:	e7d0      	b.n	800bbcc <__hexnan+0xd4>
 800bc2a:	2004      	movs	r0, #4
 800bc2c:	e7d5      	b.n	800bbda <__hexnan+0xe2>

0800bc2e <__ascii_mbtowc>:
 800bc2e:	b082      	sub	sp, #8
 800bc30:	b901      	cbnz	r1, 800bc34 <__ascii_mbtowc+0x6>
 800bc32:	a901      	add	r1, sp, #4
 800bc34:	b142      	cbz	r2, 800bc48 <__ascii_mbtowc+0x1a>
 800bc36:	b14b      	cbz	r3, 800bc4c <__ascii_mbtowc+0x1e>
 800bc38:	7813      	ldrb	r3, [r2, #0]
 800bc3a:	600b      	str	r3, [r1, #0]
 800bc3c:	7812      	ldrb	r2, [r2, #0]
 800bc3e:	1e10      	subs	r0, r2, #0
 800bc40:	bf18      	it	ne
 800bc42:	2001      	movne	r0, #1
 800bc44:	b002      	add	sp, #8
 800bc46:	4770      	bx	lr
 800bc48:	4610      	mov	r0, r2
 800bc4a:	e7fb      	b.n	800bc44 <__ascii_mbtowc+0x16>
 800bc4c:	f06f 0001 	mvn.w	r0, #1
 800bc50:	e7f8      	b.n	800bc44 <__ascii_mbtowc+0x16>

0800bc52 <_realloc_r>:
 800bc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc56:	4680      	mov	r8, r0
 800bc58:	4615      	mov	r5, r2
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	b921      	cbnz	r1, 800bc68 <_realloc_r+0x16>
 800bc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc62:	4611      	mov	r1, r2
 800bc64:	f7fd be60 	b.w	8009928 <_malloc_r>
 800bc68:	b92a      	cbnz	r2, 800bc76 <_realloc_r+0x24>
 800bc6a:	f7fd fde9 	bl	8009840 <_free_r>
 800bc6e:	2400      	movs	r4, #0
 800bc70:	4620      	mov	r0, r4
 800bc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc76:	f000 f840 	bl	800bcfa <_malloc_usable_size_r>
 800bc7a:	4285      	cmp	r5, r0
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	d802      	bhi.n	800bc86 <_realloc_r+0x34>
 800bc80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc84:	d8f4      	bhi.n	800bc70 <_realloc_r+0x1e>
 800bc86:	4629      	mov	r1, r5
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f7fd fe4d 	bl	8009928 <_malloc_r>
 800bc8e:	4607      	mov	r7, r0
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d0ec      	beq.n	800bc6e <_realloc_r+0x1c>
 800bc94:	42b5      	cmp	r5, r6
 800bc96:	462a      	mov	r2, r5
 800bc98:	4621      	mov	r1, r4
 800bc9a:	bf28      	it	cs
 800bc9c:	4632      	movcs	r2, r6
 800bc9e:	f7ff fc45 	bl	800b52c <memcpy>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4640      	mov	r0, r8
 800bca6:	f7fd fdcb 	bl	8009840 <_free_r>
 800bcaa:	463c      	mov	r4, r7
 800bcac:	e7e0      	b.n	800bc70 <_realloc_r+0x1e>

0800bcae <__ascii_wctomb>:
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	b141      	cbz	r1, 800bcc6 <__ascii_wctomb+0x18>
 800bcb4:	2aff      	cmp	r2, #255	@ 0xff
 800bcb6:	d904      	bls.n	800bcc2 <__ascii_wctomb+0x14>
 800bcb8:	228a      	movs	r2, #138	@ 0x8a
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	4770      	bx	lr
 800bcc2:	700a      	strb	r2, [r1, #0]
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	4770      	bx	lr

0800bcc8 <fiprintf>:
 800bcc8:	b40e      	push	{r1, r2, r3}
 800bcca:	b503      	push	{r0, r1, lr}
 800bccc:	4601      	mov	r1, r0
 800bcce:	ab03      	add	r3, sp, #12
 800bcd0:	4805      	ldr	r0, [pc, #20]	@ (800bce8 <fiprintf+0x20>)
 800bcd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd6:	6800      	ldr	r0, [r0, #0]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	f000 f83f 	bl	800bd5c <_vfiprintf_r>
 800bcde:	b002      	add	sp, #8
 800bce0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bce4:	b003      	add	sp, #12
 800bce6:	4770      	bx	lr
 800bce8:	20000108 	.word	0x20000108

0800bcec <abort>:
 800bcec:	b508      	push	{r3, lr}
 800bcee:	2006      	movs	r0, #6
 800bcf0:	f000 fa08 	bl	800c104 <raise>
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	f7f5 fc0b 	bl	8001510 <_exit>

0800bcfa <_malloc_usable_size_r>:
 800bcfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcfe:	1f18      	subs	r0, r3, #4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	bfbc      	itt	lt
 800bd04:	580b      	ldrlt	r3, [r1, r0]
 800bd06:	18c0      	addlt	r0, r0, r3
 800bd08:	4770      	bx	lr

0800bd0a <__sfputc_r>:
 800bd0a:	6893      	ldr	r3, [r2, #8]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	b410      	push	{r4}
 800bd12:	6093      	str	r3, [r2, #8]
 800bd14:	da08      	bge.n	800bd28 <__sfputc_r+0x1e>
 800bd16:	6994      	ldr	r4, [r2, #24]
 800bd18:	42a3      	cmp	r3, r4
 800bd1a:	db01      	blt.n	800bd20 <__sfputc_r+0x16>
 800bd1c:	290a      	cmp	r1, #10
 800bd1e:	d103      	bne.n	800bd28 <__sfputc_r+0x1e>
 800bd20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd24:	f000 b932 	b.w	800bf8c <__swbuf_r>
 800bd28:	6813      	ldr	r3, [r2, #0]
 800bd2a:	1c58      	adds	r0, r3, #1
 800bd2c:	6010      	str	r0, [r2, #0]
 800bd2e:	7019      	strb	r1, [r3, #0]
 800bd30:	4608      	mov	r0, r1
 800bd32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <__sfputs_r>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	4614      	mov	r4, r2
 800bd40:	18d5      	adds	r5, r2, r3
 800bd42:	42ac      	cmp	r4, r5
 800bd44:	d101      	bne.n	800bd4a <__sfputs_r+0x12>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e007      	b.n	800bd5a <__sfputs_r+0x22>
 800bd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd4e:	463a      	mov	r2, r7
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7ff ffda 	bl	800bd0a <__sfputc_r>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d1f3      	bne.n	800bd42 <__sfputs_r+0xa>
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd5c <_vfiprintf_r>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	460d      	mov	r5, r1
 800bd62:	b09d      	sub	sp, #116	@ 0x74
 800bd64:	4614      	mov	r4, r2
 800bd66:	4698      	mov	r8, r3
 800bd68:	4606      	mov	r6, r0
 800bd6a:	b118      	cbz	r0, 800bd74 <_vfiprintf_r+0x18>
 800bd6c:	6a03      	ldr	r3, [r0, #32]
 800bd6e:	b90b      	cbnz	r3, 800bd74 <_vfiprintf_r+0x18>
 800bd70:	f7fc fdc4 	bl	80088fc <__sinit>
 800bd74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd76:	07d9      	lsls	r1, r3, #31
 800bd78:	d405      	bmi.n	800bd86 <_vfiprintf_r+0x2a>
 800bd7a:	89ab      	ldrh	r3, [r5, #12]
 800bd7c:	059a      	lsls	r2, r3, #22
 800bd7e:	d402      	bmi.n	800bd86 <_vfiprintf_r+0x2a>
 800bd80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd82:	f7fc ff06 	bl	8008b92 <__retarget_lock_acquire_recursive>
 800bd86:	89ab      	ldrh	r3, [r5, #12]
 800bd88:	071b      	lsls	r3, r3, #28
 800bd8a:	d501      	bpl.n	800bd90 <_vfiprintf_r+0x34>
 800bd8c:	692b      	ldr	r3, [r5, #16]
 800bd8e:	b99b      	cbnz	r3, 800bdb8 <_vfiprintf_r+0x5c>
 800bd90:	4629      	mov	r1, r5
 800bd92:	4630      	mov	r0, r6
 800bd94:	f000 f938 	bl	800c008 <__swsetup_r>
 800bd98:	b170      	cbz	r0, 800bdb8 <_vfiprintf_r+0x5c>
 800bd9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd9c:	07dc      	lsls	r4, r3, #31
 800bd9e:	d504      	bpl.n	800bdaa <_vfiprintf_r+0x4e>
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295
 800bda4:	b01d      	add	sp, #116	@ 0x74
 800bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	0598      	lsls	r0, r3, #22
 800bdae:	d4f7      	bmi.n	800bda0 <_vfiprintf_r+0x44>
 800bdb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdb2:	f7fc feef 	bl	8008b94 <__retarget_lock_release_recursive>
 800bdb6:	e7f3      	b.n	800bda0 <_vfiprintf_r+0x44>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdc6:	2330      	movs	r3, #48	@ 0x30
 800bdc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf78 <_vfiprintf_r+0x21c>
 800bdcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdd0:	f04f 0901 	mov.w	r9, #1
 800bdd4:	4623      	mov	r3, r4
 800bdd6:	469a      	mov	sl, r3
 800bdd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bddc:	b10a      	cbz	r2, 800bde2 <_vfiprintf_r+0x86>
 800bdde:	2a25      	cmp	r2, #37	@ 0x25
 800bde0:	d1f9      	bne.n	800bdd6 <_vfiprintf_r+0x7a>
 800bde2:	ebba 0b04 	subs.w	fp, sl, r4
 800bde6:	d00b      	beq.n	800be00 <_vfiprintf_r+0xa4>
 800bde8:	465b      	mov	r3, fp
 800bdea:	4622      	mov	r2, r4
 800bdec:	4629      	mov	r1, r5
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f7ff ffa2 	bl	800bd38 <__sfputs_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	f000 80a7 	beq.w	800bf48 <_vfiprintf_r+0x1ec>
 800bdfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdfc:	445a      	add	r2, fp
 800bdfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800be00:	f89a 3000 	ldrb.w	r3, [sl]
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 809f 	beq.w	800bf48 <_vfiprintf_r+0x1ec>
 800be0a:	2300      	movs	r3, #0
 800be0c:	f04f 32ff 	mov.w	r2, #4294967295
 800be10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be14:	f10a 0a01 	add.w	sl, sl, #1
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	9307      	str	r3, [sp, #28]
 800be1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be20:	931a      	str	r3, [sp, #104]	@ 0x68
 800be22:	4654      	mov	r4, sl
 800be24:	2205      	movs	r2, #5
 800be26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2a:	4853      	ldr	r0, [pc, #332]	@ (800bf78 <_vfiprintf_r+0x21c>)
 800be2c:	f7f4 f9d8 	bl	80001e0 <memchr>
 800be30:	9a04      	ldr	r2, [sp, #16]
 800be32:	b9d8      	cbnz	r0, 800be6c <_vfiprintf_r+0x110>
 800be34:	06d1      	lsls	r1, r2, #27
 800be36:	bf44      	itt	mi
 800be38:	2320      	movmi	r3, #32
 800be3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be3e:	0713      	lsls	r3, r2, #28
 800be40:	bf44      	itt	mi
 800be42:	232b      	movmi	r3, #43	@ 0x2b
 800be44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be48:	f89a 3000 	ldrb.w	r3, [sl]
 800be4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be4e:	d015      	beq.n	800be7c <_vfiprintf_r+0x120>
 800be50:	9a07      	ldr	r2, [sp, #28]
 800be52:	4654      	mov	r4, sl
 800be54:	2000      	movs	r0, #0
 800be56:	f04f 0c0a 	mov.w	ip, #10
 800be5a:	4621      	mov	r1, r4
 800be5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be60:	3b30      	subs	r3, #48	@ 0x30
 800be62:	2b09      	cmp	r3, #9
 800be64:	d94b      	bls.n	800befe <_vfiprintf_r+0x1a2>
 800be66:	b1b0      	cbz	r0, 800be96 <_vfiprintf_r+0x13a>
 800be68:	9207      	str	r2, [sp, #28]
 800be6a:	e014      	b.n	800be96 <_vfiprintf_r+0x13a>
 800be6c:	eba0 0308 	sub.w	r3, r0, r8
 800be70:	fa09 f303 	lsl.w	r3, r9, r3
 800be74:	4313      	orrs	r3, r2
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	46a2      	mov	sl, r4
 800be7a:	e7d2      	b.n	800be22 <_vfiprintf_r+0xc6>
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	1d19      	adds	r1, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	9103      	str	r1, [sp, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfbb      	ittet	lt
 800be88:	425b      	neglt	r3, r3
 800be8a:	f042 0202 	orrlt.w	r2, r2, #2
 800be8e:	9307      	strge	r3, [sp, #28]
 800be90:	9307      	strlt	r3, [sp, #28]
 800be92:	bfb8      	it	lt
 800be94:	9204      	strlt	r2, [sp, #16]
 800be96:	7823      	ldrb	r3, [r4, #0]
 800be98:	2b2e      	cmp	r3, #46	@ 0x2e
 800be9a:	d10a      	bne.n	800beb2 <_vfiprintf_r+0x156>
 800be9c:	7863      	ldrb	r3, [r4, #1]
 800be9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bea0:	d132      	bne.n	800bf08 <_vfiprintf_r+0x1ac>
 800bea2:	9b03      	ldr	r3, [sp, #12]
 800bea4:	1d1a      	adds	r2, r3, #4
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	9203      	str	r2, [sp, #12]
 800beaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800beae:	3402      	adds	r4, #2
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf88 <_vfiprintf_r+0x22c>
 800beb6:	7821      	ldrb	r1, [r4, #0]
 800beb8:	2203      	movs	r2, #3
 800beba:	4650      	mov	r0, sl
 800bebc:	f7f4 f990 	bl	80001e0 <memchr>
 800bec0:	b138      	cbz	r0, 800bed2 <_vfiprintf_r+0x176>
 800bec2:	9b04      	ldr	r3, [sp, #16]
 800bec4:	eba0 000a 	sub.w	r0, r0, sl
 800bec8:	2240      	movs	r2, #64	@ 0x40
 800beca:	4082      	lsls	r2, r0
 800becc:	4313      	orrs	r3, r2
 800bece:	3401      	adds	r4, #1
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed6:	4829      	ldr	r0, [pc, #164]	@ (800bf7c <_vfiprintf_r+0x220>)
 800bed8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bedc:	2206      	movs	r2, #6
 800bede:	f7f4 f97f 	bl	80001e0 <memchr>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d03f      	beq.n	800bf66 <_vfiprintf_r+0x20a>
 800bee6:	4b26      	ldr	r3, [pc, #152]	@ (800bf80 <_vfiprintf_r+0x224>)
 800bee8:	bb1b      	cbnz	r3, 800bf32 <_vfiprintf_r+0x1d6>
 800beea:	9b03      	ldr	r3, [sp, #12]
 800beec:	3307      	adds	r3, #7
 800beee:	f023 0307 	bic.w	r3, r3, #7
 800bef2:	3308      	adds	r3, #8
 800bef4:	9303      	str	r3, [sp, #12]
 800bef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bef8:	443b      	add	r3, r7
 800befa:	9309      	str	r3, [sp, #36]	@ 0x24
 800befc:	e76a      	b.n	800bdd4 <_vfiprintf_r+0x78>
 800befe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf02:	460c      	mov	r4, r1
 800bf04:	2001      	movs	r0, #1
 800bf06:	e7a8      	b.n	800be5a <_vfiprintf_r+0xfe>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	3401      	adds	r4, #1
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	f04f 0c0a 	mov.w	ip, #10
 800bf14:	4620      	mov	r0, r4
 800bf16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf1a:	3a30      	subs	r2, #48	@ 0x30
 800bf1c:	2a09      	cmp	r2, #9
 800bf1e:	d903      	bls.n	800bf28 <_vfiprintf_r+0x1cc>
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0c6      	beq.n	800beb2 <_vfiprintf_r+0x156>
 800bf24:	9105      	str	r1, [sp, #20]
 800bf26:	e7c4      	b.n	800beb2 <_vfiprintf_r+0x156>
 800bf28:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e7f0      	b.n	800bf14 <_vfiprintf_r+0x1b8>
 800bf32:	ab03      	add	r3, sp, #12
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	462a      	mov	r2, r5
 800bf38:	4b12      	ldr	r3, [pc, #72]	@ (800bf84 <_vfiprintf_r+0x228>)
 800bf3a:	a904      	add	r1, sp, #16
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f7fb fe85 	bl	8007c4c <_printf_float>
 800bf42:	4607      	mov	r7, r0
 800bf44:	1c78      	adds	r0, r7, #1
 800bf46:	d1d6      	bne.n	800bef6 <_vfiprintf_r+0x19a>
 800bf48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf4a:	07d9      	lsls	r1, r3, #31
 800bf4c:	d405      	bmi.n	800bf5a <_vfiprintf_r+0x1fe>
 800bf4e:	89ab      	ldrh	r3, [r5, #12]
 800bf50:	059a      	lsls	r2, r3, #22
 800bf52:	d402      	bmi.n	800bf5a <_vfiprintf_r+0x1fe>
 800bf54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf56:	f7fc fe1d 	bl	8008b94 <__retarget_lock_release_recursive>
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	065b      	lsls	r3, r3, #25
 800bf5e:	f53f af1f 	bmi.w	800bda0 <_vfiprintf_r+0x44>
 800bf62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf64:	e71e      	b.n	800bda4 <_vfiprintf_r+0x48>
 800bf66:	ab03      	add	r3, sp, #12
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	4b05      	ldr	r3, [pc, #20]	@ (800bf84 <_vfiprintf_r+0x228>)
 800bf6e:	a904      	add	r1, sp, #16
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7fc f903 	bl	800817c <_printf_i>
 800bf76:	e7e4      	b.n	800bf42 <_vfiprintf_r+0x1e6>
 800bf78:	0800c659 	.word	0x0800c659
 800bf7c:	0800c663 	.word	0x0800c663
 800bf80:	08007c4d 	.word	0x08007c4d
 800bf84:	0800bd39 	.word	0x0800bd39
 800bf88:	0800c65f 	.word	0x0800c65f

0800bf8c <__swbuf_r>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	460e      	mov	r6, r1
 800bf90:	4614      	mov	r4, r2
 800bf92:	4605      	mov	r5, r0
 800bf94:	b118      	cbz	r0, 800bf9e <__swbuf_r+0x12>
 800bf96:	6a03      	ldr	r3, [r0, #32]
 800bf98:	b90b      	cbnz	r3, 800bf9e <__swbuf_r+0x12>
 800bf9a:	f7fc fcaf 	bl	80088fc <__sinit>
 800bf9e:	69a3      	ldr	r3, [r4, #24]
 800bfa0:	60a3      	str	r3, [r4, #8]
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	071a      	lsls	r2, r3, #28
 800bfa6:	d501      	bpl.n	800bfac <__swbuf_r+0x20>
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	b943      	cbnz	r3, 800bfbe <__swbuf_r+0x32>
 800bfac:	4621      	mov	r1, r4
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f000 f82a 	bl	800c008 <__swsetup_r>
 800bfb4:	b118      	cbz	r0, 800bfbe <__swbuf_r+0x32>
 800bfb6:	f04f 37ff 	mov.w	r7, #4294967295
 800bfba:	4638      	mov	r0, r7
 800bfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	6922      	ldr	r2, [r4, #16]
 800bfc2:	1a98      	subs	r0, r3, r2
 800bfc4:	6963      	ldr	r3, [r4, #20]
 800bfc6:	b2f6      	uxtb	r6, r6
 800bfc8:	4283      	cmp	r3, r0
 800bfca:	4637      	mov	r7, r6
 800bfcc:	dc05      	bgt.n	800bfda <__swbuf_r+0x4e>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f7ff fa47 	bl	800b464 <_fflush_r>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d1ed      	bne.n	800bfb6 <__swbuf_r+0x2a>
 800bfda:	68a3      	ldr	r3, [r4, #8]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	60a3      	str	r3, [r4, #8]
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	1c5a      	adds	r2, r3, #1
 800bfe4:	6022      	str	r2, [r4, #0]
 800bfe6:	701e      	strb	r6, [r3, #0]
 800bfe8:	6962      	ldr	r2, [r4, #20]
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d004      	beq.n	800bffa <__swbuf_r+0x6e>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	07db      	lsls	r3, r3, #31
 800bff4:	d5e1      	bpl.n	800bfba <__swbuf_r+0x2e>
 800bff6:	2e0a      	cmp	r6, #10
 800bff8:	d1df      	bne.n	800bfba <__swbuf_r+0x2e>
 800bffa:	4621      	mov	r1, r4
 800bffc:	4628      	mov	r0, r5
 800bffe:	f7ff fa31 	bl	800b464 <_fflush_r>
 800c002:	2800      	cmp	r0, #0
 800c004:	d0d9      	beq.n	800bfba <__swbuf_r+0x2e>
 800c006:	e7d6      	b.n	800bfb6 <__swbuf_r+0x2a>

0800c008 <__swsetup_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4b29      	ldr	r3, [pc, #164]	@ (800c0b0 <__swsetup_r+0xa8>)
 800c00c:	4605      	mov	r5, r0
 800c00e:	6818      	ldr	r0, [r3, #0]
 800c010:	460c      	mov	r4, r1
 800c012:	b118      	cbz	r0, 800c01c <__swsetup_r+0x14>
 800c014:	6a03      	ldr	r3, [r0, #32]
 800c016:	b90b      	cbnz	r3, 800c01c <__swsetup_r+0x14>
 800c018:	f7fc fc70 	bl	80088fc <__sinit>
 800c01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c020:	0719      	lsls	r1, r3, #28
 800c022:	d422      	bmi.n	800c06a <__swsetup_r+0x62>
 800c024:	06da      	lsls	r2, r3, #27
 800c026:	d407      	bmi.n	800c038 <__swsetup_r+0x30>
 800c028:	2209      	movs	r2, #9
 800c02a:	602a      	str	r2, [r5, #0]
 800c02c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	e033      	b.n	800c0a0 <__swsetup_r+0x98>
 800c038:	0758      	lsls	r0, r3, #29
 800c03a:	d512      	bpl.n	800c062 <__swsetup_r+0x5a>
 800c03c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c03e:	b141      	cbz	r1, 800c052 <__swsetup_r+0x4a>
 800c040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c044:	4299      	cmp	r1, r3
 800c046:	d002      	beq.n	800c04e <__swsetup_r+0x46>
 800c048:	4628      	mov	r0, r5
 800c04a:	f7fd fbf9 	bl	8009840 <_free_r>
 800c04e:	2300      	movs	r3, #0
 800c050:	6363      	str	r3, [r4, #52]	@ 0x34
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	2300      	movs	r3, #0
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	6923      	ldr	r3, [r4, #16]
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0308 	orr.w	r3, r3, #8
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	b94b      	cbnz	r3, 800c082 <__swsetup_r+0x7a>
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c078:	d003      	beq.n	800c082 <__swsetup_r+0x7a>
 800c07a:	4621      	mov	r1, r4
 800c07c:	4628      	mov	r0, r5
 800c07e:	f000 f883 	bl	800c188 <__smakebuf_r>
 800c082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c086:	f013 0201 	ands.w	r2, r3, #1
 800c08a:	d00a      	beq.n	800c0a2 <__swsetup_r+0x9a>
 800c08c:	2200      	movs	r2, #0
 800c08e:	60a2      	str	r2, [r4, #8]
 800c090:	6962      	ldr	r2, [r4, #20]
 800c092:	4252      	negs	r2, r2
 800c094:	61a2      	str	r2, [r4, #24]
 800c096:	6922      	ldr	r2, [r4, #16]
 800c098:	b942      	cbnz	r2, 800c0ac <__swsetup_r+0xa4>
 800c09a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c09e:	d1c5      	bne.n	800c02c <__swsetup_r+0x24>
 800c0a0:	bd38      	pop	{r3, r4, r5, pc}
 800c0a2:	0799      	lsls	r1, r3, #30
 800c0a4:	bf58      	it	pl
 800c0a6:	6962      	ldrpl	r2, [r4, #20]
 800c0a8:	60a2      	str	r2, [r4, #8]
 800c0aa:	e7f4      	b.n	800c096 <__swsetup_r+0x8e>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7f7      	b.n	800c0a0 <__swsetup_r+0x98>
 800c0b0:	20000108 	.word	0x20000108

0800c0b4 <_raise_r>:
 800c0b4:	291f      	cmp	r1, #31
 800c0b6:	b538      	push	{r3, r4, r5, lr}
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	d904      	bls.n	800c0c8 <_raise_r+0x14>
 800c0be:	2316      	movs	r3, #22
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0ca:	b112      	cbz	r2, 800c0d2 <_raise_r+0x1e>
 800c0cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0d0:	b94b      	cbnz	r3, 800c0e6 <_raise_r+0x32>
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 f830 	bl	800c138 <_getpid_r>
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4601      	mov	r1, r0
 800c0dc:	4628      	mov	r0, r5
 800c0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e2:	f000 b817 	b.w	800c114 <_kill_r>
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d00a      	beq.n	800c100 <_raise_r+0x4c>
 800c0ea:	1c59      	adds	r1, r3, #1
 800c0ec:	d103      	bne.n	800c0f6 <_raise_r+0x42>
 800c0ee:	2316      	movs	r3, #22
 800c0f0:	6003      	str	r3, [r0, #0]
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	e7e7      	b.n	800c0c6 <_raise_r+0x12>
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4798      	blx	r3
 800c100:	2000      	movs	r0, #0
 800c102:	e7e0      	b.n	800c0c6 <_raise_r+0x12>

0800c104 <raise>:
 800c104:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <raise+0xc>)
 800c106:	4601      	mov	r1, r0
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7ff bfd3 	b.w	800c0b4 <_raise_r>
 800c10e:	bf00      	nop
 800c110:	20000108 	.word	0x20000108

0800c114 <_kill_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4d07      	ldr	r5, [pc, #28]	@ (800c134 <_kill_r+0x20>)
 800c118:	2300      	movs	r3, #0
 800c11a:	4604      	mov	r4, r0
 800c11c:	4608      	mov	r0, r1
 800c11e:	4611      	mov	r1, r2
 800c120:	602b      	str	r3, [r5, #0]
 800c122:	f7f5 f9e5 	bl	80014f0 <_kill>
 800c126:	1c43      	adds	r3, r0, #1
 800c128:	d102      	bne.n	800c130 <_kill_r+0x1c>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	b103      	cbz	r3, 800c130 <_kill_r+0x1c>
 800c12e:	6023      	str	r3, [r4, #0]
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	bf00      	nop
 800c134:	20002028 	.word	0x20002028

0800c138 <_getpid_r>:
 800c138:	f7f5 b9d2 	b.w	80014e0 <_getpid>

0800c13c <__swhatbuf_r>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	460c      	mov	r4, r1
 800c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c144:	2900      	cmp	r1, #0
 800c146:	b096      	sub	sp, #88	@ 0x58
 800c148:	4615      	mov	r5, r2
 800c14a:	461e      	mov	r6, r3
 800c14c:	da0d      	bge.n	800c16a <__swhatbuf_r+0x2e>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c154:	f04f 0100 	mov.w	r1, #0
 800c158:	bf14      	ite	ne
 800c15a:	2340      	movne	r3, #64	@ 0x40
 800c15c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c160:	2000      	movs	r0, #0
 800c162:	6031      	str	r1, [r6, #0]
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	b016      	add	sp, #88	@ 0x58
 800c168:	bd70      	pop	{r4, r5, r6, pc}
 800c16a:	466a      	mov	r2, sp
 800c16c:	f000 f848 	bl	800c200 <_fstat_r>
 800c170:	2800      	cmp	r0, #0
 800c172:	dbec      	blt.n	800c14e <__swhatbuf_r+0x12>
 800c174:	9901      	ldr	r1, [sp, #4]
 800c176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c17a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c17e:	4259      	negs	r1, r3
 800c180:	4159      	adcs	r1, r3
 800c182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c186:	e7eb      	b.n	800c160 <__swhatbuf_r+0x24>

0800c188 <__smakebuf_r>:
 800c188:	898b      	ldrh	r3, [r1, #12]
 800c18a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c18c:	079d      	lsls	r5, r3, #30
 800c18e:	4606      	mov	r6, r0
 800c190:	460c      	mov	r4, r1
 800c192:	d507      	bpl.n	800c1a4 <__smakebuf_r+0x1c>
 800c194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	2301      	movs	r3, #1
 800c19e:	6163      	str	r3, [r4, #20]
 800c1a0:	b003      	add	sp, #12
 800c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a4:	ab01      	add	r3, sp, #4
 800c1a6:	466a      	mov	r2, sp
 800c1a8:	f7ff ffc8 	bl	800c13c <__swhatbuf_r>
 800c1ac:	9f00      	ldr	r7, [sp, #0]
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7fd fbb8 	bl	8009928 <_malloc_r>
 800c1b8:	b948      	cbnz	r0, 800c1ce <__smakebuf_r+0x46>
 800c1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1be:	059a      	lsls	r2, r3, #22
 800c1c0:	d4ee      	bmi.n	800c1a0 <__smakebuf_r+0x18>
 800c1c2:	f023 0303 	bic.w	r3, r3, #3
 800c1c6:	f043 0302 	orr.w	r3, r3, #2
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	e7e2      	b.n	800c194 <__smakebuf_r+0xc>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	6020      	str	r0, [r4, #0]
 800c1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	9b01      	ldr	r3, [sp, #4]
 800c1da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1de:	b15b      	cbz	r3, 800c1f8 <__smakebuf_r+0x70>
 800c1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f000 f81d 	bl	800c224 <_isatty_r>
 800c1ea:	b128      	cbz	r0, 800c1f8 <__smakebuf_r+0x70>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	f043 0301 	orr.w	r3, r3, #1
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	431d      	orrs	r5, r3
 800c1fc:	81a5      	strh	r5, [r4, #12]
 800c1fe:	e7cf      	b.n	800c1a0 <__smakebuf_r+0x18>

0800c200 <_fstat_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	@ (800c220 <_fstat_r+0x20>)
 800c204:	2300      	movs	r3, #0
 800c206:	4604      	mov	r4, r0
 800c208:	4608      	mov	r0, r1
 800c20a:	4611      	mov	r1, r2
 800c20c:	602b      	str	r3, [r5, #0]
 800c20e:	f7f5 f9cf 	bl	80015b0 <_fstat>
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	d102      	bne.n	800c21c <_fstat_r+0x1c>
 800c216:	682b      	ldr	r3, [r5, #0]
 800c218:	b103      	cbz	r3, 800c21c <_fstat_r+0x1c>
 800c21a:	6023      	str	r3, [r4, #0]
 800c21c:	bd38      	pop	{r3, r4, r5, pc}
 800c21e:	bf00      	nop
 800c220:	20002028 	.word	0x20002028

0800c224 <_isatty_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d06      	ldr	r5, [pc, #24]	@ (800c240 <_isatty_r+0x1c>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	f7f5 f9ce 	bl	80015d0 <_isatty>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_isatty_r+0x1a>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_isatty_r+0x1a>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20002028 	.word	0x20002028

0800c244 <_init>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	bf00      	nop
 800c248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24a:	bc08      	pop	{r3}
 800c24c:	469e      	mov	lr, r3
 800c24e:	4770      	bx	lr

0800c250 <_fini>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	bf00      	nop
 800c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c256:	bc08      	pop	{r3}
 800c258:	469e      	mov	lr, r3
 800c25a:	4770      	bx	lr
